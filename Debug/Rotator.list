
Rotator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080037a8  080037a8  000047a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003840  08003840  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003840  08003840  00004840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003848  08003848  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003848  08003848  00004848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800384c  0800384c  0000484c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003850  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000060  080038b0  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000280  080038b0  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d9a  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f6  00000000  00000000  00016e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000627d  00000000  00000000  0001a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad0  00000000  00000000  00020998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb2  00000000  00000000  00021468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014592  00000000  00000000  0002231a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015673  00000000  00000000  000368ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006fbe9  00000000  00000000  0004bf1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bbb08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020f0  00000000  00000000  000bbb4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000bdc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003790 	.word	0x08003790

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08003790 	.word	0x08003790

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			@ (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	@ 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	@ 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	@ 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			@ (mov r8, r8)

0800041c <__aeabi_uldivmod>:
 800041c:	2b00      	cmp	r3, #0
 800041e:	d111      	bne.n	8000444 <__aeabi_uldivmod+0x28>
 8000420:	2a00      	cmp	r2, #0
 8000422:	d10f      	bne.n	8000444 <__aeabi_uldivmod+0x28>
 8000424:	2900      	cmp	r1, #0
 8000426:	d100      	bne.n	800042a <__aeabi_uldivmod+0xe>
 8000428:	2800      	cmp	r0, #0
 800042a:	d002      	beq.n	8000432 <__aeabi_uldivmod+0x16>
 800042c:	2100      	movs	r1, #0
 800042e:	43c9      	mvns	r1, r1
 8000430:	0008      	movs	r0, r1
 8000432:	b407      	push	{r0, r1, r2}
 8000434:	4802      	ldr	r0, [pc, #8]	@ (8000440 <__aeabi_uldivmod+0x24>)
 8000436:	a102      	add	r1, pc, #8	@ (adr r1, 8000440 <__aeabi_uldivmod+0x24>)
 8000438:	1840      	adds	r0, r0, r1
 800043a:	9002      	str	r0, [sp, #8]
 800043c:	bd03      	pop	{r0, r1, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	ffffffd9 	.word	0xffffffd9
 8000444:	b403      	push	{r0, r1}
 8000446:	4668      	mov	r0, sp
 8000448:	b501      	push	{r0, lr}
 800044a:	9802      	ldr	r0, [sp, #8]
 800044c:	f000 f834 	bl	80004b8 <__udivmoddi4>
 8000450:	9b01      	ldr	r3, [sp, #4]
 8000452:	469e      	mov	lr, r3
 8000454:	b002      	add	sp, #8
 8000456:	bc0c      	pop	{r2, r3}
 8000458:	4770      	bx	lr
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_lmul>:
 800045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045e:	46ce      	mov	lr, r9
 8000460:	4699      	mov	r9, r3
 8000462:	0c03      	lsrs	r3, r0, #16
 8000464:	469c      	mov	ip, r3
 8000466:	0413      	lsls	r3, r2, #16
 8000468:	4647      	mov	r7, r8
 800046a:	0c1b      	lsrs	r3, r3, #16
 800046c:	001d      	movs	r5, r3
 800046e:	000e      	movs	r6, r1
 8000470:	4661      	mov	r1, ip
 8000472:	0404      	lsls	r4, r0, #16
 8000474:	0c24      	lsrs	r4, r4, #16
 8000476:	b580      	push	{r7, lr}
 8000478:	0007      	movs	r7, r0
 800047a:	0c10      	lsrs	r0, r2, #16
 800047c:	434b      	muls	r3, r1
 800047e:	4365      	muls	r5, r4
 8000480:	4341      	muls	r1, r0
 8000482:	4360      	muls	r0, r4
 8000484:	0c2c      	lsrs	r4, r5, #16
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	1824      	adds	r4, r4, r0
 800048a:	468c      	mov	ip, r1
 800048c:	42a3      	cmp	r3, r4
 800048e:	d903      	bls.n	8000498 <__aeabi_lmul+0x3c>
 8000490:	2380      	movs	r3, #128	@ 0x80
 8000492:	025b      	lsls	r3, r3, #9
 8000494:	4698      	mov	r8, r3
 8000496:	44c4      	add	ip, r8
 8000498:	4649      	mov	r1, r9
 800049a:	4379      	muls	r1, r7
 800049c:	4356      	muls	r6, r2
 800049e:	0c23      	lsrs	r3, r4, #16
 80004a0:	042d      	lsls	r5, r5, #16
 80004a2:	0c2d      	lsrs	r5, r5, #16
 80004a4:	1989      	adds	r1, r1, r6
 80004a6:	4463      	add	r3, ip
 80004a8:	0424      	lsls	r4, r4, #16
 80004aa:	1960      	adds	r0, r4, r5
 80004ac:	18c9      	adds	r1, r1, r3
 80004ae:	bcc0      	pop	{r6, r7}
 80004b0:	46b9      	mov	r9, r7
 80004b2:	46b0      	mov	r8, r6
 80004b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <__udivmoddi4>:
 80004b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ba:	4657      	mov	r7, sl
 80004bc:	464e      	mov	r6, r9
 80004be:	4645      	mov	r5, r8
 80004c0:	46de      	mov	lr, fp
 80004c2:	b5e0      	push	{r5, r6, r7, lr}
 80004c4:	0004      	movs	r4, r0
 80004c6:	000d      	movs	r5, r1
 80004c8:	4692      	mov	sl, r2
 80004ca:	4699      	mov	r9, r3
 80004cc:	b083      	sub	sp, #12
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d830      	bhi.n	8000534 <__udivmoddi4+0x7c>
 80004d2:	d02d      	beq.n	8000530 <__udivmoddi4+0x78>
 80004d4:	4649      	mov	r1, r9
 80004d6:	4650      	mov	r0, sl
 80004d8:	f000 f8d8 	bl	800068c <__clzdi2>
 80004dc:	0029      	movs	r1, r5
 80004de:	0006      	movs	r6, r0
 80004e0:	0020      	movs	r0, r4
 80004e2:	f000 f8d3 	bl	800068c <__clzdi2>
 80004e6:	1a33      	subs	r3, r6, r0
 80004e8:	4698      	mov	r8, r3
 80004ea:	3b20      	subs	r3, #32
 80004ec:	d434      	bmi.n	8000558 <__udivmoddi4+0xa0>
 80004ee:	469b      	mov	fp, r3
 80004f0:	4653      	mov	r3, sl
 80004f2:	465a      	mov	r2, fp
 80004f4:	4093      	lsls	r3, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	001f      	movs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d83b      	bhi.n	800057c <__udivmoddi4+0xc4>
 8000504:	42af      	cmp	r7, r5
 8000506:	d100      	bne.n	800050a <__udivmoddi4+0x52>
 8000508:	e079      	b.n	80005fe <__udivmoddi4+0x146>
 800050a:	465b      	mov	r3, fp
 800050c:	1ba4      	subs	r4, r4, r6
 800050e:	41bd      	sbcs	r5, r7
 8000510:	2b00      	cmp	r3, #0
 8000512:	da00      	bge.n	8000516 <__udivmoddi4+0x5e>
 8000514:	e076      	b.n	8000604 <__udivmoddi4+0x14c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2301      	movs	r3, #1
 8000520:	465a      	mov	r2, fp
 8000522:	4093      	lsls	r3, r2
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2301      	movs	r3, #1
 8000528:	4642      	mov	r2, r8
 800052a:	4093      	lsls	r3, r2
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	e029      	b.n	8000584 <__udivmoddi4+0xcc>
 8000530:	4282      	cmp	r2, r0
 8000532:	d9cf      	bls.n	80004d4 <__udivmoddi4+0x1c>
 8000534:	2200      	movs	r2, #0
 8000536:	2300      	movs	r3, #0
 8000538:	9200      	str	r2, [sp, #0]
 800053a:	9301      	str	r3, [sp, #4]
 800053c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <__udivmoddi4+0x8e>
 8000542:	601c      	str	r4, [r3, #0]
 8000544:	605d      	str	r5, [r3, #4]
 8000546:	9800      	ldr	r0, [sp, #0]
 8000548:	9901      	ldr	r1, [sp, #4]
 800054a:	b003      	add	sp, #12
 800054c:	bcf0      	pop	{r4, r5, r6, r7}
 800054e:	46bb      	mov	fp, r7
 8000550:	46b2      	mov	sl, r6
 8000552:	46a9      	mov	r9, r5
 8000554:	46a0      	mov	r8, r4
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000558:	4642      	mov	r2, r8
 800055a:	469b      	mov	fp, r3
 800055c:	2320      	movs	r3, #32
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	4652      	mov	r2, sl
 8000562:	40da      	lsrs	r2, r3
 8000564:	4641      	mov	r1, r8
 8000566:	0013      	movs	r3, r2
 8000568:	464a      	mov	r2, r9
 800056a:	408a      	lsls	r2, r1
 800056c:	0017      	movs	r7, r2
 800056e:	4642      	mov	r2, r8
 8000570:	431f      	orrs	r7, r3
 8000572:	4653      	mov	r3, sl
 8000574:	4093      	lsls	r3, r2
 8000576:	001e      	movs	r6, r3
 8000578:	42af      	cmp	r7, r5
 800057a:	d9c3      	bls.n	8000504 <__udivmoddi4+0x4c>
 800057c:	2200      	movs	r2, #0
 800057e:	2300      	movs	r3, #0
 8000580:	9200      	str	r2, [sp, #0]
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	4643      	mov	r3, r8
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0d8      	beq.n	800053c <__udivmoddi4+0x84>
 800058a:	07fb      	lsls	r3, r7, #31
 800058c:	0872      	lsrs	r2, r6, #1
 800058e:	431a      	orrs	r2, r3
 8000590:	4646      	mov	r6, r8
 8000592:	087b      	lsrs	r3, r7, #1
 8000594:	e00e      	b.n	80005b4 <__udivmoddi4+0xfc>
 8000596:	42ab      	cmp	r3, r5
 8000598:	d101      	bne.n	800059e <__udivmoddi4+0xe6>
 800059a:	42a2      	cmp	r2, r4
 800059c:	d80c      	bhi.n	80005b8 <__udivmoddi4+0x100>
 800059e:	1aa4      	subs	r4, r4, r2
 80005a0:	419d      	sbcs	r5, r3
 80005a2:	2001      	movs	r0, #1
 80005a4:	1924      	adds	r4, r4, r4
 80005a6:	416d      	adcs	r5, r5
 80005a8:	2100      	movs	r1, #0
 80005aa:	3e01      	subs	r6, #1
 80005ac:	1824      	adds	r4, r4, r0
 80005ae:	414d      	adcs	r5, r1
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d006      	beq.n	80005c2 <__udivmoddi4+0x10a>
 80005b4:	42ab      	cmp	r3, r5
 80005b6:	d9ee      	bls.n	8000596 <__udivmoddi4+0xde>
 80005b8:	3e01      	subs	r6, #1
 80005ba:	1924      	adds	r4, r4, r4
 80005bc:	416d      	adcs	r5, r5
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d1f8      	bne.n	80005b4 <__udivmoddi4+0xfc>
 80005c2:	9800      	ldr	r0, [sp, #0]
 80005c4:	9901      	ldr	r1, [sp, #4]
 80005c6:	465b      	mov	r3, fp
 80005c8:	1900      	adds	r0, r0, r4
 80005ca:	4169      	adcs	r1, r5
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db24      	blt.n	800061a <__udivmoddi4+0x162>
 80005d0:	002b      	movs	r3, r5
 80005d2:	465a      	mov	r2, fp
 80005d4:	4644      	mov	r4, r8
 80005d6:	40d3      	lsrs	r3, r2
 80005d8:	002a      	movs	r2, r5
 80005da:	40e2      	lsrs	r2, r4
 80005dc:	001c      	movs	r4, r3
 80005de:	465b      	mov	r3, fp
 80005e0:	0015      	movs	r5, r2
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	db2a      	blt.n	800063c <__udivmoddi4+0x184>
 80005e6:	0026      	movs	r6, r4
 80005e8:	409e      	lsls	r6, r3
 80005ea:	0033      	movs	r3, r6
 80005ec:	0026      	movs	r6, r4
 80005ee:	4647      	mov	r7, r8
 80005f0:	40be      	lsls	r6, r7
 80005f2:	0032      	movs	r2, r6
 80005f4:	1a80      	subs	r0, r0, r2
 80005f6:	4199      	sbcs	r1, r3
 80005f8:	9000      	str	r0, [sp, #0]
 80005fa:	9101      	str	r1, [sp, #4]
 80005fc:	e79e      	b.n	800053c <__udivmoddi4+0x84>
 80005fe:	42a3      	cmp	r3, r4
 8000600:	d8bc      	bhi.n	800057c <__udivmoddi4+0xc4>
 8000602:	e782      	b.n	800050a <__udivmoddi4+0x52>
 8000604:	4642      	mov	r2, r8
 8000606:	2320      	movs	r3, #32
 8000608:	2100      	movs	r1, #0
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	2200      	movs	r2, #0
 800060e:	9100      	str	r1, [sp, #0]
 8000610:	9201      	str	r2, [sp, #4]
 8000612:	2201      	movs	r2, #1
 8000614:	40da      	lsrs	r2, r3
 8000616:	9201      	str	r2, [sp, #4]
 8000618:	e785      	b.n	8000526 <__udivmoddi4+0x6e>
 800061a:	4642      	mov	r2, r8
 800061c:	2320      	movs	r3, #32
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	002a      	movs	r2, r5
 8000622:	4646      	mov	r6, r8
 8000624:	409a      	lsls	r2, r3
 8000626:	0023      	movs	r3, r4
 8000628:	40f3      	lsrs	r3, r6
 800062a:	4644      	mov	r4, r8
 800062c:	4313      	orrs	r3, r2
 800062e:	002a      	movs	r2, r5
 8000630:	40e2      	lsrs	r2, r4
 8000632:	001c      	movs	r4, r3
 8000634:	465b      	mov	r3, fp
 8000636:	0015      	movs	r5, r2
 8000638:	2b00      	cmp	r3, #0
 800063a:	dad4      	bge.n	80005e6 <__udivmoddi4+0x12e>
 800063c:	4642      	mov	r2, r8
 800063e:	002f      	movs	r7, r5
 8000640:	2320      	movs	r3, #32
 8000642:	0026      	movs	r6, r4
 8000644:	4097      	lsls	r7, r2
 8000646:	1a9b      	subs	r3, r3, r2
 8000648:	40de      	lsrs	r6, r3
 800064a:	003b      	movs	r3, r7
 800064c:	4333      	orrs	r3, r6
 800064e:	e7cd      	b.n	80005ec <__udivmoddi4+0x134>

08000650 <__clzsi2>:
 8000650:	211c      	movs	r1, #28
 8000652:	2301      	movs	r3, #1
 8000654:	041b      	lsls	r3, r3, #16
 8000656:	4298      	cmp	r0, r3
 8000658:	d301      	bcc.n	800065e <__clzsi2+0xe>
 800065a:	0c00      	lsrs	r0, r0, #16
 800065c:	3910      	subs	r1, #16
 800065e:	0a1b      	lsrs	r3, r3, #8
 8000660:	4298      	cmp	r0, r3
 8000662:	d301      	bcc.n	8000668 <__clzsi2+0x18>
 8000664:	0a00      	lsrs	r0, r0, #8
 8000666:	3908      	subs	r1, #8
 8000668:	091b      	lsrs	r3, r3, #4
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0x22>
 800066e:	0900      	lsrs	r0, r0, #4
 8000670:	3904      	subs	r1, #4
 8000672:	a202      	add	r2, pc, #8	@ (adr r2, 800067c <__clzsi2+0x2c>)
 8000674:	5c10      	ldrb	r0, [r2, r0]
 8000676:	1840      	adds	r0, r0, r1
 8000678:	4770      	bx	lr
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	02020304 	.word	0x02020304
 8000680:	01010101 	.word	0x01010101
	...

0800068c <__clzdi2>:
 800068c:	b510      	push	{r4, lr}
 800068e:	2900      	cmp	r1, #0
 8000690:	d103      	bne.n	800069a <__clzdi2+0xe>
 8000692:	f7ff ffdd 	bl	8000650 <__clzsi2>
 8000696:	3020      	adds	r0, #32
 8000698:	e002      	b.n	80006a0 <__clzdi2+0x14>
 800069a:	0008      	movs	r0, r1
 800069c:	f7ff ffd8 	bl	8000650 <__clzsi2>
 80006a0:	bd10      	pop	{r4, pc}
 80006a2:	46c0      	nop			@ (mov r8, r8)

080006a4 <sendInternal.constprop.0.isra.0>:
#endif /* USE_BUSY_FLAG */
}
#endif

#ifdef USE_I2C_BUS
static HAL_StatusTypeDef sendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags)
 80006a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80006a6:	0005      	movs	r5, r0
 80006a8:	000e      	movs	r6, r1
{
    HAL_StatusTypeDef res;
    for(;;)
    {
        res = HAL_I2C_IsDeviceReady(&LCD_I2C_PORT, lcd_addr, 1, HAL_MAX_DELAY);
 80006aa:	2301      	movs	r3, #1
 80006ac:	4c13      	ldr	r4, [pc, #76]	@ (80006fc <sendInternal.constprop.0.isra.0+0x58>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	214e      	movs	r1, #78	@ 0x4e
 80006b2:	0020      	movs	r0, r4
 80006b4:	425b      	negs	r3, r3
 80006b6:	f001 fcf3 	bl	80020a0 <HAL_I2C_IsDeviceReady>
        if(res == HAL_OK)
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d1f5      	bne.n	80006aa <sendInternal.constprop.0.isra.0+0x6>

    uint8_t up = data & 0xF0;
    uint8_t lo = (data << 4) & 0xF0;

    uint8_t data_arr[4];
    data_arr[0] = up|flags|current_status_backlight|PIN_EN;
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <sendInternal.constprop.0.isra.0+0x5c>)
    uint8_t up = data & 0xF0;
 80006c0:	0028      	movs	r0, r5
 80006c2:	7819      	ldrb	r1, [r3, #0]
 80006c4:	230f      	movs	r3, #15
 80006c6:	4398      	bics	r0, r3
    data_arr[0] = up|flags|current_status_backlight|PIN_EN;
 80006c8:	3b0b      	subs	r3, #11
 80006ca:	4331      	orrs	r1, r6
 80006cc:	001e      	movs	r6, r3
    uint8_t lo = (data << 4) & 0xF0;
 80006ce:	409d      	lsls	r5, r3
    data_arr[0] = up|flags|current_status_backlight|PIN_EN;
 80006d0:	aa03      	add	r2, sp, #12
 80006d2:	4308      	orrs	r0, r1
    data_arr[1] = up|flags|current_status_backlight;
 80006d4:	7050      	strb	r0, [r2, #1]
    data_arr[0] = up|flags|current_status_backlight|PIN_EN;
 80006d6:	4306      	orrs	r6, r0
    data_arr[2] = lo|flags|current_status_backlight|PIN_EN;
 80006d8:	0018      	movs	r0, r3
 80006da:	4329      	orrs	r1, r5
 80006dc:	b2c9      	uxtb	r1, r1
    data_arr[3] = lo|flags|current_status_backlight;
 80006de:	70d1      	strb	r1, [r2, #3]
    data_arr[2] = lo|flags|current_status_backlight|PIN_EN;
 80006e0:	4308      	orrs	r0, r1

    res = HAL_I2C_Master_Transmit(&LCD_I2C_PORT, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006e2:	2101      	movs	r1, #1
 80006e4:	4249      	negs	r1, r1
    data_arr[0] = up|flags|current_status_backlight|PIN_EN;
 80006e6:	7016      	strb	r6, [r2, #0]
    data_arr[2] = lo|flags|current_status_backlight|PIN_EN;
 80006e8:	7090      	strb	r0, [r2, #2]
    res = HAL_I2C_Master_Transmit(&LCD_I2C_PORT, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006ea:	9100      	str	r1, [sp, #0]
 80006ec:	0020      	movs	r0, r4
 80006ee:	314f      	adds	r1, #79	@ 0x4f
 80006f0:	f001 fc48 	bl	8001f84 <HAL_I2C_Master_Transmit>
    HAL_Delay(BUSY_CYCLE_TIME);
 80006f4:	2005      	movs	r0, #5
 80006f6:	f001 f909 	bl	800190c <HAL_Delay>
    return res;
}
 80006fa:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80006fc:	20000080 	.word	0x20000080
 8000700:	2000007c 	.word	0x2000007c

08000704 <cursorShift.part.0>:
/*!	\details	"Cursor shift" shifts the cursor position to the right or left,
 * 				without writing or reading display data.
 * 				This function is used to correct or search the display.
 * 				In a 2-line display, the cursor moves to the second line
 * 				when it passes the 40th digit of the first line. */
void cursorShift(uint8_t direction)
 8000704:	b510      	push	{r4, lr}

	switch (direction)
	{
		/* To left */
		case LEFT  :
			sendInternal(LCD_I2C_ADDRESS_8B, 0x10u, 0);
 8000706:	2100      	movs	r1, #0
 8000708:	2010      	movs	r0, #16
 800070a:	f7ff ffcb 	bl	80006a4 <sendInternal.constprop.0.isra.0>
		default:
			/* Ignore this command */
			break;
	}
#endif
}
 800070e:	bd10      	pop	{r4, pc}

08000710 <lcdClrScr>:
{
 8000710:	b510      	push	{r4, lr}
	sendInternal(LCD_I2C_ADDRESS_8B, 0x01u, 0);
 8000712:	2100      	movs	r1, #0
 8000714:	2001      	movs	r0, #1
 8000716:	f7ff ffc5 	bl	80006a4 <sendInternal.constprop.0.isra.0>
}
 800071a:	bd10      	pop	{r4, pc}

0800071c <lcdReturn>:
{
 800071c:	b510      	push	{r4, lr}
	sendInternal(LCD_I2C_ADDRESS_8B, 0x02u, 0);
 800071e:	2100      	movs	r1, #0
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff ffbf 	bl	80006a4 <sendInternal.constprop.0.isra.0>
}
 8000726:	bd10      	pop	{r4, pc}

08000728 <cursorShift>:
{
 8000728:	b510      	push	{r4, lr}
	switch (direction)
 800072a:	283c      	cmp	r0, #60	@ 0x3c
 800072c:	d002      	beq.n	8000734 <cursorShift+0xc>
 800072e:	283e      	cmp	r0, #62	@ 0x3e
 8000730:	d003      	beq.n	800073a <cursorShift+0x12>
}
 8000732:	bd10      	pop	{r4, pc}
 8000734:	f7ff ffe6 	bl	8000704 <cursorShift.part.0>
 8000738:	e7fb      	b.n	8000732 <cursorShift+0xa>
			sendInternal(LCD_I2C_ADDRESS_8B, 0x14u, 0);
 800073a:	2100      	movs	r1, #0
 800073c:	2014      	movs	r0, #20
 800073e:	f7ff ffb1 	bl	80006a4 <sendInternal.constprop.0.isra.0>
}
 8000742:	e7f6      	b.n	8000732 <cursorShift+0xa>

08000744 <lcdGoto>:
/*!	\details	Go to the specified (DDRAM/CGRAM) memory address.*/
void lcdGoto(uint8_t line, uint8_t address)
{
	/* Send a command to LCD. */
#ifdef USE_I2C_BUS
	switch (line)
 8000744:	3801      	subs	r0, #1
{
 8000746:	b510      	push	{r4, lr}
	switch (line)
 8000748:	2804      	cmp	r0, #4
 800074a:	d809      	bhi.n	8000760 <lcdGoto+0x1c>
 800074c:	f7ff fcdc 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000750:	0d0b0903 	.word	0x0d0b0903
 8000754:	0f          	.byte	0x0f
 8000755:	00          	.byte	0x00
	{
		/* Set DDRAM address. */
		case LCD_1st_LINE: sendInternal(LCD_I2C_ADDRESS_8B, 0x80u | START_ADDRESS_1st_LINE | address, 0); break;
 8000756:	2080      	movs	r0, #128	@ 0x80
		case LCD_2nd_LINE: sendInternal(LCD_I2C_ADDRESS_8B, 0x80u | START_ADDRESS_2nd_LINE | address, 0); break;
		case LCD_3rd_LINE: sendInternal(LCD_I2C_ADDRESS_8B, 0x80u | START_ADDRESS_3rd_LINE | address, 0); break;
		case LCD_4th_LINE: sendInternal(LCD_I2C_ADDRESS_8B, 0x80u | START_ADDRESS_4th_LINE | address, 0); break;

		/* Set CGRAM address. */
		case CGRAM : sendInternal(LCD_I2C_ADDRESS_8B, 0x40u | address, 0); break;
 8000758:	4308      	orrs	r0, r1
 800075a:	2100      	movs	r1, #0
 800075c:	f7ff ffa2 	bl	80006a4 <sendInternal.constprop.0.isra.0>
		default:
			/* Ignore this command */
			break;
	}
#endif
}
 8000760:	bd10      	pop	{r4, pc}
		case LCD_2nd_LINE: sendInternal(LCD_I2C_ADDRESS_8B, 0x80u | START_ADDRESS_2nd_LINE | address, 0); break;
 8000762:	20c0      	movs	r0, #192	@ 0xc0
 8000764:	e7f8      	b.n	8000758 <lcdGoto+0x14>
		case LCD_3rd_LINE: sendInternal(LCD_I2C_ADDRESS_8B, 0x80u | START_ADDRESS_3rd_LINE | address, 0); break;
 8000766:	2090      	movs	r0, #144	@ 0x90
 8000768:	e7f6      	b.n	8000758 <lcdGoto+0x14>
		case LCD_4th_LINE: sendInternal(LCD_I2C_ADDRESS_8B, 0x80u | START_ADDRESS_4th_LINE | address, 0); break;
 800076a:	20d0      	movs	r0, #208	@ 0xd0
 800076c:	e7f4      	b.n	8000758 <lcdGoto+0x14>
		case CGRAM : sendInternal(LCD_I2C_ADDRESS_8B, 0x40u | address, 0); break;
 800076e:	2040      	movs	r0, #64	@ 0x40
 8000770:	e7f2      	b.n	8000758 <lcdGoto+0x14>

08000772 <lcdSetMode>:

/*!	\details	Change LCD settings. */
void lcdSetMode(uint8_t param)
{
 8000772:	b510      	push	{r4, lr}
	/* Send a command to LCD. */
#ifdef USE_I2C_BUS
	sendInternal(LCD_I2C_ADDRESS_8B, param, 0);
 8000774:	2100      	movs	r1, #0
 8000776:	f7ff ff95 	bl	80006a4 <sendInternal.constprop.0.isra.0>
#else
	CLR(LCD_RS_OUT, LCD_RS);
	lcdWrite(param);
#endif
}
 800077a:	bd10      	pop	{r4, pc}

0800077c <lcdPutc>:

/*!	\details	Write a single char to the current memory space (DDRAM/CGRAM). */
void lcdPutc(uint8_t data)
{
 800077c:	b510      	push	{r4, lr}
	/* Send data to LCD. */
#ifdef USE_I2C_BUS
	sendInternal(LCD_I2C_ADDRESS_8B, data, PIN_RS);
 800077e:	2101      	movs	r1, #1
 8000780:	f7ff ff90 	bl	80006a4 <sendInternal.constprop.0.isra.0>
	 * After execution of the CGRAM/DDRAM data write/read instruction, the RAM address counter is incremented
	 * or decremented by 1. The RAM address counter is updated after the busy flag turns off.
	 * tADD is the time elapsed after the busy flag turns off until the address counter is updated. */
	lcd10usDelay(AC_UPDATE_TIME);	/* Update RAM address counter delay. */
#endif
}
 8000784:	bd10      	pop	{r4, pc}

08000786 <lcdPuts>:

/*!	\details	Writes ANSI-C string to LCD (DDRAM memory space). */
//void lcdPuts(const uint8_t *str)
void lcdPuts(const char *str)
{
 8000786:	b510      	push	{r4, lr}
 8000788:	0004      	movs	r4, r0
	/* Send a ANSI-C string to LCD. */
	while ('\0' != *str)
 800078a:	7820      	ldrb	r0, [r4, #0]
 800078c:	2800      	cmp	r0, #0
 800078e:	d100      	bne.n	8000792 <lcdPuts+0xc>
			lcdPutc(*str);
		}
		/* Get the next symbol. */
		str++;
	}
}
 8000790:	bd10      	pop	{r4, pc}
		if(('\n' == *str))
 8000792:	280a      	cmp	r0, #10
 8000794:	d105      	bne.n	80007a2 <lcdPuts+0x1c>
			lcdGoto(LCD_2nd_LINE, 0u);
 8000796:	2100      	movs	r1, #0
 8000798:	3808      	subs	r0, #8
 800079a:	f7ff ffd3 	bl	8000744 <lcdGoto>
		str++;
 800079e:	3401      	adds	r4, #1
 80007a0:	e7f3      	b.n	800078a <lcdPuts+0x4>
		else if(('\r' == *str))
 80007a2:	280d      	cmp	r0, #13
 80007a4:	d102      	bne.n	80007ac <lcdPuts+0x26>
			lcdReturn();
 80007a6:	f7ff ffb9 	bl	800071c <lcdReturn>
 80007aa:	e7f8      	b.n	800079e <lcdPuts+0x18>
		else if(('\t' == *str))
 80007ac:	2809      	cmp	r0, #9
 80007ae:	d10c      	bne.n	80007ca <lcdPuts+0x44>
				cursorShift(RIGHT);
 80007b0:	3035      	adds	r0, #53	@ 0x35
 80007b2:	f7ff ffb9 	bl	8000728 <cursorShift>
 80007b6:	203e      	movs	r0, #62	@ 0x3e
 80007b8:	f7ff ffb6 	bl	8000728 <cursorShift>
 80007bc:	203e      	movs	r0, #62	@ 0x3e
 80007be:	f7ff ffb3 	bl	8000728 <cursorShift>
 80007c2:	203e      	movs	r0, #62	@ 0x3e
 80007c4:	f7ff ffb0 	bl	8000728 <cursorShift>
			for(i=0u; i<TAB_SPACE; i++)
 80007c8:	e7e9      	b.n	800079e <lcdPuts+0x18>
			lcdPutc(*str);
 80007ca:	f7ff ffd7 	bl	800077c <lcdPutc>
 80007ce:	e7e6      	b.n	800079e <lcdPuts+0x18>

080007d0 <lcdItos>:
	return retval;
}

/*!	\brief	Display a integer number: +/- 2147483647. */
void lcdItos(int32_t value)
{
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	1e05      	subs	r5, r0, #0
	int32_t i;

	if (value < 0)
 80007d4:	da03      	bge.n	80007de <lcdItos+0xe>
	{
		lcdPutc('-');
 80007d6:	202d      	movs	r0, #45	@ 0x2d
 80007d8:	f7ff ffd0 	bl	800077c <lcdPutc>
		value = -value;
 80007dc:	426d      	negs	r5, r5
	}

	i = 1;
 80007de:	2401      	movs	r4, #1
	while ((value / i) > 9)
	{
		i *= 10;
 80007e0:	260a      	movs	r6, #10
	while ((value / i) > 9)
 80007e2:	0021      	movs	r1, r4
 80007e4:	0028      	movs	r0, r5
 80007e6:	f7ff fd2d 	bl	8000244 <__divsi3>
 80007ea:	2809      	cmp	r0, #9
 80007ec:	dc0c      	bgt.n	8000808 <lcdItos+0x38>
	}

	lcdPutc(value/i + '0');	/* Display at least one symbol */
 80007ee:	3030      	adds	r0, #48	@ 0x30
 80007f0:	b2c0      	uxtb	r0, r0
 80007f2:	f7ff ffc3 	bl	800077c <lcdPutc>
	i /= 10;
 80007f6:	0020      	movs	r0, r4
 80007f8:	210a      	movs	r1, #10
 80007fa:	f7ff fd23 	bl	8000244 <__divsi3>

	while (i > 0)
	{
		lcdPutc('0' + ((value % (i*10)) / i));
 80007fe:	260a      	movs	r6, #10
	i /= 10;
 8000800:	0004      	movs	r4, r0
	while (i > 0)
 8000802:	2c00      	cmp	r4, #0
 8000804:	d102      	bne.n	800080c <lcdItos+0x3c>
		i /= 10;
	}
}
 8000806:	bd70      	pop	{r4, r5, r6, pc}
		i *= 10;
 8000808:	4374      	muls	r4, r6
 800080a:	e7ea      	b.n	80007e2 <lcdItos+0x12>
		lcdPutc('0' + ((value % (i*10)) / i));
 800080c:	0031      	movs	r1, r6
 800080e:	0028      	movs	r0, r5
 8000810:	4361      	muls	r1, r4
 8000812:	f7ff fdfd 	bl	8000410 <__aeabi_idivmod>
 8000816:	0008      	movs	r0, r1
 8000818:	0021      	movs	r1, r4
 800081a:	f7ff fd13 	bl	8000244 <__divsi3>
 800081e:	3030      	adds	r0, #48	@ 0x30
 8000820:	b2c0      	uxtb	r0, r0
 8000822:	f7ff ffab 	bl	800077c <lcdPutc>
		i /= 10;
 8000826:	0020      	movs	r0, r4
 8000828:	210a      	movs	r1, #10
 800082a:	f7ff fd0b 	bl	8000244 <__divsi3>
 800082e:	0004      	movs	r4, r0
 8000830:	e7e7      	b.n	8000802 <lcdItos+0x32>

08000832 <lcdInit>:
#endif

/*!	\brief	Initialize the LCD.
 * 	\note	This library use the 4-bit interface. */
void lcdInit(void)
{
 8000832:	b510      	push	{r4, lr}
	HAL_Delay(1);
	lcdConfig(0x02);
	HAL_Delay(1);
#endif
#endif
	lcdConfig(DEFAULT_DISPLAY_CONFIG);
 8000834:	2028      	movs	r0, #40	@ 0x28
 8000836:	f7ff ff9c 	bl	8000772 <lcdSetMode>
	lcdSetMode(DEFAULT_VIEW_MODE);
 800083a:	200c      	movs	r0, #12
 800083c:	f7ff ff99 	bl	8000772 <lcdSetMode>
	lcdSetMode(DEFAULT_ENTRY_MODE);
 8000840:	2006      	movs	r0, #6
 8000842:	f7ff ff96 	bl	8000772 <lcdSetMode>
	lcdClrScr();
 8000846:	f7ff ff63 	bl	8000710 <lcdClrScr>
	lcdReturn();
 800084a:	f7ff ff67 	bl	800071c <lcdReturn>
	#if (USE_PROGRESS_BAR)
		lcdInitBar();
	#endif
}
 800084e:	bd10      	pop	{r4, pc}

08000850 <lcdBackLightOn>:

#ifdef USE_I2C_BUS
void lcdBackLightOn(void)
{
	current_status_backlight = (1 << 3);
 8000850:	2208      	movs	r2, #8
{
 8000852:	b510      	push	{r4, lr}
	current_status_backlight = (1 << 3);
 8000854:	4b03      	ldr	r3, [pc, #12]	@ (8000864 <lcdBackLightOn+0x14>)
	sendInternal(LCD_I2C_ADDRESS_8B, 0x0Fu, 0);
 8000856:	2100      	movs	r1, #0
 8000858:	200f      	movs	r0, #15
	current_status_backlight = (1 << 3);
 800085a:	701a      	strb	r2, [r3, #0]
	sendInternal(LCD_I2C_ADDRESS_8B, 0x0Fu, 0);
 800085c:	f7ff ff22 	bl	80006a4 <sendInternal.constprop.0.isra.0>
}
 8000860:	bd10      	pop	{r4, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	2000007c 	.word	0x2000007c

08000868 <LL_IOP_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <LL_IOP_GRP1_EnableClock+0x18>)
{
 800086a:	b082      	sub	sp, #8
  SET_BIT(RCC->IOPENR, Periphs);
 800086c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800086e:	4302      	orrs	r2, r0
 8000870:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000874:	4018      	ands	r0, r3
 8000876:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000878:	9b01      	ldr	r3, [sp, #4]
}
 800087a:	b002      	add	sp, #8
 800087c:	4770      	bx	lr
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	40021000 	.word	0x40021000

08000884 <ShowWarning>:
	gradus = man_azimuth = 0;
	WriteToEEPROM(EEPROM_ADDRESS_START, gradus);
    WriteToEEPROM(EEPROM_ADDRESS_START+sizeof(gradus), man_azimuth);
}

void ShowWarning() {
 8000884:	b510      	push	{r4, lr}
	lcdClrScr();
 8000886:	f7ff ff43 	bl	8000710 <lcdClrScr>
	lcdGoto(LCD_1st_LINE, 1);
 800088a:	2101      	movs	r1, #1
 800088c:	0008      	movs	r0, r1
 800088e:	f7ff ff59 	bl	8000744 <lcdGoto>
	lcdPuts("TURN ON 12VDC!!");
 8000892:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <ShowWarning+0x20>)
 8000894:	f7ff ff77 	bl	8000786 <lcdPuts>
	lcdGoto(LCD_2nd_LINE, 16);
 8000898:	2110      	movs	r1, #16
 800089a:	2002      	movs	r0, #2
 800089c:	f7ff ff52 	bl	8000744 <lcdGoto>
}
 80008a0:	bd10      	pop	{r4, pc}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	080037a8 	.word	0x080037a8

080008a8 <ConvertCharToGradus>:
	lcdGoto(LCD_1st_LINE, 16);
	ConvertGradusToChar(gradus);

}

uint32_t ConvertCharToGradus() {
 80008a8:	b510      	push	{r4, lr}
	uint8_t ostatok = 0;
	uint32_t rezult = 0;
	hund = str_rx[1] - 48;
	dec = str_rx[2] - 48;
	one = str_rx[3] - 48;
	rezult = hund * 100 + dec * 10 + one;
 80008aa:	2464      	movs	r4, #100	@ 0x64
 80008ac:	210a      	movs	r1, #10
	hund = str_rx[1] - 48;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <ConvertCharToGradus+0x3c>)
 80008b0:	785a      	ldrb	r2, [r3, #1]
 80008b2:	3a30      	subs	r2, #48	@ 0x30
	rezult = hund * 100 + dec * 10 + one;
 80008b4:	b2d2      	uxtb	r2, r2
 80008b6:	4354      	muls	r4, r2
	dec = str_rx[2] - 48;
 80008b8:	789a      	ldrb	r2, [r3, #2]
 80008ba:	3a30      	subs	r2, #48	@ 0x30
	rezult = hund * 100 + dec * 10 + one;
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	434a      	muls	r2, r1
 80008c0:	18a4      	adds	r4, r4, r2
	one = str_rx[3] - 48;
 80008c2:	78da      	ldrb	r2, [r3, #3]
	ostatok = rezult % 3;
 80008c4:	3907      	subs	r1, #7
	one = str_rx[3] - 48;
 80008c6:	3a30      	subs	r2, #48	@ 0x30
	rezult = hund * 100 + dec * 10 + one;
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	18a4      	adds	r4, r4, r2
	str_rx[0] = 0;
 80008cc:	2200      	movs	r2, #0
	ostatok = rezult % 3;
 80008ce:	0020      	movs	r0, r4
	str_rx[0] = 0;
 80008d0:	701a      	strb	r2, [r3, #0]
	str_rx[1] = 0;
 80008d2:	705a      	strb	r2, [r3, #1]
	str_rx[2] = 0;
 80008d4:	709a      	strb	r2, [r3, #2]
	str_rx[3] = 0;
 80008d6:	70da      	strb	r2, [r3, #3]
	str_rx[4] = 0;
 80008d8:	711a      	strb	r2, [r3, #4]
	str_rx[5] = 0;
 80008da:	715a      	strb	r2, [r3, #5]
	ostatok = rezult % 3;
 80008dc:	f7ff fcae 	bl	800023c <__aeabi_uidivmod>
	if (ostatok == 0)
		return rezult;
	else
		return (rezult - ostatok);
 80008e0:	1a60      	subs	r0, r4, r1

}
 80008e2:	bd10      	pop	{r4, pc}
 80008e4:	200000d9 	.word	0x200000d9

080008e8 <ConvertGradusToChar>:
	}

}

void ConvertGradusToChar (uint32_t grad)
{
 80008e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80008ea:	0004      	movs	r4, r0
	uint8_t hund=0;
	uint8_t dec=0;
	uint8_t one=0;
	if (grad >= 100)
 80008ec:	2863      	cmp	r0, #99	@ 0x63
 80008ee:	d915      	bls.n	800091c <ConvertGradusToChar+0x34>
		{
		hund = grad / 100;
 80008f0:	2164      	movs	r1, #100	@ 0x64
 80008f2:	f7ff fc1d 	bl	8000130 <__udivsi3>
		dec = (grad % 100)/10;
 80008f6:	2164      	movs	r1, #100	@ 0x64
		hund = grad / 100;
 80008f8:	b2c6      	uxtb	r6, r0
		dec = (grad % 100)/10;
 80008fa:	0020      	movs	r0, r4
 80008fc:	f7ff fc9e 	bl	800023c <__aeabi_uidivmod>
 8000900:	0008      	movs	r0, r1
 8000902:	210a      	movs	r1, #10
 8000904:	f7ff fc14 	bl	8000130 <__udivsi3>
 8000908:	b2c5      	uxtb	r5, r0
 800090a:	002c      	movs	r4, r5
	{
		hund = 0;
		dec = grad/10;
		one = grad % 10;
	}
	sprintf (str_tx, "+0%d%d%d\r\n",hund,dec,one);
 800090c:	002b      	movs	r3, r5
 800090e:	0032      	movs	r2, r6
 8000910:	490a      	ldr	r1, [pc, #40]	@ (800093c <ConvertGradusToChar+0x54>)
 8000912:	9400      	str	r4, [sp, #0]
 8000914:	480a      	ldr	r0, [pc, #40]	@ (8000940 <ConvertGradusToChar+0x58>)
 8000916:	f002 fa9d 	bl	8002e54 <siprintf>
}
 800091a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	if (grad < 10)
 800091c:	2809      	cmp	r0, #9
 800091e:	d803      	bhi.n	8000928 <ConvertGradusToChar+0x40>
		dec = 0;
 8000920:	2500      	movs	r5, #0
		one = grad;
 8000922:	b2c4      	uxtb	r4, r0
		hund = 0;
 8000924:	2600      	movs	r6, #0
 8000926:	e7f1      	b.n	800090c <ConvertGradusToChar+0x24>
		dec = grad/10;
 8000928:	210a      	movs	r1, #10
 800092a:	f7ff fc01 	bl	8000130 <__udivsi3>
		one = grad % 10;
 800092e:	210a      	movs	r1, #10
		dec = grad/10;
 8000930:	b2c5      	uxtb	r5, r0
		one = grad % 10;
 8000932:	0020      	movs	r0, r4
 8000934:	f7ff fc82 	bl	800023c <__aeabi_uidivmod>
 8000938:	b2cc      	uxtb	r4, r1
 800093a:	e7f3      	b.n	8000924 <ConvertGradusToChar+0x3c>
 800093c:	080037b8 	.word	0x080037b8
 8000940:	200000cf 	.word	0x200000cf

08000944 <USART2_Send>:

void USART2_Send (char chr){
	while (!(USART2->ISR & USART_ISR_TC));
 8000944:	2240      	movs	r2, #64	@ 0x40
 8000946:	4b03      	ldr	r3, [pc, #12]	@ (8000954 <USART2_Send+0x10>)
 8000948:	69d9      	ldr	r1, [r3, #28]
 800094a:	4211      	tst	r1, r2
 800094c:	d0fc      	beq.n	8000948 <USART2_Send+0x4>
	USART2->TDR = chr;
 800094e:	6298      	str	r0, [r3, #40]	@ 0x28
}
 8000950:	4770      	bx	lr
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	40004400 	.word	0x40004400

08000958 <USART2_Send_String>:

void USART2_Send_String (char* str){
 8000958:	b570      	push	{r4, r5, r6, lr}
 800095a:	0005      	movs	r5, r0
	uint8_t i = 0;
 800095c:	2400      	movs	r4, #0
	while(str[i])
 800095e:	5d28      	ldrb	r0, [r5, r4]
 8000960:	2800      	cmp	r0, #0
 8000962:	d100      	bne.n	8000966 <USART2_Send_String+0xe>
	USART2_Send (str[i++]);
}
 8000964:	bd70      	pop	{r4, r5, r6, pc}
	USART2_Send (str[i++]);
 8000966:	3401      	adds	r4, #1
 8000968:	b2e4      	uxtb	r4, r4
 800096a:	f7ff ffeb 	bl	8000944 <USART2_Send>
 800096e:	e7f6      	b.n	800095e <USART2_Send_String+0x6>

08000970 <ShowStartAzimuth>:
	WriteToEEPROM(EEPROM_ADDRESS_START, gradus);
	WriteToEEPROM(EEPROM_ADDRESS_START+sizeof(gradus), man_azimuth);
}

void ShowStartAzimuth ()
{
 8000970:	b510      	push	{r4, lr}
	lcdClrScr();
 8000972:	f7ff fecd 	bl	8000710 <lcdClrScr>
	lcdGoto(LCD_1st_LINE,1);
 8000976:	2101      	movs	r1, #1
 8000978:	0008      	movs	r0, r1
 800097a:	f7ff fee3 	bl	8000744 <lcdGoto>
	lcdPuts("CUR AZIMUTH");
 800097e:	480f      	ldr	r0, [pc, #60]	@ (80009bc <ShowStartAzimuth+0x4c>)
 8000980:	f7ff ff01 	bl	8000786 <lcdPuts>
	lcdGoto(LCD_1st_LINE,13);
 8000984:	210d      	movs	r1, #13
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff fedc 	bl	8000744 <lcdGoto>
  }
}

uint32_t ReadFromEEPROM (uint32_t address)
{
  return (*(__IO uint32_t *)address);
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <ShowStartAzimuth+0x50>)
 800098e:	6818      	ldr	r0, [r3, #0]
	lcdItos(ReadFromEEPROM(EEPROM_ADDRESS_START));
 8000990:	f7ff ff1e 	bl	80007d0 <lcdItos>
	lcdGoto(LCD_2nd_LINE,1);
 8000994:	2101      	movs	r1, #1
 8000996:	2002      	movs	r0, #2
 8000998:	f7ff fed4 	bl	8000744 <lcdGoto>
	lcdPuts("ANT AZIMUTH");
 800099c:	4809      	ldr	r0, [pc, #36]	@ (80009c4 <ShowStartAzimuth+0x54>)
 800099e:	f7ff fef2 	bl	8000786 <lcdPuts>
	lcdGoto(LCD_2nd_LINE,13);
 80009a2:	210d      	movs	r1, #13
 80009a4:	2002      	movs	r0, #2
 80009a6:	f7ff fecd 	bl	8000744 <lcdGoto>
  return (*(__IO uint32_t *)address);
 80009aa:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <ShowStartAzimuth+0x58>)
 80009ac:	6818      	ldr	r0, [r3, #0]
	lcdItos(ReadFromEEPROM(EEPROM_ADDRESS_START+sizeof(gradus)));
 80009ae:	f7ff ff0f 	bl	80007d0 <lcdItos>
	lcdGoto(LCD_2nd_LINE,16);
 80009b2:	2110      	movs	r1, #16
 80009b4:	2002      	movs	r0, #2
 80009b6:	f7ff fec5 	bl	8000744 <lcdGoto>
}
 80009ba:	bd10      	pop	{r4, pc}
 80009bc:	080037c3 	.word	0x080037c3
 80009c0:	08080000 	.word	0x08080000
 80009c4:	080037cf 	.word	0x080037cf
 80009c8:	08080004 	.word	0x08080004

080009cc <CheckADC>:
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009cc:	2001      	movs	r0, #1
{
 80009ce:	b510      	push	{r4, lr}
 80009d0:	4c16      	ldr	r4, [pc, #88]	@ (8000a2c <CheckADC+0x60>)
 80009d2:	4917      	ldr	r1, [pc, #92]	@ (8000a30 <CheckADC+0x64>)
 80009d4:	68a3      	ldr	r3, [r4, #8]
 80009d6:	400b      	ands	r3, r1
 80009d8:	4303      	orrs	r3, r0
 80009da:	60a3      	str	r3, [r4, #8]
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009dc:	2304      	movs	r3, #4
 80009de:	68a2      	ldr	r2, [r4, #8]
 80009e0:	400a      	ands	r2, r1
 80009e2:	4313      	orrs	r3, r2
 80009e4:	60a3      	str	r3, [r4, #8]
    LL_mDelay(1);
 80009e6:	f002 fa1f 	bl	8002e28 <LL_mDelay>
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80009ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    if ((adc_value < 3500)&&(flag_adc == 0)) {
 80009ec:	4a11      	ldr	r2, [pc, #68]	@ (8000a34 <CheckADC+0x68>)
    adc_value = LL_ADC_REG_ReadConversionData12(ADC1);
 80009ee:	4c12      	ldr	r4, [pc, #72]	@ (8000a38 <CheckADC+0x6c>)
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	8023      	strh	r3, [r4, #0]
    if ((adc_value < 3500)&&(flag_adc == 0)) {
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d80c      	bhi.n	8000a12 <CheckADC+0x46>
 80009f8:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <CheckADC+0x70>)
 80009fa:	7819      	ldrb	r1, [r3, #0]
 80009fc:	2900      	cmp	r1, #0
 80009fe:	d114      	bne.n	8000a2a <CheckADC+0x5e>
    	if (flag_eeprom==1){
 8000a00:	4a0f      	ldr	r2, [pc, #60]	@ (8000a40 <CheckADC+0x74>)
 8000a02:	7810      	ldrb	r0, [r2, #0]
 8000a04:	2801      	cmp	r0, #1
 8000a06:	d100      	bne.n	8000a0a <CheckADC+0x3e>
    		flag_eeprom=0;
 8000a08:	7011      	strb	r1, [r2, #0]
    	flag_adc = 1;
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
    	ShowWarning();
 8000a0e:	f7ff ff39 	bl	8000884 <ShowWarning>
    if ((adc_value > 3500)&&(flag_adc == 1)) {
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <CheckADC+0x78>)
 8000a14:	8822      	ldrh	r2, [r4, #0]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d907      	bls.n	8000a2a <CheckADC+0x5e>
 8000a1a:	4c08      	ldr	r4, [pc, #32]	@ (8000a3c <CheckADC+0x70>)
 8000a1c:	7823      	ldrb	r3, [r4, #0]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d103      	bne.n	8000a2a <CheckADC+0x5e>
    	ShowStartAzimuth();
 8000a22:	f7ff ffa5 	bl	8000970 <ShowStartAzimuth>
    	flag_adc = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	7023      	strb	r3, [r4, #0]
}
 8000a2a:	bd10      	pop	{r4, pc}
 8000a2c:	40012400 	.word	0x40012400
 8000a30:	7fffffe8 	.word	0x7fffffe8
 8000a34:	00000dab 	.word	0x00000dab
 8000a38:	20000106 	.word	0x20000106
 8000a3c:	20000105 	.word	0x20000105
 8000a40:	20000104 	.word	0x20000104
 8000a44:	00000dac 	.word	0x00000dac

08000a48 <ReadCWButton>:
	if (HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin) == GPIO_PIN_RESET
 8000a48:	2180      	movs	r1, #128	@ 0x80
void ReadCWButton() {
 8000a4a:	b570      	push	{r4, r5, r6, lr}
	if (HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin) == GPIO_PIN_RESET
 8000a4c:	4820      	ldr	r0, [pc, #128]	@ (8000ad0 <ReadCWButton+0x88>)
 8000a4e:	01c9      	lsls	r1, r1, #7
 8000a50:	f001 f952 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000a54:	4d1f      	ldr	r5, [pc, #124]	@ (8000ad4 <ReadCWButton+0x8c>)
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d132      	bne.n	8000ac0 <ReadCWButton+0x78>
			&& flag_key1_press) {
 8000a5a:	782b      	ldrb	r3, [r5, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d107      	bne.n	8000a70 <ReadCWButton+0x28>
	if (!flag_key1_press && (HAL_GetTick() - time_key1_press) > 200) {
 8000a60:	f000 ff4e 	bl	8001900 <HAL_GetTick>
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <ReadCWButton+0x90>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	1ac0      	subs	r0, r0, r3
 8000a6a:	28c8      	cmp	r0, #200	@ 0xc8
 8000a6c:	d82c      	bhi.n	8000ac8 <ReadCWButton+0x80>
}
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
		if (man_azimuth==(360-step)) man_azimuth=0;
 8000a70:	2368      	movs	r3, #104	@ 0x68
 8000a72:	4c1a      	ldr	r4, [pc, #104]	@ (8000adc <ReadCWButton+0x94>)
 8000a74:	33ff      	adds	r3, #255	@ 0xff
 8000a76:	6822      	ldr	r2, [r4, #0]
		flag_key1_press = 0;
 8000a78:	7028      	strb	r0, [r5, #0]
		if (man_azimuth==(360-step)) man_azimuth=0;
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d100      	bne.n	8000a80 <ReadCWButton+0x38>
 8000a7e:	6020      	str	r0, [r4, #0]
		isPushCW = 1;
 8000a80:	2201      	movs	r2, #1
		man_azimuth=man_azimuth+step;
 8000a82:	6823      	ldr	r3, [r4, #0]
		lcdGoto(LCD_2nd_LINE,13);
 8000a84:	210d      	movs	r1, #13
		man_azimuth=man_azimuth+step;
 8000a86:	3301      	adds	r3, #1
 8000a88:	6023      	str	r3, [r4, #0]
		isPushCW = 1;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <ReadCWButton+0x98>)
		lcdGoto(LCD_2nd_LINE,13);
 8000a8c:	2002      	movs	r0, #2
		isPushCW = 1;
 8000a8e:	701a      	strb	r2, [r3, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000a90:	23a0      	movs	r3, #160	@ 0xa0
 8000a92:	323f      	adds	r2, #63	@ 0x3f
 8000a94:	05db      	lsls	r3, r3, #23
 8000a96:	629a      	str	r2, [r3, #40]	@ 0x28
		lcdGoto(LCD_2nd_LINE,13);
 8000a98:	f7ff fe54 	bl	8000744 <lcdGoto>
		lcdPuts("   ");
 8000a9c:	4811      	ldr	r0, [pc, #68]	@ (8000ae4 <ReadCWButton+0x9c>)
 8000a9e:	f7ff fe72 	bl	8000786 <lcdPuts>
		lcdGoto(LCD_2nd_LINE,13);
 8000aa2:	210d      	movs	r1, #13
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f7ff fe4d 	bl	8000744 <lcdGoto>
	    lcdItos(man_azimuth);
 8000aaa:	6820      	ldr	r0, [r4, #0]
 8000aac:	f7ff fe90 	bl	80007d0 <lcdItos>
	    lcdGoto(LCD_2nd_LINE,16);
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	f7ff fe46 	bl	8000744 <lcdGoto>
		time_key1_press = HAL_GetTick();
 8000ab8:	f000 ff22 	bl	8001900 <HAL_GetTick>
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <ReadCWButton+0x90>)
 8000abe:	6018      	str	r0, [r3, #0]
	if (!flag_key1_press && (HAL_GetTick() - time_key1_press) > 200) {
 8000ac0:	782b      	ldrb	r3, [r5, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1d3      	bne.n	8000a6e <ReadCWButton+0x26>
 8000ac6:	e7cb      	b.n	8000a60 <ReadCWButton+0x18>
		flag_key1_press = 1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	702b      	strb	r3, [r5, #0]
}
 8000acc:	e7cf      	b.n	8000a6e <ReadCWButton+0x26>
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	50000800 	.word	0x50000800
 8000ad4:	20000002 	.word	0x20000002
 8000ad8:	20000110 	.word	0x20000110
 8000adc:	200000f0 	.word	0x200000f0
 8000ae0:	200000f4 	.word	0x200000f4
 8000ae4:	080037db 	.word	0x080037db

08000ae8 <ReadCCWButton>:
	if (HAL_GPIO_ReadPin(BTN_DWN_GPIO_Port, BTN_DWN_Pin) == GPIO_PIN_RESET
 8000ae8:	2180      	movs	r1, #128	@ 0x80
void ReadCCWButton() {
 8000aea:	b570      	push	{r4, r5, r6, lr}
	if (HAL_GPIO_ReadPin(BTN_DWN_GPIO_Port, BTN_DWN_Pin) == GPIO_PIN_RESET
 8000aec:	4820      	ldr	r0, [pc, #128]	@ (8000b70 <ReadCCWButton+0x88>)
 8000aee:	0209      	lsls	r1, r1, #8
 8000af0:	f001 f902 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000af4:	4d1f      	ldr	r5, [pc, #124]	@ (8000b74 <ReadCCWButton+0x8c>)
 8000af6:	2800      	cmp	r0, #0
 8000af8:	d132      	bne.n	8000b60 <ReadCCWButton+0x78>
			&& flag_key2_press) {
 8000afa:	782b      	ldrb	r3, [r5, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d107      	bne.n	8000b10 <ReadCCWButton+0x28>
	if (!flag_key2_press && (HAL_GetTick() - time_key2_press) > 200) {
 8000b00:	f000 fefe 	bl	8001900 <HAL_GetTick>
 8000b04:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <ReadCCWButton+0x90>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	1ac0      	subs	r0, r0, r3
 8000b0a:	28c8      	cmp	r0, #200	@ 0xc8
 8000b0c:	d82c      	bhi.n	8000b68 <ReadCCWButton+0x80>
}
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
		if (man_azimuth==0) man_azimuth=360-step;
 8000b10:	4c1a      	ldr	r4, [pc, #104]	@ (8000b7c <ReadCCWButton+0x94>)
		flag_key2_press = 0;
 8000b12:	7028      	strb	r0, [r5, #0]
		if (man_azimuth==0) man_azimuth=360-step;
 8000b14:	6823      	ldr	r3, [r4, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <ReadCCWButton+0x38>
 8000b1a:	2368      	movs	r3, #104	@ 0x68
 8000b1c:	33ff      	adds	r3, #255	@ 0xff
 8000b1e:	6023      	str	r3, [r4, #0]
		isPushCW = 0;
 8000b20:	2200      	movs	r2, #0
		man_azimuth=man_azimuth-step;
 8000b22:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b24:	2602      	movs	r6, #2
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6023      	str	r3, [r4, #0]
		isPushCW = 0;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <ReadCCWButton+0x98>)
		lcdGoto(LCD_2nd_LINE,13);
 8000b2c:	210d      	movs	r1, #13
		isPushCW = 0;
 8000b2e:	701a      	strb	r2, [r3, #0]
 8000b30:	23a0      	movs	r3, #160	@ 0xa0
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	619e      	str	r6, [r3, #24]
		lcdGoto(LCD_2nd_LINE,13);
 8000b36:	0030      	movs	r0, r6
 8000b38:	f7ff fe04 	bl	8000744 <lcdGoto>
		lcdPuts("   ");
 8000b3c:	4811      	ldr	r0, [pc, #68]	@ (8000b84 <ReadCCWButton+0x9c>)
 8000b3e:	f7ff fe22 	bl	8000786 <lcdPuts>
		lcdGoto(LCD_2nd_LINE,13);
 8000b42:	210d      	movs	r1, #13
 8000b44:	0030      	movs	r0, r6
 8000b46:	f7ff fdfd 	bl	8000744 <lcdGoto>
	    lcdItos(man_azimuth);
 8000b4a:	6820      	ldr	r0, [r4, #0]
 8000b4c:	f7ff fe40 	bl	80007d0 <lcdItos>
	    lcdGoto(LCD_2nd_LINE,16);
 8000b50:	2110      	movs	r1, #16
 8000b52:	0030      	movs	r0, r6
 8000b54:	f7ff fdf6 	bl	8000744 <lcdGoto>
		time_key2_press = HAL_GetTick();
 8000b58:	f000 fed2 	bl	8001900 <HAL_GetTick>
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <ReadCCWButton+0x90>)
 8000b5e:	6018      	str	r0, [r3, #0]
	if (!flag_key2_press && (HAL_GetTick() - time_key2_press) > 200) {
 8000b60:	782b      	ldrb	r3, [r5, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1d3      	bne.n	8000b0e <ReadCCWButton+0x26>
 8000b66:	e7cb      	b.n	8000b00 <ReadCCWButton+0x18>
		flag_key2_press = 1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	702b      	strb	r3, [r5, #0]
}
 8000b6c:	e7cf      	b.n	8000b0e <ReadCCWButton+0x26>
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	50000800 	.word	0x50000800
 8000b74:	20000001 	.word	0x20000001
 8000b78:	2000010c 	.word	0x2000010c
 8000b7c:	200000f0 	.word	0x200000f0
 8000b80:	200000f4 	.word	0x200000f4
 8000b84:	080037db 	.word	0x080037db

08000b88 <WriteToEEPROM>:
{
 8000b88:	b570      	push	{r4, r5, r6, lr}
 8000b8a:	0004      	movs	r4, r0
 8000b8c:	000d      	movs	r5, r1
    flash_ok = HAL_FLASHEx_DATAEEPROM_Unlock();
 8000b8e:	f000 ffa3 	bl	8001ad8 <HAL_FLASHEx_DATAEEPROM_Unlock>
  while (flash_ok != HAL_OK)
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d1fb      	bne.n	8000b8e <WriteToEEPROM+0x6>
    flash_ok = HAL_FLASHEx_DATAEEPROM_Erase (address);
 8000b96:	0020      	movs	r0, r4
 8000b98:	f000 ffc0 	bl	8001b1c <HAL_FLASHEx_DATAEEPROM_Erase>
  while (flash_ok != HAL_OK)
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d1fa      	bne.n	8000b96 <WriteToEEPROM+0xe>
    flash_ok = HAL_FLASHEx_DATAEEPROM_Program (FLASH_TYPEPROGRAMDATA_WORD, address, value);
 8000ba0:	002a      	movs	r2, r5
 8000ba2:	0021      	movs	r1, r4
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f000 ffcb 	bl	8001b40 <HAL_FLASHEx_DATAEEPROM_Program>
  while (flash_ok != HAL_OK)
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d1f8      	bne.n	8000ba0 <WriteToEEPROM+0x18>
    flash_ok = HAL_FLASHEx_DATAEEPROM_Lock ();
 8000bae:	f000 ffab 	bl	8001b08 <HAL_FLASHEx_DATAEEPROM_Lock>
  while (flash_ok != HAL_OK)
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d1fb      	bne.n	8000bae <WriteToEEPROM+0x26>
}
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}

08000bb8 <SetDefault>:
void SetDefault(){
 8000bb8:	b510      	push	{r4, lr}
		LL_mDelay(300);
 8000bba:	2496      	movs	r4, #150	@ 0x96
 8000bbc:	0064      	lsls	r4, r4, #1
	while (HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_START_Pin) == GPIO_PIN_RESET){
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <SetDefault+0x50>)
 8000bc2:	f001 f899 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	d00c      	beq.n	8000be4 <SetDefault+0x2c>
	gradus = man_azimuth = 0;
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4c0f      	ldr	r4, [pc, #60]	@ (8000c0c <SetDefault+0x54>)
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <SetDefault+0x58>)
	WriteToEEPROM(EEPROM_ADDRESS_START, gradus);
 8000bd0:	4810      	ldr	r0, [pc, #64]	@ (8000c14 <SetDefault+0x5c>)
	gradus = man_azimuth = 0;
 8000bd2:	6019      	str	r1, [r3, #0]
 8000bd4:	6021      	str	r1, [r4, #0]
	WriteToEEPROM(EEPROM_ADDRESS_START, gradus);
 8000bd6:	f7ff ffd7 	bl	8000b88 <WriteToEEPROM>
    WriteToEEPROM(EEPROM_ADDRESS_START+sizeof(gradus), man_azimuth);
 8000bda:	6821      	ldr	r1, [r4, #0]
 8000bdc:	480e      	ldr	r0, [pc, #56]	@ (8000c18 <SetDefault+0x60>)
 8000bde:	f7ff ffd3 	bl	8000b88 <WriteToEEPROM>
}
 8000be2:	bd10      	pop	{r4, pc}
		lcdClrScr();
 8000be4:	f7ff fd94 	bl	8000710 <lcdClrScr>
		lcdGoto(LCD_1st_LINE, 3);
 8000be8:	2103      	movs	r1, #3
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff fdaa 	bl	8000744 <lcdGoto>
		lcdPuts("GO TO ZERO");
 8000bf0:	480a      	ldr	r0, [pc, #40]	@ (8000c1c <SetDefault+0x64>)
 8000bf2:	f7ff fdc8 	bl	8000786 <lcdPuts>
		lcdGoto(LCD_2nd_LINE, 16);
 8000bf6:	2110      	movs	r1, #16
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f7ff fda3 	bl	8000744 <lcdGoto>
		LL_mDelay(300);
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f002 f912 	bl	8002e28 <LL_mDelay>
 8000c04:	e7db      	b.n	8000bbe <SetDefault+0x6>
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	50000400 	.word	0x50000400
 8000c0c:	200000f0 	.word	0x200000f0
 8000c10:	200000fc 	.word	0x200000fc
 8000c14:	08080000 	.word	0x08080000
 8000c18:	08080004 	.word	0x08080004
 8000c1c:	080037df 	.word	0x080037df

08000c20 <SaveSettings>:
{
 8000c20:	b510      	push	{r4, lr}
	WriteToEEPROM(EEPROM_ADDRESS_START, gradus);
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <SaveSettings+0x18>)
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <SaveSettings+0x1c>)
 8000c26:	6819      	ldr	r1, [r3, #0]
 8000c28:	f7ff ffae 	bl	8000b88 <WriteToEEPROM>
	WriteToEEPROM(EEPROM_ADDRESS_START+sizeof(gradus), man_azimuth);
 8000c2c:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <SaveSettings+0x20>)
 8000c2e:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <SaveSettings+0x24>)
 8000c30:	6819      	ldr	r1, [r3, #0]
 8000c32:	f7ff ffa9 	bl	8000b88 <WriteToEEPROM>
}
 8000c36:	bd10      	pop	{r4, pc}
 8000c38:	200000fc 	.word	0x200000fc
 8000c3c:	08080000 	.word	0x08080000
 8000c40:	200000f0 	.word	0x200000f0
 8000c44:	08080004 	.word	0x08080004

08000c48 <RotateFromUSART>:
 {
 8000c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	man_azimuth = grad;
 8000c4a:	4f62      	ldr	r7, [pc, #392]	@ (8000dd4 <RotateFromUSART+0x18c>)
 8000c4c:	6038      	str	r0, [r7, #0]
	if (man_azimuth >= 180) dir_azimuth = man_azimuth - 360; else dir_azimuth = man_azimuth;
 8000c4e:	28b3      	cmp	r0, #179	@ 0xb3
 8000c50:	d901      	bls.n	8000c56 <RotateFromUSART+0xe>
 8000c52:	3869      	subs	r0, #105	@ 0x69
 8000c54:	38ff      	subs	r0, #255	@ 0xff
    if (gradus >= 180) dir_gradus = gradus - 360; else dir_gradus = gradus;
 8000c56:	4c60      	ldr	r4, [pc, #384]	@ (8000dd8 <RotateFromUSART+0x190>)
 8000c58:	4d60      	ldr	r5, [pc, #384]	@ (8000ddc <RotateFromUSART+0x194>)
 8000c5a:	6823      	ldr	r3, [r4, #0]
 8000c5c:	6028      	str	r0, [r5, #0]
 8000c5e:	2bb3      	cmp	r3, #179	@ 0xb3
 8000c60:	d901      	bls.n	8000c66 <RotateFromUSART+0x1e>
 8000c62:	3b69      	subs	r3, #105	@ 0x69
 8000c64:	3bff      	subs	r3, #255	@ 0xff
 8000c66:	4e5e      	ldr	r6, [pc, #376]	@ (8000de0 <RotateFromUSART+0x198>)
    lcdGoto(LCD_2nd_LINE,13);
 8000c68:	210d      	movs	r1, #13
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	6033      	str	r3, [r6, #0]
 8000c6e:	f7ff fd69 	bl	8000744 <lcdGoto>
    lcdPuts("   ");
 8000c72:	4b5c      	ldr	r3, [pc, #368]	@ (8000de4 <RotateFromUSART+0x19c>)
 8000c74:	0018      	movs	r0, r3
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	f7ff fd85 	bl	8000786 <lcdPuts>
    lcdGoto(LCD_2nd_LINE,13);
 8000c7c:	210d      	movs	r1, #13
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f7ff fd60 	bl	8000744 <lcdGoto>
    lcdItos(man_azimuth);
 8000c84:	6838      	ldr	r0, [r7, #0]
 8000c86:	f7ff fda3 	bl	80007d0 <lcdItos>
    lcdGoto(LCD_2nd_LINE,16);
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f7ff fd59 	bl	8000744 <lcdGoto>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000c92:	2380      	movs	r3, #128	@ 0x80
 8000c94:	2202      	movs	r2, #2
 8000c96:	05db      	lsls	r3, r3, #23
 8000c98:	4252      	negs	r2, r2
 8000c9a:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000c9c:	6819      	ldr	r1, [r3, #0]
 8000c9e:	3203      	adds	r2, #3
 8000ca0:	4311      	orrs	r1, r2
 8000ca2:	6019      	str	r1, [r3, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000ca4:	68d9      	ldr	r1, [r3, #12]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	60da      	str	r2, [r3, #12]
	if (dir_azimuth > dir_gradus) {
 8000caa:	682a      	ldr	r2, [r5, #0]
 8000cac:	6833      	ldr	r3, [r6, #0]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dd58      	ble.n	8000d64 <RotateFromUSART+0x11c>
		time_on_cw = HAL_GetTick();
 8000cb2:	f000 fe25 	bl	8001900 <HAL_GetTick>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000cb6:	27a0      	movs	r7, #160	@ 0xa0
 8000cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8000de8 <RotateFromUSART+0x1a0>)
 8000cba:	05ff      	lsls	r7, r7, #23
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	6018      	str	r0, [r3, #0]
		while (dir_gradus < dir_azimuth) {
 8000cc0:	6832      	ldr	r2, [r6, #0]
 8000cc2:	682b      	ldr	r3, [r5, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	da26      	bge.n	8000d16 <RotateFromUSART+0xce>
			lcdGoto(LCD_1st_LINE, 13);
 8000cc8:	210d      	movs	r1, #13
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f7ff fd3a 	bl	8000744 <lcdGoto>
			lcdPuts("   ");
 8000cd0:	9800      	ldr	r0, [sp, #0]
 8000cd2:	f7ff fd58 	bl	8000786 <lcdPuts>
			lcdGoto(LCD_1st_LINE, 13);
 8000cd6:	210d      	movs	r1, #13
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fd33 	bl	8000744 <lcdGoto>
			lcdItos(gradus);
 8000cde:	6820      	ldr	r0, [r4, #0]
 8000ce0:	f7ff fd76 	bl	80007d0 <lcdItos>
			lcdGoto(LCD_1st_LINE, 16);
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff fd2c 	bl	8000744 <lcdGoto>
 8000cec:	2302      	movs	r3, #2
 8000cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000cf0:	333e      	adds	r3, #62	@ 0x3e
 8000cf2:	61bb      	str	r3, [r7, #24]
			LL_mDelay(50);
 8000cf4:	2032      	movs	r0, #50	@ 0x32
 8000cf6:	f002 f897 	bl	8002e28 <LL_mDelay>
			if ((HAL_GetTick() - time_on_cw) > 10000)
 8000cfa:	f000 fe01 	bl	8001900 <HAL_GetTick>
 8000cfe:	9b01      	ldr	r3, [sp, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	1ac0      	subs	r0, r0, r3
 8000d04:	4b39      	ldr	r3, [pc, #228]	@ (8000dec <RotateFromUSART+0x1a4>)
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d805      	bhi.n	8000d16 <RotateFromUSART+0xce>
			if (flag_stop==1) {flag_stop =0; break;}
 8000d0a:	4b39      	ldr	r3, [pc, #228]	@ (8000df0 <RotateFromUSART+0x1a8>)
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	2a01      	cmp	r2, #1
 8000d10:	d1d6      	bne.n	8000cc0 <RotateFromUSART+0x78>
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	23a0      	movs	r3, #160	@ 0xa0
 8000d18:	2202      	movs	r2, #2
 8000d1a:	05db      	lsls	r3, r3, #23
 8000d1c:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000d1e:	323e      	adds	r2, #62	@ 0x3e
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000d22:	2380      	movs	r3, #128	@ 0x80
 8000d24:	2101      	movs	r1, #1
 8000d26:	05db      	lsls	r3, r3, #23
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	438a      	bics	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	438a      	bics	r2, r1
 8000d32:	60da      	str	r2, [r3, #12]
	SaveSettings();
 8000d34:	f7ff ff74 	bl	8000c20 <SaveSettings>
	lcdGoto(LCD_1st_LINE, 13);
 8000d38:	210d      	movs	r1, #13
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f7ff fd02 	bl	8000744 <lcdGoto>
	lcdPuts("   ");
 8000d40:	9800      	ldr	r0, [sp, #0]
 8000d42:	f7ff fd20 	bl	8000786 <lcdPuts>
	lcdGoto(LCD_1st_LINE, 13);
 8000d46:	210d      	movs	r1, #13
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f7ff fcfb 	bl	8000744 <lcdGoto>
	lcdItos(gradus);
 8000d4e:	6820      	ldr	r0, [r4, #0]
 8000d50:	f7ff fd3e 	bl	80007d0 <lcdItos>
	lcdGoto(LCD_1st_LINE, 16);
 8000d54:	2110      	movs	r1, #16
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff fcf4 	bl	8000744 <lcdGoto>
	ConvertGradusToChar(gradus);
 8000d5c:	6820      	ldr	r0, [r4, #0]
 8000d5e:	f7ff fdc3 	bl	80008e8 <ConvertGradusToChar>
}
 8000d62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		time_on_ccw = HAL_GetTick();
 8000d64:	f000 fdcc 	bl	8001900 <HAL_GetTick>
 8000d68:	27a0      	movs	r7, #160	@ 0xa0
 8000d6a:	4b22      	ldr	r3, [pc, #136]	@ (8000df4 <RotateFromUSART+0x1ac>)
 8000d6c:	05ff      	lsls	r7, r7, #23
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	6018      	str	r0, [r3, #0]
		while (dir_gradus > dir_azimuth) {
 8000d72:	6832      	ldr	r2, [r6, #0]
 8000d74:	682b      	ldr	r3, [r5, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	dd26      	ble.n	8000dc8 <RotateFromUSART+0x180>
			lcdGoto(LCD_1st_LINE, 13);
 8000d7a:	210d      	movs	r1, #13
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff fce1 	bl	8000744 <lcdGoto>
			lcdPuts("   ");
 8000d82:	9800      	ldr	r0, [sp, #0]
 8000d84:	f7ff fcff 	bl	8000786 <lcdPuts>
			lcdGoto(LCD_1st_LINE, 13);
 8000d88:	210d      	movs	r1, #13
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff fcda 	bl	8000744 <lcdGoto>
			lcdItos(gradus);
 8000d90:	6820      	ldr	r0, [r4, #0]
 8000d92:	f7ff fd1d 	bl	80007d0 <lcdItos>
			lcdGoto(LCD_1st_LINE, 16);
 8000d96:	2110      	movs	r1, #16
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f7ff fcd3 	bl	8000744 <lcdGoto>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000da2:	337e      	adds	r3, #126	@ 0x7e
 8000da4:	61bb      	str	r3, [r7, #24]
			LL_mDelay(50);
 8000da6:	2032      	movs	r0, #50	@ 0x32
 8000da8:	f002 f83e 	bl	8002e28 <LL_mDelay>
			if ((HAL_GetTick() - time_on_ccw) > 10000)
 8000dac:	f000 fda8 	bl	8001900 <HAL_GetTick>
 8000db0:	9b01      	ldr	r3, [sp, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	1ac0      	subs	r0, r0, r3
 8000db6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <RotateFromUSART+0x1a4>)
 8000db8:	4298      	cmp	r0, r3
 8000dba:	d805      	bhi.n	8000dc8 <RotateFromUSART+0x180>
			if (flag_stop==1) {flag_stop =0; break;}
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <RotateFromUSART+0x1a8>)
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	2a01      	cmp	r2, #1
 8000dc2:	d1d6      	bne.n	8000d72 <RotateFromUSART+0x12a>
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	23a0      	movs	r3, #160	@ 0xa0
 8000dca:	2202      	movs	r2, #2
 8000dcc:	05db      	lsls	r3, r3, #23
 8000dce:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000dd0:	327e      	adds	r2, #126	@ 0x7e
 8000dd2:	e7a5      	b.n	8000d20 <RotateFromUSART+0xd8>
 8000dd4:	200000f0 	.word	0x200000f0
 8000dd8:	200000fc 	.word	0x200000fc
 8000ddc:	200000ec 	.word	0x200000ec
 8000de0:	200000f8 	.word	0x200000f8
 8000de4:	080037db 	.word	0x080037db
 8000de8:	200000e8 	.word	0x200000e8
 8000dec:	00002710 	.word	0x00002710
 8000df0:	200000ce 	.word	0x200000ce
 8000df4:	200000e4 	.word	0x200000e4

08000df8 <CheckUSART>:
{
 8000df8:	b510      	push	{r4, lr}
	if (flag_status == 1)
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <CheckUSART+0x40>)
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	2a01      	cmp	r2, #1
 8000e00:	d10f      	bne.n	8000e22 <CheckUSART+0x2a>
		flag_status=0;
 8000e02:	2400      	movs	r4, #0
 8000e04:	701c      	strb	r4, [r3, #0]
		ConvertGradusToChar(gradus);
 8000e06:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <CheckUSART+0x44>)
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	f7ff fd6d 	bl	80008e8 <ConvertGradusToChar>
		str_rx[0]=0;
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <CheckUSART+0x48>)
		USART2_Send_String(str_tx);
 8000e10:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <CheckUSART+0x4c>)
		str_rx[0]=0;
 8000e12:	701c      	strb	r4, [r3, #0]
		str_rx[1]=0;
 8000e14:	705c      	strb	r4, [r3, #1]
		str_rx[2]=0;
 8000e16:	709c      	strb	r4, [r3, #2]
		str_rx[3]=0;
 8000e18:	70dc      	strb	r4, [r3, #3]
		str_rx[4]=0;
 8000e1a:	711c      	strb	r4, [r3, #4]
		str_rx[5]=0;
 8000e1c:	715c      	strb	r4, [r3, #5]
		USART2_Send_String(str_tx);
 8000e1e:	f7ff fd9b 	bl	8000958 <USART2_Send_String>
	if (flag_move == 1)
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <CheckUSART+0x50>)
 8000e24:	781a      	ldrb	r2, [r3, #0]
 8000e26:	2a01      	cmp	r2, #1
 8000e28:	d105      	bne.n	8000e36 <CheckUSART+0x3e>
		flag_move = 0;
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
		RotateFromUSART(ConvertCharToGradus());
 8000e2e:	f7ff fd3b 	bl	80008a8 <ConvertCharToGradus>
 8000e32:	f7ff ff09 	bl	8000c48 <RotateFromUSART>
}
 8000e36:	bd10      	pop	{r4, pc}
 8000e38:	200000cd 	.word	0x200000cd
 8000e3c:	200000fc 	.word	0x200000fc
 8000e40:	200000d9 	.word	0x200000d9
 8000e44:	200000cf 	.word	0x200000cf
 8000e48:	200000cc 	.word	0x200000cc

08000e4c <ReadStartButton>:
void ReadStartButton() {
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_START_Pin) == GPIO_PIN_RESET
 8000e4e:	2102      	movs	r1, #2
void ReadStartButton() {
 8000e50:	b085      	sub	sp, #20
	if (HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_START_Pin) == GPIO_PIN_RESET
 8000e52:	485e      	ldr	r0, [pc, #376]	@ (8000fcc <ReadStartButton+0x180>)
 8000e54:	f000 ff50 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000e58:	4b5d      	ldr	r3, [pc, #372]	@ (8000fd0 <ReadStartButton+0x184>)
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	d000      	beq.n	8000e62 <ReadStartButton+0x16>
 8000e60:	e079      	b.n	8000f56 <ReadStartButton+0x10a>
			&& flag_key3_press) {
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d109      	bne.n	8000e7c <ReadStartButton+0x30>
	if (!flag_key3_press && (HAL_GetTick() - time_key3_press) > 200) {
 8000e68:	f000 fd4a 	bl	8001900 <HAL_GetTick>
 8000e6c:	4b59      	ldr	r3, [pc, #356]	@ (8000fd4 <ReadStartButton+0x188>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	1ac0      	subs	r0, r0, r3
 8000e72:	28c8      	cmp	r0, #200	@ 0xc8
 8000e74:	d900      	bls.n	8000e78 <ReadStartButton+0x2c>
 8000e76:	e0a5      	b.n	8000fc4 <ReadStartButton+0x178>
}
 8000e78:	b005      	add	sp, #20
 8000e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flag_key3_press = 0;
 8000e7c:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000e7e:	2202      	movs	r2, #2
 8000e80:	7018      	strb	r0, [r3, #0]
 8000e82:	2380      	movs	r3, #128	@ 0x80
 8000e84:	4252      	negs	r2, r2
 8000e86:	05db      	lsls	r3, r3, #23
 8000e88:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000e8a:	6819      	ldr	r1, [r3, #0]
 8000e8c:	3203      	adds	r2, #3
 8000e8e:	4311      	orrs	r1, r2
 8000e90:	6019      	str	r1, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000e92:	68d9      	ldr	r1, [r3, #12]
		if (dir_azimuth > dir_gradus) {
 8000e94:	4d50      	ldr	r5, [pc, #320]	@ (8000fd8 <ReadStartButton+0x18c>)
 8000e96:	430a      	orrs	r2, r1
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	4b50      	ldr	r3, [pc, #320]	@ (8000fdc <ReadStartButton+0x190>)
 8000e9c:	4950      	ldr	r1, [pc, #320]	@ (8000fe0 <ReadStartButton+0x194>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	682b      	ldr	r3, [r5, #0]
 8000ea4:	4c4f      	ldr	r4, [pc, #316]	@ (8000fe4 <ReadStartButton+0x198>)
 8000ea6:	9103      	str	r1, [sp, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dd5a      	ble.n	8000f62 <ReadStartButton+0x116>
			time_on_cw = HAL_GetTick();
 8000eac:	f000 fd28 	bl	8001900 <HAL_GetTick>
 8000eb0:	27a0      	movs	r7, #160	@ 0xa0
 8000eb2:	4e4d      	ldr	r6, [pc, #308]	@ (8000fe8 <ReadStartButton+0x19c>)
 8000eb4:	05ff      	lsls	r7, r7, #23
 8000eb6:	6030      	str	r0, [r6, #0]
			while (dir_gradus < dir_azimuth) {
 8000eb8:	9b02      	ldr	r3, [sp, #8]
 8000eba:	682a      	ldr	r2, [r5, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	da1f      	bge.n	8000f02 <ReadStartButton+0xb6>
				lcdGoto(LCD_1st_LINE, 13);
 8000ec2:	210d      	movs	r1, #13
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f7ff fc3d 	bl	8000744 <lcdGoto>
				lcdPuts("   ");
 8000eca:	9803      	ldr	r0, [sp, #12]
 8000ecc:	f7ff fc5b 	bl	8000786 <lcdPuts>
				lcdGoto(LCD_1st_LINE, 13);
 8000ed0:	210d      	movs	r1, #13
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f7ff fc36 	bl	8000744 <lcdGoto>
				lcdItos(gradus);
 8000ed8:	6820      	ldr	r0, [r4, #0]
 8000eda:	f7ff fc79 	bl	80007d0 <lcdItos>
				lcdGoto(LCD_1st_LINE, 16);
 8000ede:	2110      	movs	r1, #16
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f7ff fc2f 	bl	8000744 <lcdGoto>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000eea:	333e      	adds	r3, #62	@ 0x3e
 8000eec:	61bb      	str	r3, [r7, #24]
				LL_mDelay(50);
 8000eee:	2032      	movs	r0, #50	@ 0x32
 8000ef0:	f001 ff9a 	bl	8002e28 <LL_mDelay>
				if ((HAL_GetTick() - time_on_cw) > 10000)
 8000ef4:	f000 fd04 	bl	8001900 <HAL_GetTick>
 8000ef8:	6833      	ldr	r3, [r6, #0]
 8000efa:	1ac0      	subs	r0, r0, r3
 8000efc:	4b3b      	ldr	r3, [pc, #236]	@ (8000fec <ReadStartButton+0x1a0>)
 8000efe:	4298      	cmp	r0, r3
 8000f00:	d9da      	bls.n	8000eb8 <ReadStartButton+0x6c>
 8000f02:	23a0      	movs	r3, #160	@ 0xa0
 8000f04:	2202      	movs	r2, #2
 8000f06:	05db      	lsls	r3, r3, #23
 8000f08:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f0a:	323e      	adds	r2, #62	@ 0x3e
 8000f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f0e:	2380      	movs	r3, #128	@ 0x80
 8000f10:	2101      	movs	r1, #1
 8000f12:	05db      	lsls	r3, r3, #23
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	438a      	bics	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	438a      	bics	r2, r1
 8000f1e:	60da      	str	r2, [r3, #12]
		SaveSettings();
 8000f20:	f7ff fe7e 	bl	8000c20 <SaveSettings>
		lcdGoto(LCD_1st_LINE, 13);
 8000f24:	210d      	movs	r1, #13
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff fc0c 	bl	8000744 <lcdGoto>
		lcdPuts("   ");
 8000f2c:	9803      	ldr	r0, [sp, #12]
 8000f2e:	f7ff fc2a 	bl	8000786 <lcdPuts>
		lcdGoto(LCD_1st_LINE, 13);
 8000f32:	210d      	movs	r1, #13
 8000f34:	2001      	movs	r0, #1
 8000f36:	f7ff fc05 	bl	8000744 <lcdGoto>
		lcdItos(gradus);
 8000f3a:	6820      	ldr	r0, [r4, #0]
 8000f3c:	f7ff fc48 	bl	80007d0 <lcdItos>
		lcdGoto(LCD_1st_LINE, 16);
 8000f40:	2110      	movs	r1, #16
 8000f42:	2001      	movs	r0, #1
 8000f44:	f7ff fbfe 	bl	8000744 <lcdGoto>
		ConvertGradusToChar(gradus);
 8000f48:	6820      	ldr	r0, [r4, #0]
 8000f4a:	f7ff fccd 	bl	80008e8 <ConvertGradusToChar>
		time_key3_press = HAL_GetTick();
 8000f4e:	f000 fcd7 	bl	8001900 <HAL_GetTick>
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <ReadStartButton+0x188>)
 8000f54:	6018      	str	r0, [r3, #0]
	if (!flag_key3_press && (HAL_GetTick() - time_key3_press) > 200) {
 8000f56:	9b01      	ldr	r3, [sp, #4]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d000      	beq.n	8000f60 <ReadStartButton+0x114>
 8000f5e:	e78b      	b.n	8000e78 <ReadStartButton+0x2c>
 8000f60:	e782      	b.n	8000e68 <ReadStartButton+0x1c>
			time_on_ccw = HAL_GetTick();
 8000f62:	f000 fccd 	bl	8001900 <HAL_GetTick>
 8000f66:	27a0      	movs	r7, #160	@ 0xa0
 8000f68:	4e21      	ldr	r6, [pc, #132]	@ (8000ff0 <ReadStartButton+0x1a4>)
 8000f6a:	05ff      	lsls	r7, r7, #23
 8000f6c:	6030      	str	r0, [r6, #0]
			while (dir_gradus > dir_azimuth) {
 8000f6e:	9b02      	ldr	r3, [sp, #8]
 8000f70:	682a      	ldr	r2, [r5, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dd1f      	ble.n	8000fb8 <ReadStartButton+0x16c>
				lcdGoto(LCD_1st_LINE, 13);
 8000f78:	210d      	movs	r1, #13
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff fbe2 	bl	8000744 <lcdGoto>
				lcdPuts("   ");
 8000f80:	9803      	ldr	r0, [sp, #12]
 8000f82:	f7ff fc00 	bl	8000786 <lcdPuts>
				lcdGoto(LCD_1st_LINE, 13);
 8000f86:	210d      	movs	r1, #13
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f7ff fbdb 	bl	8000744 <lcdGoto>
				lcdItos(gradus);
 8000f8e:	6820      	ldr	r0, [r4, #0]
 8000f90:	f7ff fc1e 	bl	80007d0 <lcdItos>
				lcdGoto(LCD_1st_LINE, 16);
 8000f94:	2110      	movs	r1, #16
 8000f96:	2001      	movs	r0, #1
 8000f98:	f7ff fbd4 	bl	8000744 <lcdGoto>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000fa0:	337e      	adds	r3, #126	@ 0x7e
 8000fa2:	61bb      	str	r3, [r7, #24]
				LL_mDelay(50);
 8000fa4:	2032      	movs	r0, #50	@ 0x32
 8000fa6:	f001 ff3f 	bl	8002e28 <LL_mDelay>
				if ((HAL_GetTick() - time_on_ccw) > 10000)
 8000faa:	f000 fca9 	bl	8001900 <HAL_GetTick>
 8000fae:	6833      	ldr	r3, [r6, #0]
 8000fb0:	1ac0      	subs	r0, r0, r3
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <ReadStartButton+0x1a0>)
 8000fb4:	4298      	cmp	r0, r3
 8000fb6:	d9da      	bls.n	8000f6e <ReadStartButton+0x122>
 8000fb8:	23a0      	movs	r3, #160	@ 0xa0
 8000fba:	2202      	movs	r2, #2
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000fc0:	327e      	adds	r2, #126	@ 0x7e
 8000fc2:	e7a3      	b.n	8000f0c <ReadStartButton+0xc0>
		flag_key3_press = 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	9a01      	ldr	r2, [sp, #4]
 8000fc8:	7013      	strb	r3, [r2, #0]
}
 8000fca:	e755      	b.n	8000e78 <ReadStartButton+0x2c>
 8000fcc:	50000400 	.word	0x50000400
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000108 	.word	0x20000108
 8000fd8:	200000f8 	.word	0x200000f8
 8000fdc:	200000ec 	.word	0x200000ec
 8000fe0:	080037db 	.word	0x080037db
 8000fe4:	200000fc 	.word	0x200000fc
 8000fe8:	200000e8 	.word	0x200000e8
 8000fec:	00002710 	.word	0x00002710
 8000ff0:	200000e4 	.word	0x200000e4

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b510      	push	{r4, lr}
 8000ff6:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff8:	2234      	movs	r2, #52	@ 0x34
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	a80b      	add	r0, sp, #44	@ 0x2c
 8000ffe:	f001 ff49 	bl	8002e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001002:	2214      	movs	r2, #20
 8001004:	2100      	movs	r1, #0
 8001006:	4668      	mov	r0, sp
 8001008:	f001 ff44 	bl	8002e94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100c:	2218      	movs	r2, #24
 800100e:	2100      	movs	r1, #0
 8001010:	a805      	add	r0, sp, #20
 8001012:	f001 ff3f 	bl	8002e94 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001016:	491e      	ldr	r1, [pc, #120]	@ (8001090 <SystemClock_Config+0x9c>)
 8001018:	4b1e      	ldr	r3, [pc, #120]	@ (8001094 <SystemClock_Config+0xa0>)
 800101a:	680a      	ldr	r2, [r1, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101c:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101e:	401a      	ands	r2, r3
 8001020:	2380      	movs	r3, #128	@ 0x80
 8001022:	011b      	lsls	r3, r3, #4
 8001024:	4313      	orrs	r3, r2
 8001026:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001028:	2306      	movs	r3, #6
 800102a:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800102c:	2300      	movs	r3, #0
 800102e:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001030:	9315      	str	r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001032:	2380      	movs	r3, #128	@ 0x80
 8001034:	02db      	lsls	r3, r3, #11
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001036:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001038:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800103a:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103c:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800103e:	03db      	lsls	r3, r3, #15
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001040:	3a0e      	subs	r2, #14
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001042:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001046:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001048:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104a:	f001 f963 	bl	8002314 <HAL_RCC_OscConfig>
 800104e:	2800      	cmp	r0, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x62>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001052:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001054:	e7fe      	b.n	8001054 <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001056:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105a:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105e:	3b0c      	subs	r3, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001060:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001062:	0021      	movs	r1, r4
 8001064:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001068:	f001 fba0 	bl	80027ac <HAL_RCC_ClockConfig>
 800106c:	2800      	cmp	r0, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x80>
 8001070:	b672      	cpsid	i
  while (1)
 8001072:	e7fe      	b.n	8001072 <SystemClock_Config+0x7e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001074:	230a      	movs	r3, #10
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001076:	9007      	str	r0, [sp, #28]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001078:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107a:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800107c:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107e:	f001 fc6b 	bl	8002958 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	2800      	cmp	r0, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x96>
 8001086:	b672      	cpsid	i
  while (1)
 8001088:	e7fe      	b.n	8001088 <SystemClock_Config+0x94>
}
 800108a:	b018      	add	sp, #96	@ 0x60
 800108c:	bd10      	pop	{r4, pc}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	40007000 	.word	0x40007000
 8001094:	ffffe7ff 	.word	0xffffe7ff

08001098 <main>:
{
 8001098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800109a:	b099      	sub	sp, #100	@ 0x64
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	af11      	add	r7, sp, #68	@ 0x44
  HAL_Init();
 800109e:	f000 fc0f 	bl	80018c0 <HAL_Init>
  SystemClock_Config();
 80010a2:	f7ff ffa7 	bl	8000ff4 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	2218      	movs	r2, #24
 80010a8:	2100      	movs	r1, #0
 80010aa:	0038      	movs	r0, r7
 80010ac:	f001 fef2 	bl	8002e94 <memset>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80010b0:	2004      	movs	r0, #4
 80010b2:	f7ff fbd9 	bl	8000868 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff fbd6 	bl	8000868 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80010bc:	2002      	movs	r0, #2
 80010be:	f7ff fbd3 	bl	8000868 <LL_IOP_GRP1_EnableClock>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80010c2:	23a0      	movs	r3, #160	@ 0xa0
 80010c4:	2202      	movs	r2, #2
  WRITE_REG(GPIOx->BRR, PinMask);
 80010c6:	2540      	movs	r5, #64	@ 0x40
 80010c8:	2120      	movs	r1, #32
 80010ca:	2080      	movs	r0, #128	@ 0x80
  WRITE_REG(GPIOx->BSRR, PinMask);
 80010cc:	05db      	lsls	r3, r3, #23
 80010ce:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80010d0:	6299      	str	r1, [r3, #40]	@ 0x28
 80010d2:	629d      	str	r5, [r3, #40]	@ 0x28
 80010d4:	6298      	str	r0, [r3, #40]	@ 0x28
  GPIO_InitStruct.Pin = BTN_UP_Pin;
 80010d6:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80010d8:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80010da:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = BTN_UP_Pin;
 80010dc:	01db      	lsls	r3, r3, #7
 80010de:	9311      	str	r3, [sp, #68]	@ 0x44
  LL_GPIO_Init(BTN_UP_GPIO_Port, &GPIO_InitStruct);
 80010e0:	0039      	movs	r1, r7
 80010e2:	4831      	ldr	r0, [pc, #196]	@ (80011a8 <main+0x110>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80010e4:	607c      	str	r4, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80010e6:	613e      	str	r6, [r7, #16]
  LL_GPIO_Init(BTN_UP_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f001 fd2e 	bl	8002b48 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_DWN_Pin;
 80010ec:	2380      	movs	r3, #128	@ 0x80
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	9311      	str	r3, [sp, #68]	@ 0x44
  LL_GPIO_Init(BTN_DWN_GPIO_Port, &GPIO_InitStruct);
 80010f2:	0039      	movs	r1, r7
 80010f4:	482c      	ldr	r0, [pc, #176]	@ (80011a8 <main+0x110>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80010f6:	607c      	str	r4, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80010f8:	613e      	str	r6, [r7, #16]
  LL_GPIO_Init(BTN_DWN_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f001 fd25 	bl	8002b48 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = OE_Pin;
 80010fe:	2202      	movs	r2, #2
  LL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8001100:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = OE_Pin;
 8001102:	9211      	str	r2, [sp, #68]	@ 0x44
  LL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8001104:	0039      	movs	r1, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001106:	607e      	str	r6, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001108:	60bc      	str	r4, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800110a:	60fc      	str	r4, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800110c:	613c      	str	r4, [r7, #16]
  LL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 800110e:	05c0      	lsls	r0, r0, #23
 8001110:	f001 fd1a 	bl	8002b48 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_Pin;
 8001114:	2120      	movs	r1, #32
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001116:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = LED_Pin;
 8001118:	9111      	str	r1, [sp, #68]	@ 0x44
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800111a:	05c0      	lsls	r0, r0, #23
 800111c:	0039      	movs	r1, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800111e:	607e      	str	r6, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001120:	60bc      	str	r4, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001122:	60fc      	str	r4, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001124:	613c      	str	r4, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001126:	f001 fd0f 	bl	8002b48 <LL_GPIO_Init>
  LL_GPIO_Init(CW_GPIO_Port, &GPIO_InitStruct);
 800112a:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = CW_Pin;
 800112c:	9511      	str	r5, [sp, #68]	@ 0x44
  LL_GPIO_Init(CW_GPIO_Port, &GPIO_InitStruct);
 800112e:	0039      	movs	r1, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001130:	607e      	str	r6, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001132:	60bc      	str	r4, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001134:	60fc      	str	r4, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001136:	613c      	str	r4, [r7, #16]
  LL_GPIO_Init(CW_GPIO_Port, &GPIO_InitStruct);
 8001138:	05c0      	lsls	r0, r0, #23
 800113a:	f001 fd05 	bl	8002b48 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = CCW_Pin;
 800113e:	2080      	movs	r0, #128	@ 0x80
 8001140:	9011      	str	r0, [sp, #68]	@ 0x44
  LL_GPIO_Init(CCW_GPIO_Port, &GPIO_InitStruct);
 8001142:	20a0      	movs	r0, #160	@ 0xa0
 8001144:	0039      	movs	r1, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001146:	607e      	str	r6, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001148:	60bc      	str	r4, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800114a:	60fc      	str	r4, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800114c:	613c      	str	r4, [r7, #16]
  LL_GPIO_Init(CCW_GPIO_Port, &GPIO_InitStruct);
 800114e:	05c0      	lsls	r0, r0, #23
 8001150:	f001 fcfa 	bl	8002b48 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_START_Pin;
 8001154:	2202      	movs	r2, #2
  LL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 8001156:	0039      	movs	r1, r7
  GPIO_InitStruct.Pin = BTN_START_Pin;
 8001158:	9211      	str	r2, [sp, #68]	@ 0x44
  LL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 800115a:	4814      	ldr	r0, [pc, #80]	@ (80011ac <main+0x114>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800115c:	607c      	str	r4, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800115e:	613e      	str	r6, [r7, #16]
  LL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 8001160:	f001 fcf2 	bl	8002b48 <LL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001164:	4d12      	ldr	r5, [pc, #72]	@ (80011b0 <main+0x118>)
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <main+0x11c>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001168:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 800116a:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x00300F38;
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <main+0x120>)
  hi2c1.Init.OwnAddress1 = 0;
 800116e:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x00300F38;
 8001170:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001172:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001174:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001176:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001178:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117a:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117c:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800117e:	f000 fea3 	bl	8001ec8 <HAL_I2C_Init>
 8001182:	0001      	movs	r1, r0
 8001184:	42a0      	cmp	r0, r4
 8001186:	d001      	beq.n	800118c <main+0xf4>
 8001188:	b672      	cpsid	i
  while (1)
 800118a:	e7fe      	b.n	800118a <main+0xf2>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800118c:	0028      	movs	r0, r5
 800118e:	f001 f81f 	bl	80021d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001192:	1e01      	subs	r1, r0, #0
 8001194:	d001      	beq.n	800119a <main+0x102>
 8001196:	b672      	cpsid	i
  while (1)
 8001198:	e7fe      	b.n	8001198 <main+0x100>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800119a:	0028      	movs	r0, r5
 800119c:	f001 f846 	bl	800222c <HAL_I2CEx_ConfigDigitalFilter>
 80011a0:	1e06      	subs	r6, r0, #0
 80011a2:	d00b      	beq.n	80011bc <main+0x124>
 80011a4:	b672      	cpsid	i
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <main+0x10e>
 80011a8:	50000800 	.word	0x50000800
 80011ac:	50000400 	.word	0x50000400
 80011b0:	20000080 	.word	0x20000080
 80011b4:	40005400 	.word	0x40005400
 80011b8:	00300f38 	.word	0x00300f38
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80011bc:	233e      	movs	r3, #62	@ 0x3e
 80011be:	aa02      	add	r2, sp, #8
 80011c0:	189b      	adds	r3, r3, r2
  SET_BIT(RCC->APB2ENR, Periphs);
 80011c2:	2204      	movs	r2, #4
 80011c4:	4de7      	ldr	r5, [pc, #924]	@ (8001564 <main+0x4cc>)
 80011c6:	8018      	strh	r0, [r3, #0]
 80011c8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ca:	21ff      	movs	r1, #255	@ 0xff
 80011cc:	4313      	orrs	r3, r2
 80011ce:	636b      	str	r3, [r5, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011d0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80011d2:	48e5      	ldr	r0, [pc, #916]	@ (8001568 <main+0x4d0>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	22c5      	movs	r2, #197	@ 0xc5
 80011d8:	9303      	str	r3, [sp, #12]
 80011da:	0092      	lsls	r2, r2, #2
  (void)tmpreg;
 80011dc:	9b03      	ldr	r3, [sp, #12]
 80011de:	5883      	ldr	r3, [r0, r2]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80011e0:	4ce2      	ldr	r4, [pc, #904]	@ (800156c <main+0x4d4>)
 80011e2:	438b      	bics	r3, r1
 80011e4:	5083      	str	r3, [r0, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	2380      	movs	r3, #128	@ 0x80
 80011e8:	035b      	lsls	r3, r3, #13
 80011ea:	6003      	str	r3, [r0, #0]
  TIM_InitStruct.Prescaler = 31999;
 80011ec:	4be0      	ldr	r3, [pc, #896]	@ (8001570 <main+0x4d8>)
  LL_TIM_Init(TIM21, &TIM_InitStruct);
 80011ee:	0039      	movs	r1, r7
  TIM_InitStruct.Prescaler = 31999;
 80011f0:	803b      	strh	r3, [r7, #0]
  TIM_InitStruct.Autoreload = 499;
 80011f2:	23f4      	movs	r3, #244	@ 0xf4
 80011f4:	33ff      	adds	r3, #255	@ 0xff
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80011f6:	607e      	str	r6, [r7, #4]
  TIM_InitStruct.Autoreload = 499;
 80011f8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80011fa:	60fe      	str	r6, [r7, #12]
  LL_TIM_Init(TIM21, &TIM_InitStruct);
 80011fc:	48dd      	ldr	r0, [pc, #884]	@ (8001574 <main+0x4dc>)
 80011fe:	f001 fda1 	bl	8002d44 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001202:	2180      	movs	r1, #128	@ 0x80
 8001204:	4adb      	ldr	r2, [pc, #876]	@ (8001574 <main+0x4dc>)
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001206:	0038      	movs	r0, r7
 8001208:	6813      	ldr	r3, [r2, #0]
 800120a:	430b      	orrs	r3, r1
 800120c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800120e:	6893      	ldr	r3, [r2, #8]
 8001210:	4023      	ands	r3, r4
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001212:	2470      	movs	r4, #112	@ 0x70
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001214:	6093      	str	r3, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001216:	6853      	ldr	r3, [r2, #4]
 8001218:	43a3      	bics	r3, r4
 800121a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800121c:	6893      	ldr	r3, [r2, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	ac0b      	add	r4, sp, #44	@ 0x2c
 8001220:	438b      	bics	r3, r1
 8001222:	6093      	str	r3, [r2, #8]
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001224:	0031      	movs	r1, r6
 8001226:	221c      	movs	r2, #28
 8001228:	f001 fe34 	bl	8002e94 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	0031      	movs	r1, r6
 800122e:	2218      	movs	r2, #24
 8001230:	0020      	movs	r0, r4
 8001232:	f001 fe2f 	bl	8002e94 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8001236:	2280      	movs	r2, #128	@ 0x80
 8001238:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800123a:	0292      	lsls	r2, r2, #10
 800123c:	4313      	orrs	r3, r2
 800123e:	63ab      	str	r3, [r5, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001240:	6bab      	ldr	r3, [r5, #56]	@ 0x38
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001242:	2001      	movs	r0, #1
 8001244:	4013      	ands	r3, r2
 8001246:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8001248:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800124a:	2502      	movs	r5, #2
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800124c:	f7ff fb0c 	bl	8000868 <LL_IOP_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001250:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001254:	930b      	str	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001256:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	3501      	adds	r5, #1
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	0021      	movs	r1, r4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800125e:	60e6      	str	r6, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001260:	6126      	str	r6, [r4, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001262:	6163      	str	r3, [r4, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001266:	001d      	movs	r5, r3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f001 fc6e 	bl	8002b48 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800126c:	2308      	movs	r3, #8
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001270:	930b      	str	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001272:	3b06      	subs	r3, #6
 8001274:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	3301      	adds	r3, #1
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	0021      	movs	r1, r4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	60a3      	str	r3, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800127c:	60e6      	str	r6, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800127e:	6126      	str	r6, [r4, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001280:	6165      	str	r5, [r4, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	05c0      	lsls	r0, r0, #23
 8001284:	f001 fc60 	bl	8002b48 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001288:	22c7      	movs	r2, #199	@ 0xc7
 800128a:	48b7      	ldr	r0, [pc, #732]	@ (8001568 <main+0x4d0>)
 800128c:	0092      	lsls	r2, r2, #2
 800128e:	5883      	ldr	r3, [r0, r2]
 8001290:	35fb      	adds	r5, #251	@ 0xfb
 8001292:	43ab      	bics	r3, r5
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001294:	2580      	movs	r5, #128	@ 0x80
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001296:	5083      	str	r3, [r0, r2]
  USART_InitStruct.BaudRate = 9600;
 8001298:	2396      	movs	r3, #150	@ 0x96
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	056d      	lsls	r5, r5, #21
 800129c:	6005      	str	r5, [r0, #0]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 800129e:	2580      	movs	r5, #128	@ 0x80
  USART_InitStruct.BaudRate = 9600;
 80012a0:	019b      	lsls	r3, r3, #6
 80012a2:	9311      	str	r3, [sp, #68]	@ 0x44
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80012a4:	230c      	movs	r3, #12
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 80012a6:	022d      	lsls	r5, r5, #8
 80012a8:	61bd      	str	r5, [r7, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 80012aa:	4db3      	ldr	r5, [pc, #716]	@ (8001578 <main+0x4e0>)
 80012ac:	0039      	movs	r1, r7
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80012ae:	607e      	str	r6, [r7, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80012b0:	60be      	str	r6, [r7, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80012b2:	60fe      	str	r6, [r7, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80012b4:	613b      	str	r3, [r7, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80012b6:	617e      	str	r6, [r7, #20]
  LL_USART_Init(USART2, &USART_InitStruct);
 80012b8:	0028      	movs	r0, r5
 80012ba:	f001 fd69 	bl	8002d90 <LL_USART_Init>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 80012be:	2080      	movs	r0, #128	@ 0x80
 80012c0:	68ab      	ldr	r3, [r5, #8]
 80012c2:	0140      	lsls	r0, r0, #5
 80012c4:	4303      	orrs	r3, r0
 80012c6:	60ab      	str	r3, [r5, #8]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMADeactOnRxErr(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_DDRE);
 80012c8:	68ab      	ldr	r3, [r5, #8]
 80012ca:	4aac      	ldr	r2, [pc, #688]	@ (800157c <main+0x4e4>)
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80012cc:	2101      	movs	r1, #1
  CLEAR_BIT(USARTx->CR3, USART_CR3_DDRE);
 80012ce:	4013      	ands	r3, r2
 80012d0:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012d2:	686b      	ldr	r3, [r5, #4]
 80012d4:	4aaa      	ldr	r2, [pc, #680]	@ (8001580 <main+0x4e8>)
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80012d6:	0020      	movs	r0, r4
 80012d8:	4013      	ands	r3, r2
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80012da:	222a      	movs	r2, #42	@ 0x2a
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012dc:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80012de:	68ab      	ldr	r3, [r5, #8]
 80012e0:	4393      	bics	r3, r2
 80012e2:	60ab      	str	r3, [r5, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80012e4:	682b      	ldr	r3, [r5, #0]
 80012e6:	3a1a      	subs	r2, #26
 80012e8:	430b      	orrs	r3, r1
 80012ea:	602b      	str	r3, [r5, #0]
 80012ec:	0031      	movs	r1, r6
 80012ee:	f001 fdd1 	bl	8002e94 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	0031      	movs	r1, r6
 80012f4:	2218      	movs	r2, #24
 80012f6:	0038      	movs	r0, r7
 80012f8:	f001 fdcc 	bl	8002e94 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 80012fc:	2101      	movs	r1, #1
 80012fe:	4a99      	ldr	r2, [pc, #612]	@ (8001564 <main+0x4cc>)
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001300:	0008      	movs	r0, r1
 8001302:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8001304:	430b      	orrs	r3, r1
 8001306:	6393      	str	r3, [r2, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001308:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800130a:	400b      	ands	r3, r1
 800130c:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 800130e:	9b05      	ldr	r3, [sp, #20]
 8001310:	f7ff faaa 	bl	8000868 <LL_IOP_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001314:	2010      	movs	r0, #16
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001316:	2302      	movs	r3, #2
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001318:	9011      	str	r0, [sp, #68]	@ 0x44
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800131c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800131e:	3303      	adds	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	0039      	movs	r1, r7
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001322:	60be      	str	r6, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001324:	60fe      	str	r6, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001326:	613e      	str	r6, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001328:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	05c0      	lsls	r0, r0, #23
 800132c:	f001 fc0c 	bl	8002b48 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001330:	22c3      	movs	r2, #195	@ 0xc3
 8001332:	488d      	ldr	r0, [pc, #564]	@ (8001568 <main+0x4d0>)
 8001334:	0092      	lsls	r2, r2, #2
 8001336:	5883      	ldr	r3, [r0, r2]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001338:	0021      	movs	r1, r4
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	5083      	str	r3, [r0, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	6003      	str	r3, [r0, #0]
  TIM_InitStruct.Autoreload = timer_preload;
 8001346:	2301      	movs	r3, #1
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001348:	2080      	movs	r0, #128	@ 0x80
  TIM_InitStruct.Autoreload = timer_preload;
 800134a:	60a3      	str	r3, [r4, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 800134c:	33ff      	adds	r3, #255	@ 0xff
  TIM_InitStruct.Prescaler = 0;
 800134e:	8026      	strh	r6, [r4, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001350:	6066      	str	r6, [r4, #4]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8001352:	60e3      	str	r3, [r4, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001354:	05c0      	lsls	r0, r0, #23
 8001356:	f001 fcf5 	bl	8002d44 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800135a:	2080      	movs	r0, #128	@ 0x80
 800135c:	2180      	movs	r1, #128	@ 0x80
 800135e:	05c0      	lsls	r0, r0, #23
 8001360:	6803      	ldr	r3, [r0, #0]
 8001362:	430b      	orrs	r3, r1
 8001364:	6003      	str	r3, [r0, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 8001366:	6882      	ldr	r2, [r0, #8]
 8001368:	4b86      	ldr	r3, [pc, #536]	@ (8001584 <main+0x4ec>)
 800136a:	401a      	ands	r2, r3
 800136c:	238e      	movs	r3, #142	@ 0x8e
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	4313      	orrs	r3, r2
 8001372:	6083      	str	r3, [r0, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001374:	6883      	ldr	r3, [r0, #8]
 8001376:	4a7d      	ldr	r2, [pc, #500]	@ (800156c <main+0x4d4>)
 8001378:	4013      	ands	r3, r2
 800137a:	2280      	movs	r2, #128	@ 0x80
 800137c:	01d2      	lsls	r2, r2, #7
 800137e:	4313      	orrs	r3, r2
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001380:	2270      	movs	r2, #112	@ 0x70
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001382:	6083      	str	r3, [r0, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001384:	6843      	ldr	r3, [r0, #4]
 8001386:	4393      	bics	r3, r2
 8001388:	6043      	str	r3, [r0, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800138a:	6883      	ldr	r3, [r0, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800138c:	3a5c      	subs	r2, #92	@ 0x5c
 800138e:	438b      	bics	r3, r1
 8001390:	6083      	str	r3, [r0, #8]
 8001392:	0031      	movs	r1, r6
 8001394:	0020      	movs	r0, r4
 8001396:	f001 fd7d 	bl	8002e94 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800139a:	0031      	movs	r1, r6
 800139c:	2210      	movs	r2, #16
 800139e:	a807      	add	r0, sp, #28
 80013a0:	f001 fd78 	bl	8002e94 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	0031      	movs	r1, r6
 80013a6:	2218      	movs	r2, #24
 80013a8:	0038      	movs	r0, r7
 80013aa:	f001 fd73 	bl	8002e94 <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 80013ae:	2280      	movs	r2, #128	@ 0x80
 80013b0:	496c      	ldr	r1, [pc, #432]	@ (8001564 <main+0x4cc>)
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80013b6:	2001      	movs	r0, #1
 80013b8:	4313      	orrs	r3, r2
 80013ba:	634b      	str	r3, [r1, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013bc:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80013be:	4013      	ands	r3, r2
 80013c0:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 80013c2:	9b06      	ldr	r3, [sp, #24]
 80013c4:	f7ff fa50 	bl	8000868 <LL_IOP_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80013c8:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80013ca:	2103      	movs	r1, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80013ce:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80013d0:	6079      	str	r1, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013d2:	613e      	str	r6, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	0039      	movs	r1, r7
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d6:	27c3      	movs	r7, #195	@ 0xc3
 80013d8:	05c0      	lsls	r0, r0, #23
 80013da:	f001 fbb5 	bl	8002b48 <LL_GPIO_Init>
 80013de:	20ff      	movs	r0, #255	@ 0xff
 80013e0:	4a61      	ldr	r2, [pc, #388]	@ (8001568 <main+0x4d0>)
 80013e2:	00bf      	lsls	r7, r7, #2
 80013e4:	59d3      	ldr	r3, [r2, r7]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013e6:	2101      	movs	r1, #1
 80013e8:	4383      	bics	r3, r0
 80013ea:	51d3      	str	r3, [r2, r7]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ec:	2780      	movs	r7, #128	@ 0x80
 80013ee:	017f      	lsls	r7, r7, #5
 80013f0:	6017      	str	r7, [r2, #0]
 80013f2:	4f65      	ldr	r7, [pc, #404]	@ (8001588 <main+0x4f0>)
 80013f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80013f6:	0038      	movs	r0, r7
 80013f8:	430b      	orrs	r3, r1
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013fc:	0021      	movs	r1, r4
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80013fe:	960b      	str	r6, [sp, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001400:	6066      	str	r6, [r4, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001402:	60a6      	str	r6, [r4, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001404:	60e6      	str	r6, [r4, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001406:	6126      	str	r6, [r4, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001408:	f001 fb84 	bl	8002b14 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800140c:	2207      	movs	r2, #7
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 800140e:	2401      	movs	r4, #1
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001410:	2103      	movs	r1, #3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4393      	bics	r3, r2
 8001416:	430b      	orrs	r3, r1
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8001418:	1909      	adds	r1, r1, r4
 800141a:	0008      	movs	r0, r1
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800141c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 800141e:	693b      	ldr	r3, [r7, #16]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8001420:	4a5a      	ldr	r2, [pc, #360]	@ (800158c <main+0x4f4>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8001422:	43a3      	bics	r3, r4
 8001424:	613b      	str	r3, [r7, #16]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	438b      	bics	r3, r1
 800142a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 800142c:	6813      	ldr	r3, [r2, #0]
 800142e:	4958      	ldr	r1, [pc, #352]	@ (8001590 <main+0x4f8>)
 8001430:	400b      	ands	r3, r1
 8001432:	6013      	str	r3, [r2, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	0001      	movs	r1, r0
 8001438:	4383      	bics	r3, r0
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 800143a:	2080      	movs	r0, #128	@ 0x80
 800143c:	607b      	str	r3, [r7, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3104      	adds	r1, #4
 8001442:	438b      	bics	r3, r1
 8001444:	05c0      	lsls	r0, r0, #23
 8001446:	607b      	str	r3, [r7, #4]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001448:	a907      	add	r1, sp, #28
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 800144a:	9007      	str	r0, [sp, #28]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800144c:	0038      	movs	r0, r7
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800144e:	9608      	str	r6, [sp, #32]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001450:	9609      	str	r6, [sp, #36]	@ 0x24
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001452:	960a      	str	r6, [sp, #40]	@ 0x28
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001454:	f001 fb42 	bl	8002adc <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 8001458:	2180      	movs	r1, #128	@ 0x80
 800145a:	4a4e      	ldr	r2, [pc, #312]	@ (8001594 <main+0x4fc>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	0549      	lsls	r1, r1, #21
 8001460:	4013      	ands	r3, r2
 8001462:	430b      	orrs	r3, r1
 8001464:	60bb      	str	r3, [r7, #8]
  volatile uint32_t SystemFreq = HAL_RCC_GetHCLKFreq();
 8001466:	f001 fa71 	bl	800294c <HAL_RCC_GetHCLKFreq>
 800146a:	9011      	str	r0, [sp, #68]	@ 0x44
  lcdInit();
 800146c:	f7ff f9e1 	bl	8000832 <lcdInit>
  lcdBackLightOn();
 8001470:	f7ff f9ee 	bl	8000850 <lcdBackLightOn>
  lcdClrScr();
 8001474:	f7ff f94c 	bl	8000710 <lcdClrScr>
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001478:	4a3e      	ldr	r2, [pc, #248]	@ (8001574 <main+0x4dc>)
 800147a:	6813      	ldr	r3, [r2, #0]
 800147c:	4323      	orrs	r3, r4
 800147e:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001480:	68d3      	ldr	r3, [r2, #12]
 8001482:	4323      	orrs	r3, r4
 8001484:	60d3      	str	r3, [r2, #12]
 8001486:	682b      	ldr	r3, [r5, #0]
 8001488:	4323      	orrs	r3, r4
 800148a:	602b      	str	r3, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800148c:	f3ef 8210 	mrs	r2, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001490:	f384 8810 	msr	PRIMASK, r4
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001494:	2120      	movs	r1, #32
 8001496:	682b      	ldr	r3, [r5, #0]
 8001498:	430b      	orrs	r3, r1
 800149a:	602b      	str	r3, [r5, #0]
 800149c:	f382 8810 	msr	PRIMASK, r2
  isPushCW = 2;
 80014a0:	2502      	movs	r5, #2
 80014a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001598 <main+0x500>)
  imp_count = 0;
 80014a4:	4a3d      	ldr	r2, [pc, #244]	@ (800159c <main+0x504>)
  isPushCW = 2;
 80014a6:	701d      	strb	r5, [r3, #0]
  dir_azimuth = 0;
 80014a8:	4b3d      	ldr	r3, [pc, #244]	@ (80015a0 <main+0x508>)
  dir_gradus = 0;
 80014aa:	4c3e      	ldr	r4, [pc, #248]	@ (80015a4 <main+0x50c>)
  dir_azimuth = 0;
 80014ac:	601e      	str	r6, [r3, #0]
 80014ae:	9301      	str	r3, [sp, #4]
  time_on_cw = 0;
 80014b0:	4b3d      	ldr	r3, [pc, #244]	@ (80015a8 <main+0x510>)
  if (HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_START_Pin) == GPIO_PIN_RESET){
 80014b2:	0029      	movs	r1, r5
  time_on_cw = 0;
 80014b4:	601e      	str	r6, [r3, #0]
  time_on_ccw = 0;
 80014b6:	4b3d      	ldr	r3, [pc, #244]	@ (80015ac <main+0x514>)
  if (HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_START_Pin) == GPIO_PIN_RESET){
 80014b8:	483d      	ldr	r0, [pc, #244]	@ (80015b0 <main+0x518>)
  time_on_ccw = 0;
 80014ba:	601e      	str	r6, [r3, #0]
  flag_stop = 0;
 80014bc:	4b3d      	ldr	r3, [pc, #244]	@ (80015b4 <main+0x51c>)
  imp_count = 0;
 80014be:	9200      	str	r2, [sp, #0]
  flag_stop = 0;
 80014c0:	701e      	strb	r6, [r3, #0]
  flag_status = 0;
 80014c2:	4b3d      	ldr	r3, [pc, #244]	@ (80015b8 <main+0x520>)
  imp_count = 0;
 80014c4:	6016      	str	r6, [r2, #0]
  flag_status = 0;
 80014c6:	701e      	strb	r6, [r3, #0]
  flag_move=0;
 80014c8:	4b3c      	ldr	r3, [pc, #240]	@ (80015bc <main+0x524>)
  dir_gradus = 0;
 80014ca:	6026      	str	r6, [r4, #0]
  flag_move=0;
 80014cc:	701e      	strb	r6, [r3, #0]
  if (HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_START_Pin) == GPIO_PIN_RESET){
 80014ce:	f000 fc13 	bl	8001cf8 <HAL_GPIO_ReadPin>
 80014d2:	2800      	cmp	r0, #0
 80014d4:	d101      	bne.n	80014da <main+0x442>
	  SetDefault();
 80014d6:	f7ff fb6f 	bl	8000bb8 <SetDefault>
  LL_mDelay(5);
 80014da:	2005      	movs	r0, #5
 80014dc:	f001 fca4 	bl	8002e28 <LL_mDelay>
  return (*(__IO uint32_t *)address);
 80014e0:	4b37      	ldr	r3, [pc, #220]	@ (80015c0 <main+0x528>)
  gradus = ReadFromEEPROM(EEPROM_ADDRESS_START);
 80014e2:	4d38      	ldr	r5, [pc, #224]	@ (80015c4 <main+0x52c>)
  return (*(__IO uint32_t *)address);
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a38      	ldr	r2, [pc, #224]	@ (80015c8 <main+0x530>)
  gradus = ReadFromEEPROM(EEPROM_ADDRESS_START);
 80014e8:	602b      	str	r3, [r5, #0]
  return (*(__IO uint32_t *)address);
 80014ea:	6812      	ldr	r2, [r2, #0]
  man_azimuth = ReadFromEEPROM(EEPROM_ADDRESS_START + sizeof(man_azimuth));
 80014ec:	4e37      	ldr	r6, [pc, #220]	@ (80015cc <main+0x534>)
 80014ee:	6032      	str	r2, [r6, #0]
  imp_count = gradus/step;
 80014f0:	9a00      	ldr	r2, [sp, #0]
 80014f2:	6013      	str	r3, [r2, #0]
  ShowStartAzimuth ();
 80014f4:	f7ff fa3c 	bl	8000970 <ShowStartAzimuth>
  str_rx[0] = 0;
 80014f8:	2200      	movs	r2, #0
 80014fa:	4b35      	ldr	r3, [pc, #212]	@ (80015d0 <main+0x538>)
   LL_mDelay(5);
 80014fc:	2005      	movs	r0, #5
  str_rx[0] = 0;
 80014fe:	701a      	strb	r2, [r3, #0]
  str_rx[1] = 0;
 8001500:	705a      	strb	r2, [r3, #1]
  str_rx[2] = 0;
 8001502:	709a      	strb	r2, [r3, #2]
  str_rx[3] = 0;
 8001504:	70da      	strb	r2, [r3, #3]
  str_rx[4] = 0;
 8001506:	711a      	strb	r2, [r3, #4]
  str_rx[5] = 0;
 8001508:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(ADCx->CR,
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	4b31      	ldr	r3, [pc, #196]	@ (80015d4 <main+0x53c>)
 800150e:	401a      	ands	r2, r3
 8001510:	3318      	adds	r3, #24
 8001512:	4313      	orrs	r3, r2
 8001514:	60bb      	str	r3, [r7, #8]
   LL_mDelay(5);
 8001516:	f001 fc87 	bl	8002e28 <LL_mDelay>
			flag_eeprom=1;
 800151a:	2701      	movs	r7, #1
   CheckADC();
 800151c:	f7ff fa56 	bl	80009cc <CheckADC>
		CheckADC();
 8001520:	f7ff fa54 	bl	80009cc <CheckADC>
		if (flag_adc == 0) {
 8001524:	4b2c      	ldr	r3, [pc, #176]	@ (80015d8 <main+0x540>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d116      	bne.n	800155a <main+0x4c2>
			flag_eeprom=1;
 800152c:	4b2b      	ldr	r3, [pc, #172]	@ (80015dc <main+0x544>)
 800152e:	701f      	strb	r7, [r3, #0]
			if (man_azimuth >= 180)
 8001530:	6833      	ldr	r3, [r6, #0]
 8001532:	2bb3      	cmp	r3, #179	@ 0xb3
 8001534:	d901      	bls.n	800153a <main+0x4a2>
				dir_azimuth = man_azimuth - 360;
 8001536:	3b69      	subs	r3, #105	@ 0x69
 8001538:	3bff      	subs	r3, #255	@ 0xff
 800153a:	9a01      	ldr	r2, [sp, #4]
 800153c:	6013      	str	r3, [r2, #0]
			if (gradus >= 180)
 800153e:	682b      	ldr	r3, [r5, #0]
 8001540:	2bb3      	cmp	r3, #179	@ 0xb3
 8001542:	d901      	bls.n	8001548 <main+0x4b0>
				dir_gradus = gradus - 360;
 8001544:	3b69      	subs	r3, #105	@ 0x69
 8001546:	3bff      	subs	r3, #255	@ 0xff
 8001548:	6023      	str	r3, [r4, #0]
			ReadCWButton();
 800154a:	f7ff fa7d 	bl	8000a48 <ReadCWButton>
			ReadCCWButton();
 800154e:	f7ff facb 	bl	8000ae8 <ReadCCWButton>
			ReadStartButton();
 8001552:	f7ff fc7b 	bl	8000e4c <ReadStartButton>
			CheckUSART();
 8001556:	f7ff fc4f 	bl	8000df8 <CheckUSART>
		LL_mDelay(10);
 800155a:	200a      	movs	r0, #10
 800155c:	f001 fc64 	bl	8002e28 <LL_mDelay>
		CheckADC();
 8001560:	e7de      	b.n	8001520 <main+0x488>
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	40021000 	.word	0x40021000
 8001568:	e000e100 	.word	0xe000e100
 800156c:	ffffbff8 	.word	0xffffbff8
 8001570:	00007cff 	.word	0x00007cff
 8001574:	40010800 	.word	0x40010800
 8001578:	40004400 	.word	0x40004400
 800157c:	ffffdfff 	.word	0xffffdfff
 8001580:	ffffb7ff 	.word	0xffffb7ff
 8001584:	ffff40ff 	.word	0xffff40ff
 8001588:	40012400 	.word	0x40012400
 800158c:	40012708 	.word	0x40012708
 8001590:	fdffffff 	.word	0xfdffffff
 8001594:	6fffffe8 	.word	0x6fffffe8
 8001598:	200000f4 	.word	0x200000f4
 800159c:	20000100 	.word	0x20000100
 80015a0:	200000ec 	.word	0x200000ec
 80015a4:	200000f8 	.word	0x200000f8
 80015a8:	200000e8 	.word	0x200000e8
 80015ac:	200000e4 	.word	0x200000e4
 80015b0:	50000400 	.word	0x50000400
 80015b4:	200000ce 	.word	0x200000ce
 80015b8:	200000cd 	.word	0x200000cd
 80015bc:	200000cc 	.word	0x200000cc
 80015c0:	08080000 	.word	0x08080000
 80015c4:	200000fc 	.word	0x200000fc
 80015c8:	08080004 	.word	0x08080004
 80015cc:	200000f0 	.word	0x200000f0
 80015d0:	200000d9 	.word	0x200000d9
 80015d4:	7fffffe8 	.word	0x7fffffe8
 80015d8:	20000105 	.word	0x20000105
 80015dc:	20000104 	.word	0x20000104

080015e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e0:	2201      	movs	r2, #1
 80015e2:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <HAL_MspInit+0x18>)
 80015e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015e6:	430a      	orrs	r2, r1
 80015e8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	2280      	movs	r2, #128	@ 0x80
 80015ec:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80015ee:	0552      	lsls	r2, r2, #21
 80015f0:	430a      	orrs	r2, r1
 80015f2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f4:	4770      	bx	lr
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015fc:	b510      	push	{r4, lr}
 80015fe:	0004      	movs	r4, r0
 8001600:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	2214      	movs	r2, #20
 8001604:	2100      	movs	r1, #0
 8001606:	a801      	add	r0, sp, #4
 8001608:	f001 fc44 	bl	8002e94 <memset>
  if(hi2c->Instance==I2C1)
 800160c:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <HAL_I2C_MspInit+0x54>)
 800160e:	6822      	ldr	r2, [r4, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d11b      	bne.n	800164c <HAL_I2C_MspInit+0x50>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	2301      	movs	r3, #1
 8001616:	4c0f      	ldr	r4, [pc, #60]	@ (8001654 <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	431a      	orrs	r2, r3
 8001620:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8001622:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	401a      	ands	r2, r3
 8001628:	9200      	str	r2, [sp, #0]
 800162a:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800162c:	22c0      	movs	r2, #192	@ 0xc0
 800162e:	00d2      	lsls	r2, r2, #3
 8001630:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001632:	2212      	movs	r2, #18
 8001634:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	3a0f      	subs	r2, #15
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001638:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800163c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f000 faa9 	bl	8001b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001642:	2380      	movs	r3, #128	@ 0x80
 8001644:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001646:	039b      	lsls	r3, r3, #14
 8001648:	4313      	orrs	r3, r2
 800164a:	63a3      	str	r3, [r4, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800164c:	b006      	add	sp, #24
 800164e:	bd10      	pop	{r4, pc}
 8001650:	40005400 	.word	0x40005400
 8001654:	40021000 	.word	0x40021000

08001658 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <NMI_Handler>

0800165a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler>

0800165c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800165c:	4770      	bx	lr

0800165e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800165e:	4770      	bx	lr

08001660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001660:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001662:	f000 f941 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001666:	bd10      	pop	{r4, pc}

08001668 <ADC1_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
 8001668:	4770      	bx	lr
	...

0800166c <TIM2_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800166c:	2380      	movs	r3, #128	@ 0x80

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800166e:	b510      	push	{r4, lr}
 8001670:	05db      	lsls	r3, r3, #23
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	07d2      	lsls	r2, r2, #31
 8001676:	d520      	bpl.n	80016ba <TIM2_IRQHandler+0x4e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001678:	2202      	movs	r2, #2
 800167a:	4252      	negs	r2, r2
 800167c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM2)) {
					LL_TIM_ClearFlag_UPDATE(TIM2);
					if (dir_azimuth > dir_gradus){
 800167e:	4915      	ldr	r1, [pc, #84]	@ (80016d4 <TIM2_IRQHandler+0x68>)
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <TIM2_IRQHandler+0x6c>)
						if ( imp_count < ((PULSE_PER_360)/(timer_preload+1))-1) imp_count++; else imp_count = 0;
 8001682:	4a16      	ldr	r2, [pc, #88]	@ (80016dc <TIM2_IRQHandler+0x70>)
					if (dir_azimuth > dir_gradus){
 8001684:	681c      	ldr	r4, [r3, #0]
 8001686:	6808      	ldr	r0, [r1, #0]
						if ( imp_count < ((PULSE_PER_360)/(timer_preload+1))-1) imp_count++; else imp_count = 0;
 8001688:	6813      	ldr	r3, [r2, #0]
					if (dir_azimuth > dir_gradus){
 800168a:	4284      	cmp	r4, r0
 800168c:	dd18      	ble.n	80016c0 <TIM2_IRQHandler+0x54>
						if ( imp_count < ((PULSE_PER_360)/(timer_preload+1))-1) imp_count++; else imp_count = 0;
 800168e:	20b3      	movs	r0, #179	@ 0xb3
 8001690:	0040      	lsls	r0, r0, #1
 8001692:	4283      	cmp	r3, r0
 8001694:	d812      	bhi.n	80016bc <TIM2_IRQHandler+0x50>
 8001696:	3301      	adds	r3, #1
					}
					if (dir_azimuth < dir_gradus){
						if ( imp_count > 0 ) imp_count--; else imp_count = ((PULSE_PER_360)/(timer_preload+1))-1;
 8001698:	6013      	str	r3, [r2, #0]
					}
					gradus = imp_count*step;
 800169a:	6813      	ldr	r3, [r2, #0]
 800169c:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <TIM2_IRQHandler+0x74>)
 800169e:	6013      	str	r3, [r2, #0]
					if (gradus >= 180) dir_gradus = gradus - 360; else dir_gradus = gradus;
 80016a0:	2bb3      	cmp	r3, #179	@ 0xb3
 80016a2:	d901      	bls.n	80016a8 <TIM2_IRQHandler+0x3c>
 80016a4:	3b69      	subs	r3, #105	@ 0x69
 80016a6:	3bff      	subs	r3, #255	@ 0xff
 80016a8:	600b      	str	r3, [r1, #0]
					time_on_cw = HAL_GetTick();
 80016aa:	f000 f929 	bl	8001900 <HAL_GetTick>
 80016ae:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <TIM2_IRQHandler+0x78>)
 80016b0:	6018      	str	r0, [r3, #0]
					time_on_ccw = HAL_GetTick();
 80016b2:	f000 f925 	bl	8001900 <HAL_GetTick>
 80016b6:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <TIM2_IRQHandler+0x7c>)
 80016b8:	6018      	str	r0, [r3, #0]
				}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ba:	bd10      	pop	{r4, pc}
						if ( imp_count < ((PULSE_PER_360)/(timer_preload+1))-1) imp_count++; else imp_count = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	e7eb      	b.n	8001698 <TIM2_IRQHandler+0x2c>
					if (dir_azimuth < dir_gradus){
 80016c0:	4284      	cmp	r4, r0
 80016c2:	daea      	bge.n	800169a <TIM2_IRQHandler+0x2e>
						if ( imp_count > 0 ) imp_count--; else imp_count = ((PULSE_PER_360)/(timer_preload+1))-1;
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <TIM2_IRQHandler+0x60>
 80016c8:	3b01      	subs	r3, #1
 80016ca:	e7e5      	b.n	8001698 <TIM2_IRQHandler+0x2c>
 80016cc:	2368      	movs	r3, #104	@ 0x68
 80016ce:	33ff      	adds	r3, #255	@ 0xff
 80016d0:	e7e2      	b.n	8001698 <TIM2_IRQHandler+0x2c>
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	200000f8 	.word	0x200000f8
 80016d8:	200000ec 	.word	0x200000ec
 80016dc:	20000100 	.word	0x20000100
 80016e0:	200000fc 	.word	0x200000fc
 80016e4:	200000e8 	.word	0x200000e8
 80016e8:	200000e4 	.word	0x200000e4

080016ec <TIM21_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <TIM21_IRQHandler+0x28>)
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	07d2      	lsls	r2, r2, #31
 80016f2:	d50d      	bpl.n	8001710 <TIM21_IRQHandler+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80016f4:	2202      	movs	r2, #2
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 80016f6:	21a0      	movs	r1, #160	@ 0xa0
 80016f8:	4252      	negs	r2, r2
 80016fa:	611a      	str	r2, [r3, #16]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80016fc:	2280      	movs	r2, #128	@ 0x80
  uint32_t odr = READ_REG(GPIOx->ODR);
 80016fe:	05c9      	lsls	r1, r1, #23
 8001700:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001702:	0392      	lsls	r2, r2, #14
 8001704:	0403      	lsls	r3, r0, #16
 8001706:	4013      	ands	r3, r2
 8001708:	2220      	movs	r2, #32
 800170a:	4382      	bics	r2, r0
 800170c:	4313      	orrs	r3, r2
 800170e:	618b      	str	r3, [r1, #24]
			}
  /* USER CODE END TIM21_IRQn 0 */
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001710:	4770      	bx	lr
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	40010800 	.word	0x40010800

08001718 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001718:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800171a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800171e:	2301      	movs	r3, #1
 8001720:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001724:	2420      	movs	r4, #32
 8001726:	4a1c      	ldr	r2, [pc, #112]	@ (8001798 <USART2_IRQHandler+0x80>)
 8001728:	6811      	ldr	r1, [r2, #0]
 800172a:	43a1      	bics	r1, r4
 800172c:	6011      	str	r1, [r2, #0]
 800172e:	f380 8810 	msr	PRIMASK, r0
  /* USER CODE BEGIN USART2_IRQn 0 */
	LL_USART_DisableIT_RXNE(USART2);
	char letter;
	static uint8_t i = 0;
	letter = USART2->RDR;
 8001732:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8001734:	4919      	ldr	r1, [pc, #100]	@ (800179c <USART2_IRQHandler+0x84>)
 8001736:	b2c0      	uxtb	r0, r0
	if (letter != '\n') {
 8001738:	4c19      	ldr	r4, [pc, #100]	@ (80017a0 <USART2_IRQHandler+0x88>)
 800173a:	280a      	cmp	r0, #10
 800173c:	d014      	beq.n	8001768 <USART2_IRQHandler+0x50>
		str_rx[i] = letter;
 800173e:	780b      	ldrb	r3, [r1, #0]
 8001740:	54e0      	strb	r0, [r4, r3]
		i++;
 8001742:	3301      	adds	r3, #1
 8001744:	b2db      	uxtb	r3, r3
		if (i == 9)
 8001746:	2b09      	cmp	r3, #9
 8001748:	d00c      	beq.n	8001764 <USART2_IRQHandler+0x4c>
			i = 0;
 800174a:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800174c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001750:	2301      	movs	r3, #1
 8001752:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001756:	6810      	ldr	r0, [r2, #0]
 8001758:	331f      	adds	r3, #31
 800175a:	4303      	orrs	r3, r0
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	f381 8810 	msr	PRIMASK, r1
	LL_USART_EnableIT_RXNE(USART2);
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001762:	bd70      	pop	{r4, r5, r6, pc}
			i = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	e7f0      	b.n	800174a <USART2_IRQHandler+0x32>
		str_rx[i] = '\n';
 8001768:	780d      	ldrb	r5, [r1, #0]
 800176a:	4e0e      	ldr	r6, [pc, #56]	@ (80017a4 <USART2_IRQHandler+0x8c>)
 800176c:	5560      	strb	r0, [r4, r5]
		i = 0;
 800176e:	2000      	movs	r0, #0
 8001770:	7008      	strb	r0, [r1, #0]
		if (str_rx[0] == 'S')
 8001772:	7821      	ldrb	r1, [r4, #0]
 8001774:	4d0c      	ldr	r5, [pc, #48]	@ (80017a8 <USART2_IRQHandler+0x90>)
 8001776:	4c0d      	ldr	r4, [pc, #52]	@ (80017ac <USART2_IRQHandler+0x94>)
 8001778:	2953      	cmp	r1, #83	@ 0x53
 800177a:	d103      	bne.n	8001784 <USART2_IRQHandler+0x6c>
			flag_stop = 1;
 800177c:	7033      	strb	r3, [r6, #0]
			flag_move = 0;
 800177e:	7020      	strb	r0, [r4, #0]
			flag_status = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	e007      	b.n	8001794 <USART2_IRQHandler+0x7c>
			flag_stop = 0;
 8001784:	7030      	strb	r0, [r6, #0]
		if (str_rx[0] == 'M')
 8001786:	294d      	cmp	r1, #77	@ 0x4d
 8001788:	d101      	bne.n	800178e <USART2_IRQHandler+0x76>
			flag_move = 1;
 800178a:	7023      	strb	r3, [r4, #0]
		if (str_rx[0] == 'C')
 800178c:	e7f8      	b.n	8001780 <USART2_IRQHandler+0x68>
			flag_move = 0;
 800178e:	7020      	strb	r0, [r4, #0]
		if (str_rx[0] == 'C')
 8001790:	2943      	cmp	r1, #67	@ 0x43
 8001792:	d1f5      	bne.n	8001780 <USART2_IRQHandler+0x68>
			flag_status = 0;
 8001794:	702b      	strb	r3, [r5, #0]
 8001796:	e7d9      	b.n	800174c <USART2_IRQHandler+0x34>
 8001798:	40004400 	.word	0x40004400
 800179c:	20000114 	.word	0x20000114
 80017a0:	200000d9 	.word	0x200000d9
 80017a4:	200000ce 	.word	0x200000ce
 80017a8:	200000cd 	.word	0x200000cd
 80017ac:	200000cc 	.word	0x200000cc

080017b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b0:	b510      	push	{r4, lr}
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b2:	490b      	ldr	r1, [pc, #44]	@ (80017e0 <_sbrk+0x30>)
 80017b4:	4a0b      	ldr	r2, [pc, #44]	@ (80017e4 <_sbrk+0x34>)
{
 80017b6:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ba:	490b      	ldr	r1, [pc, #44]	@ (80017e8 <_sbrk+0x38>)
 80017bc:	6808      	ldr	r0, [r1, #0]
 80017be:	2800      	cmp	r0, #0
 80017c0:	d101      	bne.n	80017c6 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80017c2:	480a      	ldr	r0, [pc, #40]	@ (80017ec <_sbrk+0x3c>)
 80017c4:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	6808      	ldr	r0, [r1, #0]
 80017c8:	18c3      	adds	r3, r0, r3
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d906      	bls.n	80017dc <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80017ce:	f001 fb69 	bl	8002ea4 <__errno>
 80017d2:	230c      	movs	r3, #12
 80017d4:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80017d6:	2001      	movs	r0, #1
 80017d8:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80017da:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80017dc:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 80017de:	e7fc      	b.n	80017da <_sbrk+0x2a>
 80017e0:	00000200 	.word	0x00000200
 80017e4:	20000800 	.word	0x20000800
 80017e8:	20000118 	.word	0x20000118
 80017ec:	20000280 	.word	0x20000280

080017f0 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f0:	4770      	bx	lr
	...

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80017f4:	4813      	ldr	r0, [pc, #76]	@ (8001844 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80017f6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80017f8:	4813      	ldr	r0, [pc, #76]	@ (8001848 <LoopForever+0x6>)
    LDR R1, [R0]
 80017fa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80017fc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80017fe:	4a13      	ldr	r2, [pc, #76]	@ (800184c <LoopForever+0xa>)
    CMP R1, R2
 8001800:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001802:	d105      	bne.n	8001810 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001804:	4812      	ldr	r0, [pc, #72]	@ (8001850 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001806:	4913      	ldr	r1, [pc, #76]	@ (8001854 <LoopForever+0x12>)
    STR R1, [R0]
 8001808:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800180a:	4813      	ldr	r0, [pc, #76]	@ (8001858 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800180c:	4913      	ldr	r1, [pc, #76]	@ (800185c <LoopForever+0x1a>)
    STR R1, [R0]
 800180e:	6001      	str	r1, [r0, #0]

08001810 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001810:	4813      	ldr	r0, [pc, #76]	@ (8001860 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001812:	4914      	ldr	r1, [pc, #80]	@ (8001864 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001814:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <LoopForever+0x26>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001818:	e002      	b.n	8001820 <LoopCopyDataInit>

0800181a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800181c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181e:	3304      	adds	r3, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001824:	d3f9      	bcc.n	800181a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001826:	4a11      	ldr	r2, [pc, #68]	@ (800186c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001828:	4c11      	ldr	r4, [pc, #68]	@ (8001870 <LoopForever+0x2e>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800182c:	e001      	b.n	8001832 <LoopFillZerobss>

0800182e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001830:	3204      	adds	r2, #4

08001832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001834:	d3fb      	bcc.n	800182e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001836:	f7ff ffdb 	bl	80017f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800183a:	f001 fb39 	bl	8002eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183e:	f7ff fc2b 	bl	8001098 <main>

08001842 <LoopForever>:

LoopForever:
    b LoopForever
 8001842:	e7fe      	b.n	8001842 <LoopForever>
   ldr   r0, =_estack
 8001844:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8001848:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800184c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001850:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001854:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001858:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800185c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001868:	08003850 	.word	0x08003850
  ldr r2, =_sbss
 800186c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001870:	20000280 	.word	0x20000280

08001874 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <DMA1_Channel1_IRQHandler>
	...

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b570      	push	{r4, r5, r6, lr}
 800187a:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800187c:	20fa      	movs	r0, #250	@ 0xfa
 800187e:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <HAL_InitTick+0x3c>)
 8001880:	0080      	lsls	r0, r0, #2
 8001882:	7819      	ldrb	r1, [r3, #0]
 8001884:	f7fe fc54 	bl	8000130 <__udivsi3>
 8001888:	4c0b      	ldr	r4, [pc, #44]	@ (80018b8 <HAL_InitTick+0x40>)
 800188a:	0001      	movs	r1, r0
 800188c:	6820      	ldr	r0, [r4, #0]
 800188e:	f7fe fc4f 	bl	8000130 <__udivsi3>
 8001892:	f000 f877 	bl	8001984 <HAL_SYSTICK_Config>
 8001896:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001898:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800189a:	2c00      	cmp	r4, #0
 800189c:	d109      	bne.n	80018b2 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	2d03      	cmp	r5, #3
 80018a0:	d807      	bhi.n	80018b2 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a2:	3802      	subs	r0, #2
 80018a4:	0022      	movs	r2, r4
 80018a6:	0029      	movs	r1, r5
 80018a8:	f000 f842 	bl	8001930 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ac:	0020      	movs	r0, r4
 80018ae:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <HAL_InitTick+0x44>)
 80018b0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80018b2:	bd70      	pop	{r4, r5, r6, pc}
 80018b4:	20000008 	.word	0x20000008
 80018b8:	20000004 	.word	0x20000004
 80018bc:	2000000c 	.word	0x2000000c

080018c0 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80018c0:	2340      	movs	r3, #64	@ 0x40
{
 80018c2:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80018c4:	4a07      	ldr	r2, [pc, #28]	@ (80018e4 <HAL_Init+0x24>)
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018c6:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80018c8:	6811      	ldr	r1, [r2, #0]
 80018ca:	430b      	orrs	r3, r1
 80018cc:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ce:	f7ff ffd3 	bl	8001878 <HAL_InitTick>
 80018d2:	1e04      	subs	r4, r0, #0
 80018d4:	d103      	bne.n	80018de <HAL_Init+0x1e>
    HAL_MspInit();
 80018d6:	f7ff fe83 	bl	80015e0 <HAL_MspInit>
}
 80018da:	0020      	movs	r0, r4
 80018dc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80018de:	2401      	movs	r4, #1
 80018e0:	e7fb      	b.n	80018da <HAL_Init+0x1a>
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	40022000 	.word	0x40022000

080018e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018e8:	4a03      	ldr	r2, [pc, #12]	@ (80018f8 <HAL_IncTick+0x10>)
 80018ea:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <HAL_IncTick+0x14>)
 80018ec:	6811      	ldr	r1, [r2, #0]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	185b      	adds	r3, r3, r1
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	4770      	bx	lr
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	2000011c 	.word	0x2000011c
 80018fc:	20000008 	.word	0x20000008

08001900 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001900:	4b01      	ldr	r3, [pc, #4]	@ (8001908 <HAL_GetTick+0x8>)
 8001902:	6818      	ldr	r0, [r3, #0]
}
 8001904:	4770      	bx	lr
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	2000011c 	.word	0x2000011c

0800190c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800190c:	b570      	push	{r4, r5, r6, lr}
 800190e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff fff6 	bl	8001900 <HAL_GetTick>
 8001914:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001916:	1c63      	adds	r3, r4, #1
 8001918:	d002      	beq.n	8001920 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b04      	ldr	r3, [pc, #16]	@ (800192c <HAL_Delay+0x20>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001920:	f7ff ffee 	bl	8001900 <HAL_GetTick>
 8001924:	1b40      	subs	r0, r0, r5
 8001926:	42a0      	cmp	r0, r4
 8001928:	d3fa      	bcc.n	8001920 <HAL_Delay+0x14>
  {
  }
}
 800192a:	bd70      	pop	{r4, r5, r6, pc}
 800192c:	20000008 	.word	0x20000008

08001930 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001930:	b510      	push	{r4, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001932:	24ff      	movs	r4, #255	@ 0xff
 8001934:	2203      	movs	r2, #3
 8001936:	000b      	movs	r3, r1
 8001938:	0021      	movs	r1, r4
 800193a:	4002      	ands	r2, r0
 800193c:	00d2      	lsls	r2, r2, #3
 800193e:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001940:	019b      	lsls	r3, r3, #6
 8001942:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001944:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001946:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8001948:	2800      	cmp	r0, #0
 800194a:	db0a      	blt.n	8001962 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800194c:	24c0      	movs	r4, #192	@ 0xc0
 800194e:	4a0b      	ldr	r2, [pc, #44]	@ (800197c <HAL_NVIC_SetPriority+0x4c>)
 8001950:	0880      	lsrs	r0, r0, #2
 8001952:	0080      	lsls	r0, r0, #2
 8001954:	1880      	adds	r0, r0, r2
 8001956:	00a4      	lsls	r4, r4, #2
 8001958:	5902      	ldr	r2, [r0, r4]
 800195a:	400a      	ands	r2, r1
 800195c:	4313      	orrs	r3, r2
 800195e:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001960:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001962:	220f      	movs	r2, #15
 8001964:	4010      	ands	r0, r2
 8001966:	3808      	subs	r0, #8
 8001968:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <HAL_NVIC_SetPriority+0x50>)
 800196a:	0880      	lsrs	r0, r0, #2
 800196c:	0080      	lsls	r0, r0, #2
 800196e:	1880      	adds	r0, r0, r2
 8001970:	69c2      	ldr	r2, [r0, #28]
 8001972:	4011      	ands	r1, r2
 8001974:	4319      	orrs	r1, r3
 8001976:	61c1      	str	r1, [r0, #28]
 8001978:	e7f2      	b.n	8001960 <HAL_NVIC_SetPriority+0x30>
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	e000e100 	.word	0xe000e100
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	2280      	movs	r2, #128	@ 0x80
 8001986:	1e43      	subs	r3, r0, #1
 8001988:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800198c:	4293      	cmp	r3, r2
 800198e:	d20d      	bcs.n	80019ac <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001990:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a07      	ldr	r2, [pc, #28]	@ (80019b0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001994:	4807      	ldr	r0, [pc, #28]	@ (80019b4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001998:	6a03      	ldr	r3, [r0, #32]
 800199a:	0609      	lsls	r1, r1, #24
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	430b      	orrs	r3, r1
 80019a2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80019ac:	4770      	bx	lr
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	e000e010 	.word	0xe000e010
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80019b8:	b530      	push	{r4, r5, lr}
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80019ba:	4a28      	ldr	r2, [pc, #160]	@ (8001a5c <FLASH_SetErrorCode+0xa4>)
 80019bc:	2180      	movs	r1, #128	@ 0x80
 80019be:	6990      	ldr	r0, [r2, #24]
 80019c0:	0049      	lsls	r1, r1, #1
 80019c2:	0003      	movs	r3, r0
 80019c4:	400b      	ands	r3, r1
 80019c6:	4208      	tst	r0, r1
 80019c8:	d005      	beq.n	80019d6 <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	4824      	ldr	r0, [pc, #144]	@ (8001a60 <FLASH_SetErrorCode+0xa8>)
 80019ce:	6944      	ldr	r4, [r0, #20]
 80019d0:	4323      	orrs	r3, r4
 80019d2:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 80019d4:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80019d6:	2080      	movs	r0, #128	@ 0x80
 80019d8:	6991      	ldr	r1, [r2, #24]
 80019da:	0080      	lsls	r0, r0, #2
 80019dc:	4201      	tst	r1, r0
 80019de:	d005      	beq.n	80019ec <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80019e0:	2101      	movs	r1, #1
 80019e2:	4c1f      	ldr	r4, [pc, #124]	@ (8001a60 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 80019e4:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80019e6:	6965      	ldr	r5, [r4, #20]
 80019e8:	4329      	orrs	r1, r5
 80019ea:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80019ec:	2080      	movs	r0, #128	@ 0x80
 80019ee:	6991      	ldr	r1, [r2, #24]
 80019f0:	00c0      	lsls	r0, r0, #3
 80019f2:	4201      	tst	r1, r0
 80019f4:	d005      	beq.n	8001a02 <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80019f6:	2108      	movs	r1, #8
 80019f8:	4c19      	ldr	r4, [pc, #100]	@ (8001a60 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 80019fa:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80019fc:	6965      	ldr	r5, [r4, #20]
 80019fe:	4329      	orrs	r1, r5
 8001a00:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001a02:	2080      	movs	r0, #128	@ 0x80
 8001a04:	6991      	ldr	r1, [r2, #24]
 8001a06:	0100      	lsls	r0, r0, #4
 8001a08:	4201      	tst	r1, r0
 8001a0a:	d005      	beq.n	8001a18 <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	4c14      	ldr	r4, [pc, #80]	@ (8001a60 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8001a10:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001a12:	6965      	ldr	r5, [r4, #20]
 8001a14:	4329      	orrs	r1, r5
 8001a16:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8001a18:	2080      	movs	r0, #128	@ 0x80
 8001a1a:	6991      	ldr	r1, [r2, #24]
 8001a1c:	0180      	lsls	r0, r0, #6
 8001a1e:	4201      	tst	r1, r0
 8001a20:	d005      	beq.n	8001a2e <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001a22:	2110      	movs	r1, #16
 8001a24:	4c0e      	ldr	r4, [pc, #56]	@ (8001a60 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 8001a26:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001a28:	6965      	ldr	r5, [r4, #20]
 8001a2a:	4329      	orrs	r1, r5
 8001a2c:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8001a2e:	6991      	ldr	r1, [r2, #24]
 8001a30:	0389      	lsls	r1, r1, #14
 8001a32:	d505      	bpl.n	8001a40 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8001a34:	2020      	movs	r0, #32
 8001a36:	4c0a      	ldr	r4, [pc, #40]	@ (8001a60 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 8001a38:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8001a3a:	6961      	ldr	r1, [r4, #20]
 8001a3c:	4301      	orrs	r1, r0
 8001a3e:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8001a40:	2080      	movs	r0, #128	@ 0x80
 8001a42:	6991      	ldr	r1, [r2, #24]
 8001a44:	0240      	lsls	r0, r0, #9
 8001a46:	4201      	tst	r1, r0
 8001a48:	d005      	beq.n	8001a56 <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8001a4a:	2140      	movs	r1, #64	@ 0x40
 8001a4c:	4c04      	ldr	r4, [pc, #16]	@ (8001a60 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 8001a4e:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8001a50:	6965      	ldr	r5, [r4, #20]
 8001a52:	4329      	orrs	r1, r5
 8001a54:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a56:	6193      	str	r3, [r2, #24]
}  
 8001a58:	bd30      	pop	{r4, r5, pc}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	40022000 	.word	0x40022000
 8001a60:	20000120 	.word	0x20000120

08001a64 <FLASH_WaitForLastOperation>:
{
 8001a64:	b570      	push	{r4, r5, r6, lr}
 8001a66:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff ff4a 	bl	8001900 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001a6c:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8001a6e:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001a70:	4b18      	ldr	r3, [pc, #96]	@ (8001ad4 <FLASH_WaitForLastOperation+0x70>)
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	4232      	tst	r2, r6
 8001a76:	d121      	bne.n	8001abc <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001a78:	2202      	movs	r2, #2
 8001a7a:	6999      	ldr	r1, [r3, #24]
 8001a7c:	4211      	tst	r1, r2
 8001a7e:	d000      	beq.n	8001a82 <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a80:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8001a82:	699a      	ldr	r2, [r3, #24]
 8001a84:	05d2      	lsls	r2, r2, #23
 8001a86:	d415      	bmi.n	8001ab4 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8001a88:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8001a8a:	0592      	lsls	r2, r2, #22
 8001a8c:	d412      	bmi.n	8001ab4 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8001a8e:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8001a90:	0552      	lsls	r2, r2, #21
 8001a92:	d40f      	bmi.n	8001ab4 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8001a94:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8001a96:	0512      	lsls	r2, r2, #20
 8001a98:	d40c      	bmi.n	8001ab4 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8001a9a:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8001a9c:	0492      	lsls	r2, r2, #18
 8001a9e:	d409      	bmi.n	8001ab4 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8001aa0:	6999      	ldr	r1, [r3, #24]
 8001aa2:	2280      	movs	r2, #128	@ 0x80
 8001aa4:	0008      	movs	r0, r1
 8001aa6:	0292      	lsls	r2, r2, #10
 8001aa8:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8001aaa:	4211      	tst	r1, r2
 8001aac:	d102      	bne.n	8001ab4 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8001aae:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8001ab0:	03db      	lsls	r3, r3, #15
 8001ab2:	d508      	bpl.n	8001ac6 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8001ab4:	f7ff ff80 	bl	80019b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001ab8:	2001      	movs	r0, #1
 8001aba:	e004      	b.n	8001ac6 <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8001abc:	1c62      	adds	r2, r4, #1
 8001abe:	d0d8      	beq.n	8001a72 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ac0:	2c00      	cmp	r4, #0
 8001ac2:	d101      	bne.n	8001ac8 <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 8001ac4:	2003      	movs	r0, #3
}
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ac8:	f7ff ff1a 	bl	8001900 <HAL_GetTick>
 8001acc:	1b40      	subs	r0, r0, r5
 8001ace:	42a0      	cmp	r0, r4
 8001ad0:	d9ce      	bls.n	8001a70 <FLASH_WaitForLastOperation+0xc>
 8001ad2:	e7f7      	b.n	8001ac4 <FLASH_WaitForLastOperation+0x60>
 8001ad4:	40022000 	.word	0x40022000

08001ad8 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 8001adc:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	4211      	tst	r1, r2
 8001ae2:	d00a      	beq.n	8001afa <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ae4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae8:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 8001aea:	4805      	ldr	r0, [pc, #20]	@ (8001b00 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8001aec:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8001aee:	4805      	ldr	r0, [pc, #20]	@ (8001b04 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8001af0:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001af2:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8001af6:	6858      	ldr	r0, [r3, #4]
 8001af8:	4010      	ands	r0, r2
}
 8001afa:	4770      	bx	lr
 8001afc:	40022000 	.word	0x40022000
 8001b00:	89abcdef 	.word	0x89abcdef
 8001b04:	02030405 	.word	0x02030405

08001b08 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001b08:	2301      	movs	r3, #1
 8001b0a:	4a03      	ldr	r2, [pc, #12]	@ (8001b18 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 8001b0c:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001b0e:	6851      	ldr	r1, [r2, #4]
 8001b10:	430b      	orrs	r3, r1
 8001b12:	6053      	str	r3, [r2, #4]
}
 8001b14:	4770      	bx	lr
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	40022000 	.word	0x40022000

08001b1c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8001b1c:	b510      	push	{r4, lr}
 8001b1e:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b20:	4805      	ldr	r0, [pc, #20]	@ (8001b38 <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 8001b22:	f7ff ff9f 	bl	8001a64 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8001b26:	2800      	cmp	r0, #0
 8001b28:	d105      	bne.n	8001b36 <HAL_FLASHEx_DATAEEPROM_Erase+0x1a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b2a:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <HAL_FLASHEx_DATAEEPROM_Erase+0x20>)
 8001b2c:	6158      	str	r0, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8001b2e:	6020      	str	r0, [r4, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b30:	4801      	ldr	r0, [pc, #4]	@ (8001b38 <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 8001b32:	f7ff ff97 	bl	8001a64 <FLASH_WaitForLastOperation>
  }
   
  /* Return the erase status */
  return status;
}  
 8001b36:	bd10      	pop	{r4, pc}
 8001b38:	0000c350 	.word	0x0000c350
 8001b3c:	20000120 	.word	0x20000120

08001b40 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8001b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b42:	4f12      	ldr	r7, [pc, #72]	@ (8001b8c <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 8001b44:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8001b46:	7c3b      	ldrb	r3, [r7, #16]
{
 8001b48:	000d      	movs	r5, r1
 8001b4a:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d00c      	beq.n	8001b6c <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 8001b52:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b54:	480e      	ldr	r0, [pc, #56]	@ (8001b90 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 8001b56:	743b      	strb	r3, [r7, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b58:	f7ff ff84 	bl	8001a64 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d103      	bne.n	8001b68 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b60:	6178      	str	r0, [r7, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8001b62:	2e02      	cmp	r6, #2
 8001b64:	d103      	bne.n	8001b6e <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8001b66:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	743b      	strb	r3, [r7, #16]

  return status;
}
 8001b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8001b6e:	2e01      	cmp	r6, #1
 8001b70:	d102      	bne.n	8001b78 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8001b72:	b2a4      	uxth	r4, r4
 8001b74:	802c      	strh	r4, [r5, #0]
 8001b76:	e7f7      	b.n	8001b68 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8001b78:	2e00      	cmp	r6, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b7c:	4804      	ldr	r0, [pc, #16]	@ (8001b90 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 8001b7e:	f7ff ff71 	bl	8001a64 <FLASH_WaitForLastOperation>
 8001b82:	e7f1      	b.n	8001b68 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8001b84:	b2e4      	uxtb	r4, r4
 8001b86:	702c      	strb	r4, [r5, #0]
 8001b88:	e7ee      	b.n	8001b68 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	20000120 	.word	0x20000120
 8001b90:	0000c350 	.word	0x0000c350

08001b94 <HAL_GPIO_Init>:
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b94:	2203      	movs	r2, #3
  uint32_t position = 0x00U;
 8001b96:	2300      	movs	r3, #0
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b98:	4694      	mov	ip, r2
{
 8001b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9c:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b9e:	680a      	ldr	r2, [r1, #0]
 8001ba0:	0014      	movs	r4, r2
 8001ba2:	40dc      	lsrs	r4, r3
 8001ba4:	d101      	bne.n	8001baa <HAL_GPIO_Init+0x16>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8001ba6:	b005      	add	sp, #20
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001baa:	2401      	movs	r4, #1
 8001bac:	0015      	movs	r5, r2
 8001bae:	409c      	lsls	r4, r3
 8001bb0:	4025      	ands	r5, r4
 8001bb2:	9501      	str	r5, [sp, #4]
    if (iocurrent)
 8001bb4:	4222      	tst	r2, r4
 8001bb6:	d100      	bne.n	8001bba <HAL_GPIO_Init+0x26>
 8001bb8:	e092      	b.n	8001ce0 <HAL_GPIO_Init+0x14c>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bba:	4665      	mov	r5, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bbc:	4666      	mov	r6, ip
 8001bbe:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bc0:	40bd      	lsls	r5, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bc2:	684a      	ldr	r2, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bc4:	43ed      	mvns	r5, r5
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bc6:	4032      	ands	r2, r6
 8001bc8:	3a01      	subs	r2, #1
 8001bca:	2a01      	cmp	r2, #1
 8001bcc:	d80f      	bhi.n	8001bee <HAL_GPIO_Init+0x5a>
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bce:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8001bd0:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd2:	40ba      	lsls	r2, r7
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bd4:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd6:	4332      	orrs	r2, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd8:	2601      	movs	r6, #1
        GPIOx->OSPEEDR = temp;
 8001bda:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8001bdc:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bde:	43a2      	bics	r2, r4
 8001be0:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be2:	684a      	ldr	r2, [r1, #4]
 8001be4:	0912      	lsrs	r2, r2, #4
 8001be6:	4032      	ands	r2, r6
 8001be8:	409a      	lsls	r2, r3
 8001bea:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001bec:	6042      	str	r2, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bee:	4664      	mov	r4, ip
 8001bf0:	684a      	ldr	r2, [r1, #4]
 8001bf2:	4022      	ands	r2, r4
 8001bf4:	2a03      	cmp	r2, #3
 8001bf6:	d01e      	beq.n	8001c36 <HAL_GPIO_Init+0xa2>
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf8:	688a      	ldr	r2, [r1, #8]
        temp = GPIOx->PUPDR;
 8001bfa:	68c4      	ldr	r4, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfc:	40ba      	lsls	r2, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bfe:	402c      	ands	r4, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c00:	4322      	orrs	r2, r4
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c02:	4664      	mov	r4, ip
        GPIOx->PUPDR = temp;
 8001c04:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c06:	684a      	ldr	r2, [r1, #4]
 8001c08:	4022      	ands	r2, r4
 8001c0a:	2a02      	cmp	r2, #2
 8001c0c:	d113      	bne.n	8001c36 <HAL_GPIO_Init+0xa2>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c0e:	2407      	movs	r4, #7
 8001c10:	260f      	movs	r6, #15
 8001c12:	401c      	ands	r4, r3
 8001c14:	00a4      	lsls	r4, r4, #2
 8001c16:	40a6      	lsls	r6, r4
        temp = GPIOx->AFR[position >> 3U];
 8001c18:	08da      	lsrs	r2, r3, #3
 8001c1a:	0092      	lsls	r2, r2, #2
 8001c1c:	1882      	adds	r2, r0, r2
 8001c1e:	9202      	str	r2, [sp, #8]
 8001c20:	6a12      	ldr	r2, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c22:	9603      	str	r6, [sp, #12]
 8001c24:	0016      	movs	r6, r2
 8001c26:	9a03      	ldr	r2, [sp, #12]
 8001c28:	4396      	bics	r6, r2
 8001c2a:	0032      	movs	r2, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c2c:	690e      	ldr	r6, [r1, #16]
 8001c2e:	40a6      	lsls	r6, r4
 8001c30:	4316      	orrs	r6, r2
        GPIOx->AFR[position >> 3U] = temp;
 8001c32:	9a02      	ldr	r2, [sp, #8]
 8001c34:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8001c36:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c38:	684a      	ldr	r2, [r1, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c3a:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c3c:	4665      	mov	r5, ip
 8001c3e:	402a      	ands	r2, r5
 8001c40:	40ba      	lsls	r2, r7
 8001c42:	4322      	orrs	r2, r4
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c44:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8001c46:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c48:	684a      	ldr	r2, [r1, #4]
 8001c4a:	02a4      	lsls	r4, r4, #10
 8001c4c:	4222      	tst	r2, r4
 8001c4e:	d047      	beq.n	8001ce0 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c50:	2501      	movs	r5, #1
 8001c52:	4c24      	ldr	r4, [pc, #144]	@ (8001ce4 <HAL_GPIO_Init+0x150>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c54:	27a0      	movs	r7, #160	@ 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c58:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	432a      	orrs	r2, r5
 8001c5c:	6362      	str	r2, [r4, #52]	@ 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001c5e:	4665      	mov	r5, ip
 8001c60:	4a21      	ldr	r2, [pc, #132]	@ (8001ce8 <HAL_GPIO_Init+0x154>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c62:	089c      	lsrs	r4, r3, #2
 8001c64:	00a4      	lsls	r4, r4, #2
 8001c66:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001c68:	220f      	movs	r2, #15
 8001c6a:	401d      	ands	r5, r3
 8001c6c:	00ad      	lsls	r5, r5, #2
 8001c6e:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c70:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001c72:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c74:	2200      	movs	r2, #0
 8001c76:	42b8      	cmp	r0, r7
 8001c78:	d008      	beq.n	8001c8c <HAL_GPIO_Init+0xf8>
 8001c7a:	4f1c      	ldr	r7, [pc, #112]	@ (8001cec <HAL_GPIO_Init+0x158>)
 8001c7c:	3201      	adds	r2, #1
 8001c7e:	42b8      	cmp	r0, r7
 8001c80:	d004      	beq.n	8001c8c <HAL_GPIO_Init+0xf8>
 8001c82:	4f1b      	ldr	r7, [pc, #108]	@ (8001cf0 <HAL_GPIO_Init+0x15c>)
 8001c84:	3205      	adds	r2, #5
 8001c86:	42b8      	cmp	r0, r7
 8001c88:	d100      	bne.n	8001c8c <HAL_GPIO_Init+0xf8>
 8001c8a:	3a04      	subs	r2, #4
 8001c8c:	40aa      	lsls	r2, r5
 8001c8e:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c90:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8001c92:	4a18      	ldr	r2, [pc, #96]	@ (8001cf4 <HAL_GPIO_Init+0x160>)
        temp &= ~((uint32_t)iocurrent);
 8001c94:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8001c96:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001c98:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c9a:	684f      	ldr	r7, [r1, #4]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001c9e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca0:	03ff      	lsls	r7, r7, #15
 8001ca2:	d401      	bmi.n	8001ca8 <HAL_GPIO_Init+0x114>
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	0035      	movs	r5, r6
 8001ca6:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8001ca8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001caa:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001cac:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cae:	684f      	ldr	r7, [r1, #4]
          temp |= iocurrent;
 8001cb0:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cb2:	03bf      	lsls	r7, r7, #14
 8001cb4:	d401      	bmi.n	8001cba <HAL_GPIO_Init+0x126>
        temp &= ~((uint32_t)iocurrent);
 8001cb6:	0035      	movs	r5, r6
 8001cb8:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8001cba:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001cbc:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8001cbe:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc0:	684f      	ldr	r7, [r1, #4]
          temp |= iocurrent;
 8001cc2:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc4:	02ff      	lsls	r7, r7, #11
 8001cc6:	d401      	bmi.n	8001ccc <HAL_GPIO_Init+0x138>
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	0035      	movs	r5, r6
 8001cca:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8001ccc:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001cce:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8001cd0:	9f01      	ldr	r7, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd2:	684e      	ldr	r6, [r1, #4]
          temp |= iocurrent;
 8001cd4:	432f      	orrs	r7, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd6:	02b6      	lsls	r6, r6, #10
 8001cd8:	d401      	bmi.n	8001cde <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 8001cda:	4025      	ands	r5, r4
 8001cdc:	002f      	movs	r7, r5
        EXTI->FTSR = temp;
 8001cde:	60d7      	str	r7, [r2, #12]
    position++;
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	e75c      	b.n	8001b9e <HAL_GPIO_Init+0xa>
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	50000400 	.word	0x50000400
 8001cf0:	50000800 	.word	0x50000800
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cf8:	6900      	ldr	r0, [r0, #16]
 8001cfa:	4008      	ands	r0, r1
 8001cfc:	1e43      	subs	r3, r0, #1
 8001cfe:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001d00:	b2c0      	uxtb	r0, r0
}
 8001d02:	4770      	bx	lr

08001d04 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d04:	6803      	ldr	r3, [r0, #0]
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	0792      	lsls	r2, r2, #30
 8001d0a:	d501      	bpl.n	8001d10 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d10:	2301      	movs	r3, #1
 8001d12:	6802      	ldr	r2, [r0, #0]
 8001d14:	6991      	ldr	r1, [r2, #24]
 8001d16:	4219      	tst	r1, r3
 8001d18:	d102      	bne.n	8001d20 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d1a:	6991      	ldr	r1, [r2, #24]
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	6193      	str	r3, [r2, #24]
  }
}
 8001d20:	4770      	bx	lr
	...

08001d24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d24:	b530      	push	{r4, r5, lr}
 8001d26:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001d28:	0412      	lsls	r2, r2, #16
 8001d2a:	6800      	ldr	r0, [r0, #0]
 8001d2c:	4322      	orrs	r2, r4
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <I2C_TransferConfig+0x24>)
 8001d32:	6845      	ldr	r5, [r0, #4]
 8001d34:	0d64      	lsrs	r4, r4, #21
 8001d36:	0589      	lsls	r1, r1, #22
 8001d38:	0d89      	lsrs	r1, r1, #22
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	439d      	bics	r5, r3
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	432a      	orrs	r2, r5
 8001d42:	6042      	str	r2, [r0, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001d44:	bd30      	pop	{r4, r5, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	03ff63ff 	.word	0x03ff63ff

08001d4c <I2C_IsAcknowledgeFailed>:
{
 8001d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d4e:	6803      	ldr	r3, [r0, #0]
{
 8001d50:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d52:	699a      	ldr	r2, [r3, #24]
{
 8001d54:	0004      	movs	r4, r0
 8001d56:	000d      	movs	r5, r1
  return HAL_OK;
 8001d58:	2000      	movs	r0, #0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d5a:	06d2      	lsls	r2, r2, #27
 8001d5c:	d536      	bpl.n	8001dcc <I2C_IsAcknowledgeFailed+0x80>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	0192      	lsls	r2, r2, #6
 8001d62:	d404      	bmi.n	8001d6e <I2C_IsAcknowledgeFailed+0x22>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d64:	2280      	movs	r2, #128	@ 0x80
 8001d66:	6859      	ldr	r1, [r3, #4]
 8001d68:	01d2      	lsls	r2, r2, #7
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d6e:	2720      	movs	r7, #32
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	423a      	tst	r2, r7
 8001d76:	d013      	beq.n	8001da0 <I2C_IsAcknowledgeFailed+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d78:	2210      	movs	r2, #16
 8001d7a:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d7c:	6823      	ldr	r3, [r4, #0]
    I2C_Flush_TXDR(hi2c);
 8001d7e:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d80:	61df      	str	r7, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001d82:	f7ff ffbf 	bl	8001d04 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001d86:	6822      	ldr	r2, [r4, #0]
 8001d88:	4911      	ldr	r1, [pc, #68]	@ (8001dd0 <I2C_IsAcknowledgeFailed+0x84>)
 8001d8a:	6853      	ldr	r3, [r2, #4]
 8001d8c:	400b      	ands	r3, r1
 8001d8e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d90:	2304      	movs	r3, #4
 8001d92:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001d94:	4313      	orrs	r3, r2
 8001d96:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d98:	0023      	movs	r3, r4
 8001d9a:	3341      	adds	r3, #65	@ 0x41
 8001d9c:	701f      	strb	r7, [r3, #0]
 8001d9e:	e00f      	b.n	8001dc0 <I2C_IsAcknowledgeFailed+0x74>
      if (Timeout != HAL_MAX_DELAY)
 8001da0:	1c6a      	adds	r2, r5, #1
 8001da2:	d0e6      	beq.n	8001d72 <I2C_IsAcknowledgeFailed+0x26>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da4:	f7ff fdac 	bl	8001900 <HAL_GetTick>
 8001da8:	1b80      	subs	r0, r0, r6
 8001daa:	4285      	cmp	r5, r0
 8001dac:	d301      	bcc.n	8001db2 <I2C_IsAcknowledgeFailed+0x66>
 8001dae:	2d00      	cmp	r5, #0
 8001db0:	d1de      	bne.n	8001d70 <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001db2:	2220      	movs	r2, #32
 8001db4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001db6:	4313      	orrs	r3, r2
 8001db8:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	0023      	movs	r3, r4
 8001dbc:	3341      	adds	r3, #65	@ 0x41
 8001dbe:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	705a      	strb	r2, [r3, #1]
    __HAL_UNLOCK(hi2c);
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	3440      	adds	r4, #64	@ 0x40
 8001dca:	7023      	strb	r3, [r4, #0]
}
 8001dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	fe00e800 	.word	0xfe00e800

08001dd4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd6:	0004      	movs	r4, r0
 8001dd8:	000d      	movs	r5, r1
 8001dda:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ddc:	2702      	movs	r7, #2
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	423b      	tst	r3, r7
 8001de4:	d001      	beq.n	8001dea <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8001de6:	2000      	movs	r0, #0
 8001de8:	e01d      	b.n	8001e26 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dea:	0032      	movs	r2, r6
 8001dec:	0029      	movs	r1, r5
 8001dee:	0020      	movs	r0, r4
 8001df0:	f7ff ffac 	bl	8001d4c <I2C_IsAcknowledgeFailed>
 8001df4:	2800      	cmp	r0, #0
 8001df6:	d115      	bne.n	8001e24 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001df8:	1c6b      	adds	r3, r5, #1
 8001dfa:	d0f0      	beq.n	8001dde <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfc:	f7ff fd80 	bl	8001900 <HAL_GetTick>
 8001e00:	1b80      	subs	r0, r0, r6
 8001e02:	42a8      	cmp	r0, r5
 8001e04:	d801      	bhi.n	8001e0a <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8001e06:	2d00      	cmp	r5, #0
 8001e08:	d1e9      	bne.n	8001dde <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e12:	0023      	movs	r3, r4
 8001e14:	3341      	adds	r3, #65	@ 0x41
 8001e16:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	0022      	movs	r2, r4
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	3242      	adds	r2, #66	@ 0x42
        __HAL_UNLOCK(hi2c);
 8001e1e:	3440      	adds	r4, #64	@ 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e20:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8001e22:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8001e24:	2001      	movs	r0, #1
}
 8001e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e28 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	0004      	movs	r4, r0
 8001e2c:	000d      	movs	r5, r1
 8001e2e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e30:	2720      	movs	r7, #32
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	423b      	tst	r3, r7
 8001e38:	d001      	beq.n	8001e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	e01b      	b.n	8001e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e3e:	0032      	movs	r2, r6
 8001e40:	0029      	movs	r1, r5
 8001e42:	0020      	movs	r0, r4
 8001e44:	f7ff ff82 	bl	8001d4c <I2C_IsAcknowledgeFailed>
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	d113      	bne.n	8001e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e4c:	f7ff fd58 	bl	8001900 <HAL_GetTick>
 8001e50:	1b80      	subs	r0, r0, r6
 8001e52:	42a8      	cmp	r0, r5
 8001e54:	d801      	bhi.n	8001e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8001e56:	2d00      	cmp	r5, #0
 8001e58:	d1eb      	bne.n	8001e32 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e62:	0023      	movs	r3, r4
 8001e64:	3341      	adds	r3, #65	@ 0x41
 8001e66:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e68:	0022      	movs	r2, r4
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	3242      	adds	r2, #66	@ 0x42
      __HAL_UNLOCK(hi2c);
 8001e6e:	3440      	adds	r4, #64	@ 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8001e72:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8001e74:	2001      	movs	r0, #1
}
 8001e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e78 <I2C_WaitOnFlagUntilTimeout>:
{
 8001e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7a:	0004      	movs	r4, r0
 8001e7c:	000e      	movs	r6, r1
 8001e7e:	0017      	movs	r7, r2
 8001e80:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e82:	6822      	ldr	r2, [r4, #0]
 8001e84:	6993      	ldr	r3, [r2, #24]
 8001e86:	4033      	ands	r3, r6
 8001e88:	1b9b      	subs	r3, r3, r6
 8001e8a:	4259      	negs	r1, r3
 8001e8c:	414b      	adcs	r3, r1
 8001e8e:	42bb      	cmp	r3, r7
 8001e90:	d001      	beq.n	8001e96 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001e92:	2000      	movs	r0, #0
 8001e94:	e017      	b.n	8001ec6 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8001e96:	1c6b      	adds	r3, r5, #1
 8001e98:	d0f4      	beq.n	8001e84 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9a:	f7ff fd31 	bl	8001900 <HAL_GetTick>
 8001e9e:	9b06      	ldr	r3, [sp, #24]
 8001ea0:	1ac0      	subs	r0, r0, r3
 8001ea2:	42a8      	cmp	r0, r5
 8001ea4:	d801      	bhi.n	8001eaa <I2C_WaitOnFlagUntilTimeout+0x32>
 8001ea6:	2d00      	cmp	r5, #0
 8001ea8:	d1eb      	bne.n	8001e82 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eaa:	2220      	movs	r2, #32
 8001eac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001eae:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001eb4:	0023      	movs	r3, r4
 8001eb6:	3341      	adds	r3, #65	@ 0x41
 8001eb8:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eba:	0022      	movs	r2, r4
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	3242      	adds	r2, #66	@ 0x42
        __HAL_UNLOCK(hi2c);
 8001ec0:	3440      	adds	r4, #64	@ 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec2:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8001ec4:	7023      	strb	r3, [r4, #0]
}
 8001ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ec8 <HAL_I2C_Init>:
{
 8001ec8:	b570      	push	{r4, r5, r6, lr}
 8001eca:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001ecc:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001ece:	2c00      	cmp	r4, #0
 8001ed0:	d04e      	beq.n	8001f70 <HAL_I2C_Init+0xa8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ed2:	0025      	movs	r5, r4
 8001ed4:	3541      	adds	r5, #65	@ 0x41
 8001ed6:	782b      	ldrb	r3, [r5, #0]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d105      	bne.n	8001eea <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8001ede:	0023      	movs	r3, r4
 8001ee0:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8001ee2:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8001ee4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8001ee6:	f7ff fb89 	bl	80015fc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eea:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001eec:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eee:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001ef0:	6822      	ldr	r2, [r4, #0]
 8001ef2:	6813      	ldr	r3, [r2, #0]
 8001ef4:	438b      	bics	r3, r1
 8001ef6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ef8:	6863      	ldr	r3, [r4, #4]
 8001efa:	491f      	ldr	r1, [pc, #124]	@ (8001f78 <HAL_I2C_Init+0xb0>)
 8001efc:	6822      	ldr	r2, [r4, #0]
 8001efe:	400b      	ands	r3, r1
 8001f00:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f02:	6821      	ldr	r1, [r4, #0]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	@ (8001f7c <HAL_I2C_Init+0xb4>)
 8001f06:	688b      	ldr	r3, [r1, #8]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f0c:	68e3      	ldr	r3, [r4, #12]
 8001f0e:	6821      	ldr	r1, [r4, #0]
 8001f10:	68a0      	ldr	r0, [r4, #8]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d12d      	bne.n	8001f72 <HAL_I2C_Init+0xaa>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f16:	2380      	movs	r3, #128	@ 0x80
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	4303      	orrs	r3, r0
 8001f1c:	608b      	str	r3, [r1, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f1e:	68e3      	ldr	r3, [r4, #12]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d103      	bne.n	8001f2c <HAL_I2C_Init+0x64>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f24:	2180      	movs	r1, #128	@ 0x80
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	0109      	lsls	r1, r1, #4
 8001f2a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f2c:	6821      	ldr	r1, [r4, #0]
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_I2C_Init+0xb8>)
 8001f30:	6848      	ldr	r0, [r1, #4]
 8001f32:	4303      	orrs	r3, r0
 8001f34:	604b      	str	r3, [r1, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f36:	6821      	ldr	r1, [r4, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f38:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f3a:	68cb      	ldr	r3, [r1, #12]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f40:	6962      	ldr	r2, [r4, #20]
 8001f42:	6923      	ldr	r3, [r4, #16]
 8001f44:	6821      	ldr	r1, [r4, #0]
 8001f46:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f48:	69a2      	ldr	r2, [r4, #24]
 8001f4a:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f50:	6a21      	ldr	r1, [r4, #32]
 8001f52:	69e3      	ldr	r3, [r4, #28]
 8001f54:	6822      	ldr	r2, [r4, #0]
 8001f56:	430b      	orrs	r3, r1
 8001f58:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	6822      	ldr	r2, [r4, #0]
 8001f5e:	6811      	ldr	r1, [r2, #0]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001f64:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f66:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f68:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f6a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6c:	3442      	adds	r4, #66	@ 0x42
 8001f6e:	7020      	strb	r0, [r4, #0]
}
 8001f70:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f72:	2384      	movs	r3, #132	@ 0x84
 8001f74:	e7d0      	b.n	8001f18 <HAL_I2C_Init+0x50>
 8001f76:	46c0      	nop			@ (mov r8, r8)
 8001f78:	f0ffffff 	.word	0xf0ffffff
 8001f7c:	ffff7fff 	.word	0xffff7fff
 8001f80:	02008000 	.word	0x02008000

08001f84 <HAL_I2C_Master_Transmit>:
{
 8001f84:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f86:	0006      	movs	r6, r0
{
 8001f88:	b085      	sub	sp, #20
 8001f8a:	9202      	str	r2, [sp, #8]
 8001f8c:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f8e:	3641      	adds	r6, #65	@ 0x41
 8001f90:	7833      	ldrb	r3, [r6, #0]
{
 8001f92:	0004      	movs	r4, r0
 8001f94:	000f      	movs	r7, r1
    __HAL_LOCK(hi2c);
 8001f96:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d114      	bne.n	8001fc6 <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8001f9c:	0023      	movs	r3, r4
 8001f9e:	3340      	adds	r3, #64	@ 0x40
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	2a01      	cmp	r2, #1
 8001fa4:	d00f      	beq.n	8001fc6 <HAL_I2C_Master_Transmit+0x42>
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001faa:	f7ff fca9 	bl	8001900 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fae:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8001fb0:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fb2:	9000      	str	r0, [sp, #0]
 8001fb4:	2319      	movs	r3, #25
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	0020      	movs	r0, r4
 8001fba:	0209      	lsls	r1, r1, #8
 8001fbc:	f7ff ff5c 	bl	8001e78 <I2C_WaitOnFlagUntilTimeout>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d002      	beq.n	8001fca <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8001fc4:	2001      	movs	r0, #1
}
 8001fc6:	b005      	add	sp, #20
 8001fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fca:	2321      	movs	r3, #33	@ 0x21
 8001fcc:	7033      	strb	r3, [r6, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fce:	0026      	movs	r6, r4
 8001fd0:	3b11      	subs	r3, #17
 8001fd2:	3642      	adds	r6, #66	@ 0x42
 8001fd4:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8001fd6:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd8:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001fda:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001fdc:	9b03      	ldr	r3, [sp, #12]
    hi2c->XferISR   = NULL;
 8001fde:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 8001fe0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001fe4:	4b2c      	ldr	r3, [pc, #176]	@ (8002098 <HAL_I2C_Master_Transmit+0x114>)
 8001fe6:	2aff      	cmp	r2, #255	@ 0xff
 8001fe8:	d921      	bls.n	800202e <HAL_I2C_Master_Transmit+0xaa>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fea:	22ff      	movs	r2, #255	@ 0xff
 8001fec:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fee:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ff0:	2380      	movs	r3, #128	@ 0x80
 8001ff2:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ff4:	0039      	movs	r1, r7
 8001ff6:	0020      	movs	r0, r4
 8001ff8:	f7ff fe94 	bl	8001d24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ffc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ffe:	002a      	movs	r2, r5
 8002000:	0020      	movs	r0, r4
 8002002:	990a      	ldr	r1, [sp, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 8002004:	2b00      	cmp	r3, #0
 8002006:	d11a      	bne.n	800203e <HAL_I2C_Master_Transmit+0xba>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002008:	f7ff ff0e 	bl	8001e28 <I2C_WaitOnSTOPFlagUntilTimeout>
 800200c:	2800      	cmp	r0, #0
 800200e:	d1d9      	bne.n	8001fc4 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002010:	2220      	movs	r2, #32
 8002012:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002014:	4d21      	ldr	r5, [pc, #132]	@ (800209c <HAL_I2C_Master_Transmit+0x118>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002016:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002018:	6821      	ldr	r1, [r4, #0]
 800201a:	684b      	ldr	r3, [r1, #4]
 800201c:	402b      	ands	r3, r5
 800201e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002020:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002022:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002024:	3341      	adds	r3, #65	@ 0x41
 8002026:	701a      	strb	r2, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002028:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 800202a:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800202c:	e7cb      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 800202e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002030:	b292      	uxth	r2, r2
 8002032:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	049b      	lsls	r3, r3, #18
 800203c:	e7da      	b.n	8001ff4 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203e:	f7ff fec9 	bl	8001dd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002042:	2800      	cmp	r0, #0
 8002044:	d1be      	bne.n	8001fc4 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002046:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002048:	6823      	ldr	r3, [r4, #0]
 800204a:	7812      	ldrb	r2, [r2, #0]
 800204c:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800204e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002050:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002052:	3301      	adds	r3, #1
 8002054:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002056:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002058:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800205a:	3b01      	subs	r3, #1
 800205c:	b29b      	uxth	r3, r3
 800205e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002060:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002062:	b292      	uxth	r2, r2
 8002064:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0c8      	beq.n	8001ffc <HAL_I2C_Master_Transmit+0x78>
 800206a:	2a00      	cmp	r2, #0
 800206c:	d1c6      	bne.n	8001ffc <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800206e:	2180      	movs	r1, #128	@ 0x80
 8002070:	0020      	movs	r0, r4
 8002072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002074:	9500      	str	r5, [sp, #0]
 8002076:	f7ff feff 	bl	8001e78 <I2C_WaitOnFlagUntilTimeout>
 800207a:	2800      	cmp	r0, #0
 800207c:	d1a2      	bne.n	8001fc4 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800207e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002080:	2bff      	cmp	r3, #255	@ 0xff
 8002082:	d903      	bls.n	800208c <HAL_I2C_Master_Transmit+0x108>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002084:	22ff      	movs	r2, #255	@ 0xff
 8002086:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002088:	9000      	str	r0, [sp, #0]
 800208a:	e7b1      	b.n	8001ff0 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 800208c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800208e:	b292      	uxth	r2, r2
 8002090:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	9000      	str	r0, [sp, #0]
 8002096:	e7cf      	b.n	8002038 <HAL_I2C_Master_Transmit+0xb4>
 8002098:	80002000 	.word	0x80002000
 800209c:	fe00e800 	.word	0xfe00e800

080020a0 <HAL_I2C_IsDeviceReady>:
{
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	001d      	movs	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 80020a4:	2300      	movs	r3, #0
{
 80020a6:	b089      	sub	sp, #36	@ 0x24
  __IO uint32_t I2C_Trials = 0UL;
 80020a8:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020aa:	0003      	movs	r3, r0
{
 80020ac:	9205      	str	r2, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ae:	3341      	adds	r3, #65	@ 0x41
 80020b0:	781a      	ldrb	r2, [r3, #0]
{
 80020b2:	0004      	movs	r4, r0
      return HAL_BUSY;
 80020b4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b6:	2a20      	cmp	r2, #32
 80020b8:	d159      	bne.n	800216e <HAL_I2C_IsDeviceReady+0xce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80020ba:	6822      	ldr	r2, [r4, #0]
 80020bc:	6996      	ldr	r6, [r2, #24]
 80020be:	2280      	movs	r2, #128	@ 0x80
 80020c0:	0037      	movs	r7, r6
 80020c2:	0212      	lsls	r2, r2, #8
 80020c4:	4017      	ands	r7, r2
 80020c6:	4216      	tst	r6, r2
 80020c8:	d151      	bne.n	800216e <HAL_I2C_IsDeviceReady+0xce>
    __HAL_LOCK(hi2c);
 80020ca:	0022      	movs	r2, r4
 80020cc:	3240      	adds	r2, #64	@ 0x40
 80020ce:	7816      	ldrb	r6, [r2, #0]
 80020d0:	2e01      	cmp	r6, #1
 80020d2:	d04c      	beq.n	800216e <HAL_I2C_IsDeviceReady+0xce>
 80020d4:	2601      	movs	r6, #1
 80020d6:	7016      	strb	r6, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020d8:	2224      	movs	r2, #36	@ 0x24
 80020da:	0589      	lsls	r1, r1, #22
 80020dc:	701a      	strb	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020de:	0d8b      	lsrs	r3, r1, #22
 80020e0:	6467      	str	r7, [r4, #68]	@ 0x44
 80020e2:	9304      	str	r3, [sp, #16]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80020e4:	68e3      	ldr	r3, [r4, #12]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d129      	bne.n	800213e <HAL_I2C_IsDeviceReady+0x9e>
 80020ea:	4b38      	ldr	r3, [pc, #224]	@ (80021cc <HAL_I2C_IsDeviceReady+0x12c>)
 80020ec:	9a04      	ldr	r2, [sp, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	6822      	ldr	r2, [r4, #0]
 80020f2:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 80020f4:	f7ff fc04 	bl	8001900 <HAL_GetTick>
 80020f8:	9003      	str	r0, [sp, #12]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80020fa:	6822      	ldr	r2, [r4, #0]
 80020fc:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020fe:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002100:	095b      	lsrs	r3, r3, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002102:	0912      	lsrs	r2, r2, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002104:	4033      	ands	r3, r6
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002106:	4032      	ands	r2, r6
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002108:	4313      	orrs	r3, r2
 800210a:	d01b      	beq.n	8002144 <HAL_I2C_IsDeviceReady+0xa4>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	2710      	movs	r7, #16
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	001a      	movs	r2, r3
 8002114:	403a      	ands	r2, r7
 8002116:	423b      	tst	r3, r7
 8002118:	d12b      	bne.n	8002172 <HAL_I2C_IsDeviceReady+0xd2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800211a:	9b03      	ldr	r3, [sp, #12]
 800211c:	2120      	movs	r1, #32
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	0020      	movs	r0, r4
 8002122:	002b      	movs	r3, r5
 8002124:	f7ff fea8 	bl	8001e78 <I2C_WaitOnFlagUntilTimeout>
 8002128:	2800      	cmp	r0, #0
 800212a:	d11f      	bne.n	800216c <HAL_I2C_IsDeviceReady+0xcc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800212c:	2320      	movs	r3, #32
 800212e:	6822      	ldr	r2, [r4, #0]
 8002130:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8002132:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 8002134:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8002136:	3241      	adds	r2, #65	@ 0x41
 8002138:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800213a:	7020      	strb	r0, [r4, #0]
        return HAL_OK;
 800213c:	e017      	b.n	800216e <HAL_I2C_IsDeviceReady+0xce>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800213e:	23a0      	movs	r3, #160	@ 0xa0
 8002140:	019b      	lsls	r3, r3, #6
 8002142:	e7d3      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x4c>
        if (Timeout != HAL_MAX_DELAY)
 8002144:	1c6b      	adds	r3, r5, #1
 8002146:	d0d8      	beq.n	80020fa <HAL_I2C_IsDeviceReady+0x5a>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002148:	f7ff fbda 	bl	8001900 <HAL_GetTick>
 800214c:	9b03      	ldr	r3, [sp, #12]
 800214e:	1ac0      	subs	r0, r0, r3
 8002150:	42a8      	cmp	r0, r5
 8002152:	d801      	bhi.n	8002158 <HAL_I2C_IsDeviceReady+0xb8>
 8002154:	2d00      	cmp	r5, #0
 8002156:	d1d0      	bne.n	80020fa <HAL_I2C_IsDeviceReady+0x5a>
            hi2c->State = HAL_I2C_STATE_READY;
 8002158:	0022      	movs	r2, r4
 800215a:	2320      	movs	r3, #32
 800215c:	3241      	adds	r2, #65	@ 0x41
 800215e:	7013      	strb	r3, [r2, #0]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002160:	6c62      	ldr	r2, [r4, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 8002162:	3440      	adds	r4, #64	@ 0x40
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002164:	4313      	orrs	r3, r2
 8002166:	6063      	str	r3, [r4, #4]
            __HAL_UNLOCK(hi2c);
 8002168:	2300      	movs	r3, #0
 800216a:	7023      	strb	r3, [r4, #0]
            return HAL_ERROR;
 800216c:	2001      	movs	r0, #1
}
 800216e:	b009      	add	sp, #36	@ 0x24
 8002170:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002172:	9b03      	ldr	r3, [sp, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	2120      	movs	r1, #32
 800217a:	002b      	movs	r3, r5
 800217c:	0020      	movs	r0, r4
 800217e:	f7ff fe7b 	bl	8001e78 <I2C_WaitOnFlagUntilTimeout>
 8002182:	1e02      	subs	r2, r0, #0
 8002184:	d1f2      	bne.n	800216c <HAL_I2C_IsDeviceReady+0xcc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002186:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 8002188:	9905      	ldr	r1, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800218a:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800218c:	2720      	movs	r7, #32
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 8002192:	9b07      	ldr	r3, [sp, #28]
 8002194:	428b      	cmp	r3, r1
 8002196:	d110      	bne.n	80021ba <HAL_I2C_IsDeviceReady+0x11a>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002198:	2380      	movs	r3, #128	@ 0x80
 800219a:	6821      	ldr	r1, [r4, #0]
 800219c:	01db      	lsls	r3, r3, #7
 800219e:	6848      	ldr	r0, [r1, #4]
 80021a0:	4303      	orrs	r3, r0
 80021a2:	604b      	str	r3, [r1, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80021a4:	9b03      	ldr	r3, [sp, #12]
 80021a6:	0039      	movs	r1, r7
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	0020      	movs	r0, r4
 80021ac:	002b      	movs	r3, r5
 80021ae:	f7ff fe63 	bl	8001e78 <I2C_WaitOnFlagUntilTimeout>
 80021b2:	2800      	cmp	r0, #0
 80021b4:	d1da      	bne.n	800216c <HAL_I2C_IsDeviceReady+0xcc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 80021ba:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 80021bc:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 80021be:	3301      	adds	r3, #1
 80021c0:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 80021c2:	9b07      	ldr	r3, [sp, #28]
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d200      	bcs.n	80021ca <HAL_I2C_IsDeviceReady+0x12a>
 80021c8:	e78c      	b.n	80020e4 <HAL_I2C_IsDeviceReady+0x44>
 80021ca:	e7c5      	b.n	8002158 <HAL_I2C_IsDeviceReady+0xb8>
 80021cc:	02002000 	.word	0x02002000

080021d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d2:	0005      	movs	r5, r0
 80021d4:	3541      	adds	r5, #65	@ 0x41
 80021d6:	782a      	ldrb	r2, [r5, #0]
{
 80021d8:	000f      	movs	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021da:	b2d1      	uxtb	r1, r2
{
 80021dc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021de:	9101      	str	r1, [sp, #4]
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e2:	2a20      	cmp	r2, #32
 80021e4:	d11e      	bne.n	8002224 <HAL_I2CEx_ConfigAnalogFilter+0x54>
    __HAL_LOCK(hi2c);
 80021e6:	001c      	movs	r4, r3
 80021e8:	3440      	adds	r4, #64	@ 0x40
 80021ea:	7822      	ldrb	r2, [r4, #0]
 80021ec:	2a01      	cmp	r2, #1
 80021ee:	d019      	beq.n	8002224 <HAL_I2CEx_ConfigAnalogFilter+0x54>
 80021f0:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021f2:	2124      	movs	r1, #36	@ 0x24
    __HAL_LOCK(hi2c);
 80021f4:	7022      	strb	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80021f6:	7029      	strb	r1, [r5, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	6801      	ldr	r1, [r0, #0]
 80021fc:	4391      	bics	r1, r2
 80021fe:	6001      	str	r1, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	6801      	ldr	r1, [r0, #0]
 8002204:	000e      	movs	r6, r1
 8002206:	4908      	ldr	r1, [pc, #32]	@ (8002228 <HAL_I2CEx_ConfigAnalogFilter+0x58>)
 8002208:	400e      	ands	r6, r1
 800220a:	6006      	str	r6, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	6801      	ldr	r1, [r0, #0]
 8002210:	4339      	orrs	r1, r7
 8002212:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002214:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE(hi2c);
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6819      	ldr	r1, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800221e:	9b01      	ldr	r3, [sp, #4]
 8002220:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8002222:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002224:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002226:	46c0      	nop			@ (mov r8, r8)
 8002228:	ffffefff 	.word	0xffffefff

0800222c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800222c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800222e:	0004      	movs	r4, r0
{
 8002230:	9101      	str	r1, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002232:	3441      	adds	r4, #65	@ 0x41
 8002234:	7822      	ldrb	r2, [r4, #0]
{
 8002236:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002238:	b2d5      	uxtb	r5, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800223a:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800223c:	2a20      	cmp	r2, #32
 800223e:	d11b      	bne.n	8002278 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
    __HAL_LOCK(hi2c);
 8002240:	001a      	movs	r2, r3
 8002242:	3240      	adds	r2, #64	@ 0x40
 8002244:	7816      	ldrb	r6, [r2, #0]
 8002246:	2e01      	cmp	r6, #1
 8002248:	d016      	beq.n	8002278 <HAL_I2CEx_ConfigDigitalFilter+0x4c>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800224a:	2624      	movs	r6, #36	@ 0x24
    __HAL_LOCK(hi2c);
 800224c:	3801      	subs	r0, #1
 800224e:	7010      	strb	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002250:	7026      	strb	r6, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002252:	681f      	ldr	r7, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002254:	4909      	ldr	r1, [pc, #36]	@ (800227c <HAL_I2CEx_ConfigDigitalFilter+0x50>)
    __HAL_I2C_DISABLE(hi2c);
 8002256:	683e      	ldr	r6, [r7, #0]
 8002258:	4386      	bics	r6, r0
 800225a:	603e      	str	r6, [r7, #0]
    tmpreg = hi2c->Instance->CR1;
 800225c:	681e      	ldr	r6, [r3, #0]
 800225e:	6837      	ldr	r7, [r6, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002260:	400f      	ands	r7, r1

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002262:	9901      	ldr	r1, [sp, #4]
 8002264:	0209      	lsls	r1, r1, #8
 8002266:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002268:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 800226a:	6819      	ldr	r1, [r3, #0]
 800226c:	680b      	ldr	r3, [r1, #0]
 800226e:	4303      	orrs	r3, r0

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002270:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE(hi2c);
 8002272:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002274:	7025      	strb	r5, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002276:	7010      	strb	r0, [r2, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002278:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	fffff0ff 	.word	0xfffff0ff

08002280 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002280:	220c      	movs	r2, #12
{
 8002282:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8002284:	4b1d      	ldr	r3, [pc, #116]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x7c>)
 8002286:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002288:	4022      	ands	r2, r4
 800228a:	2a08      	cmp	r2, #8
 800228c:	d034      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x78>
 800228e:	2a0c      	cmp	r2, #12
 8002290:	d00c      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x2c>
 8002292:	2a04      	cmp	r2, #4
 8002294:	d128      	bne.n	80022e8 <HAL_RCC_GetSysClockFreq+0x68>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	2310      	movs	r3, #16
 800229a:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800229c:	4243      	negs	r3, r0
 800229e:	4158      	adcs	r0, r3
 80022a0:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x80>)
 80022a2:	4240      	negs	r0, r0
 80022a4:	4018      	ands	r0, r3
 80022a6:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x84>)
 80022a8:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80022aa:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022ac:	02a2      	lsls	r2, r4, #10
 80022ae:	4816      	ldr	r0, [pc, #88]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x88>)
 80022b0:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022b2:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022b4:	2280      	movs	r2, #128	@ 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022b6:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022b8:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022ba:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022bc:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022be:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c0:	4211      	tst	r1, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022c4:	4a11      	ldr	r2, [pc, #68]	@ (800230c <HAL_RCC_GetSysClockFreq+0x8c>)
 80022c6:	2300      	movs	r3, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	f7fe f8c7 	bl	800045c <__aeabi_lmul>
 80022ce:	0022      	movs	r2, r4
 80022d0:	2300      	movs	r3, #0
 80022d2:	f7fe f8a3 	bl	800041c <__aeabi_uldivmod>
 80022d6:	e7e8      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2310      	movs	r3, #16
 80022dc:	421a      	tst	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x64>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80022e0:	4a08      	ldr	r2, [pc, #32]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x84>)
 80022e2:	e7f0      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x46>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <HAL_RCC_GetSysClockFreq+0x90>)
 80022e6:	e7ee      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80022e8:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80022ea:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80022ec:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80022ee:	041b      	lsls	r3, r3, #16
 80022f0:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80022f2:	3301      	adds	r3, #1
 80022f4:	4098      	lsls	r0, r3
      break;
 80022f6:	e7d8      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x2a>
  switch (tmpreg & RCC_CFGR_SWS)
 80022f8:	4804      	ldr	r0, [pc, #16]	@ (800230c <HAL_RCC_GetSysClockFreq+0x8c>)
 80022fa:	e7d6      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x2a>
 80022fc:	40021000 	.word	0x40021000
 8002300:	00b71b00 	.word	0x00b71b00
 8002304:	003d0900 	.word	0x003d0900
 8002308:	080037ea 	.word	0x080037ea
 800230c:	007a1200 	.word	0x007a1200
 8002310:	00f42400 	.word	0x00f42400

08002314 <HAL_RCC_OscConfig>:
{
 8002314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002316:	0005      	movs	r5, r0
 8002318:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 800231a:	2800      	cmp	r0, #0
 800231c:	d056      	beq.n	80023cc <HAL_RCC_OscConfig+0xb8>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231e:	230c      	movs	r3, #12
 8002320:	4cb7      	ldr	r4, [pc, #732]	@ (8002600 <HAL_RCC_OscConfig+0x2ec>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002324:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002326:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002328:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800232a:	2380      	movs	r3, #128	@ 0x80
 800232c:	025b      	lsls	r3, r3, #9
 800232e:	0019      	movs	r1, r3
 8002330:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002332:	07d2      	lsls	r2, r2, #31
 8002334:	d43e      	bmi.n	80023b4 <HAL_RCC_OscConfig+0xa0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	682b      	ldr	r3, [r5, #0]
 8002338:	079b      	lsls	r3, r3, #30
 800233a:	d500      	bpl.n	800233e <HAL_RCC_OscConfig+0x2a>
 800233c:	e088      	b.n	8002450 <HAL_RCC_OscConfig+0x13c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800233e:	682b      	ldr	r3, [r5, #0]
 8002340:	06db      	lsls	r3, r3, #27
 8002342:	d529      	bpl.n	8002398 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002344:	2e00      	cmp	r6, #0
 8002346:	d000      	beq.n	800234a <HAL_RCC_OscConfig+0x36>
 8002348:	e0e1      	b.n	800250e <HAL_RCC_OscConfig+0x1fa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	059b      	lsls	r3, r3, #22
 800234e:	d502      	bpl.n	8002356 <HAL_RCC_OscConfig+0x42>
 8002350:	69ab      	ldr	r3, [r5, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d03a      	beq.n	80023cc <HAL_RCC_OscConfig+0xb8>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002356:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002358:	6863      	ldr	r3, [r4, #4]
 800235a:	4aaa      	ldr	r2, [pc, #680]	@ (8002604 <HAL_RCC_OscConfig+0x2f0>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800235c:	023f      	lsls	r7, r7, #8
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800235e:	4013      	ands	r3, r2
 8002360:	6a2a      	ldr	r2, [r5, #32]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002362:	49a9      	ldr	r1, [pc, #676]	@ (8002608 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002364:	4313      	orrs	r3, r2
 8002366:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002368:	6862      	ldr	r2, [r4, #4]
 800236a:	69eb      	ldr	r3, [r5, #28]
 800236c:	0212      	lsls	r2, r2, #8
 800236e:	0a12      	lsrs	r2, r2, #8
 8002370:	061b      	lsls	r3, r3, #24
 8002372:	4313      	orrs	r3, r2
 8002374:	6063      	str	r3, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002376:	6a2a      	ldr	r2, [r5, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002378:	68e0      	ldr	r0, [r4, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800237a:	0b52      	lsrs	r2, r2, #13
 800237c:	3201      	adds	r2, #1
 800237e:	4097      	lsls	r7, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002380:	0603      	lsls	r3, r0, #24
 8002382:	4aa2      	ldr	r2, [pc, #648]	@ (800260c <HAL_RCC_OscConfig+0x2f8>)
 8002384:	0f1b      	lsrs	r3, r3, #28
 8002386:	5cd3      	ldrb	r3, [r2, r3]
 8002388:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 800238a:	4ba1      	ldr	r3, [pc, #644]	@ (8002610 <HAL_RCC_OscConfig+0x2fc>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800238c:	600f      	str	r7, [r1, #0]
        status = HAL_InitTick (uwTickPrio);
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	f7ff fa72 	bl	8001878 <HAL_InitTick>
        if(status != HAL_OK)
 8002394:	2800      	cmp	r0, #0
 8002396:	d133      	bne.n	8002400 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002398:	682b      	ldr	r3, [r5, #0]
 800239a:	071b      	lsls	r3, r3, #28
 800239c:	d500      	bpl.n	80023a0 <HAL_RCC_OscConfig+0x8c>
 800239e:	e0ed      	b.n	800257c <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a0:	682b      	ldr	r3, [r5, #0]
 80023a2:	075b      	lsls	r3, r3, #29
 80023a4:	d500      	bpl.n	80023a8 <HAL_RCC_OscConfig+0x94>
 80023a6:	e10f      	b.n	80025c8 <HAL_RCC_OscConfig+0x2b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d000      	beq.n	80023b0 <HAL_RCC_OscConfig+0x9c>
 80023ae:	e18f      	b.n	80026d0 <HAL_RCC_OscConfig+0x3bc>
  return HAL_OK;
 80023b0:	2000      	movs	r0, #0
 80023b2:	e025      	b.n	8002400 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b4:	2e08      	cmp	r6, #8
 80023b6:	d003      	beq.n	80023c0 <HAL_RCC_OscConfig+0xac>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023b8:	2e0c      	cmp	r6, #12
 80023ba:	d109      	bne.n	80023d0 <HAL_RCC_OscConfig+0xbc>
 80023bc:	2f00      	cmp	r7, #0
 80023be:	d007      	beq.n	80023d0 <HAL_RCC_OscConfig+0xbc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	039b      	lsls	r3, r3, #14
 80023c4:	d5b7      	bpl.n	8002336 <HAL_RCC_OscConfig+0x22>
 80023c6:	686b      	ldr	r3, [r5, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1b4      	bne.n	8002336 <HAL_RCC_OscConfig+0x22>
    return HAL_ERROR;
 80023cc:	2001      	movs	r0, #1
 80023ce:	e017      	b.n	8002400 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d0:	686a      	ldr	r2, [r5, #4]
 80023d2:	428a      	cmp	r2, r1
 80023d4:	d116      	bne.n	8002404 <HAL_RCC_OscConfig+0xf0>
 80023d6:	6822      	ldr	r2, [r4, #0]
 80023d8:	4313      	orrs	r3, r2
 80023da:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023dc:	686b      	ldr	r3, [r5, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d026      	beq.n	8002430 <HAL_RCC_OscConfig+0x11c>
        tickstart = HAL_GetTick();
 80023e2:	f7ff fa8d 	bl	8001900 <HAL_GetTick>
 80023e6:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023e8:	2280      	movs	r2, #128	@ 0x80
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	0292      	lsls	r2, r2, #10
 80023ee:	4213      	tst	r3, r2
 80023f0:	d1a1      	bne.n	8002336 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f2:	f7ff fa85 	bl	8001900 <HAL_GetTick>
 80023f6:	9b00      	ldr	r3, [sp, #0]
 80023f8:	1ac0      	subs	r0, r0, r3
 80023fa:	2864      	cmp	r0, #100	@ 0x64
 80023fc:	d9f4      	bls.n	80023e8 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 80023fe:	2003      	movs	r0, #3
}
 8002400:	b005      	add	sp, #20
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002404:	21a0      	movs	r1, #160	@ 0xa0
 8002406:	02c9      	lsls	r1, r1, #11
 8002408:	428a      	cmp	r2, r1
 800240a:	d105      	bne.n	8002418 <HAL_RCC_OscConfig+0x104>
 800240c:	2280      	movs	r2, #128	@ 0x80
 800240e:	6821      	ldr	r1, [r4, #0]
 8002410:	02d2      	lsls	r2, r2, #11
 8002412:	430a      	orrs	r2, r1
 8002414:	6022      	str	r2, [r4, #0]
 8002416:	e7de      	b.n	80023d6 <HAL_RCC_OscConfig+0xc2>
 8002418:	6822      	ldr	r2, [r4, #0]
 800241a:	497e      	ldr	r1, [pc, #504]	@ (8002614 <HAL_RCC_OscConfig+0x300>)
 800241c:	400a      	ands	r2, r1
 800241e:	6022      	str	r2, [r4, #0]
 8002420:	6822      	ldr	r2, [r4, #0]
 8002422:	4013      	ands	r3, r2
 8002424:	9303      	str	r3, [sp, #12]
 8002426:	9b03      	ldr	r3, [sp, #12]
 8002428:	4a7b      	ldr	r2, [pc, #492]	@ (8002618 <HAL_RCC_OscConfig+0x304>)
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	4013      	ands	r3, r2
 800242e:	e7d4      	b.n	80023da <HAL_RCC_OscConfig+0xc6>
        tickstart = HAL_GetTick();
 8002430:	f7ff fa66 	bl	8001900 <HAL_GetTick>
 8002434:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002436:	2280      	movs	r2, #128	@ 0x80
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	0292      	lsls	r2, r2, #10
 800243c:	4213      	tst	r3, r2
 800243e:	d100      	bne.n	8002442 <HAL_RCC_OscConfig+0x12e>
 8002440:	e779      	b.n	8002336 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002442:	f7ff fa5d 	bl	8001900 <HAL_GetTick>
 8002446:	9b00      	ldr	r3, [sp, #0]
 8002448:	1ac0      	subs	r0, r0, r3
 800244a:	2864      	cmp	r0, #100	@ 0x64
 800244c:	d9f3      	bls.n	8002436 <HAL_RCC_OscConfig+0x122>
 800244e:	e7d6      	b.n	80023fe <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002450:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8002452:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002454:	4213      	tst	r3, r2
 8002456:	d003      	beq.n	8002460 <HAL_RCC_OscConfig+0x14c>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002458:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800245a:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800245c:	4311      	orrs	r1, r2
 800245e:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002460:	2e04      	cmp	r6, #4
 8002462:	d003      	beq.n	800246c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002464:	2e0c      	cmp	r6, #12
 8002466:	d124      	bne.n	80024b2 <HAL_RCC_OscConfig+0x19e>
 8002468:	2f00      	cmp	r7, #0
 800246a:	d122      	bne.n	80024b2 <HAL_RCC_OscConfig+0x19e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800246c:	6822      	ldr	r2, [r4, #0]
 800246e:	0752      	lsls	r2, r2, #29
 8002470:	d501      	bpl.n	8002476 <HAL_RCC_OscConfig+0x162>
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0aa      	beq.n	80023cc <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002476:	6861      	ldr	r1, [r4, #4]
 8002478:	692a      	ldr	r2, [r5, #16]
 800247a:	4868      	ldr	r0, [pc, #416]	@ (800261c <HAL_RCC_OscConfig+0x308>)
 800247c:	0212      	lsls	r2, r2, #8
 800247e:	4001      	ands	r1, r0
 8002480:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002482:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002486:	6822      	ldr	r2, [r4, #0]
 8002488:	438a      	bics	r2, r1
 800248a:	4313      	orrs	r3, r2
 800248c:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800248e:	f7ff fef7 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 8002492:	68e3      	ldr	r3, [r4, #12]
 8002494:	4a5d      	ldr	r2, [pc, #372]	@ (800260c <HAL_RCC_OscConfig+0x2f8>)
 8002496:	061b      	lsls	r3, r3, #24
 8002498:	0f1b      	lsrs	r3, r3, #28
 800249a:	5cd3      	ldrb	r3, [r2, r3]
 800249c:	495a      	ldr	r1, [pc, #360]	@ (8002608 <HAL_RCC_OscConfig+0x2f4>)
 800249e:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 80024a0:	4b5b      	ldr	r3, [pc, #364]	@ (8002610 <HAL_RCC_OscConfig+0x2fc>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024a2:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	f7ff f9e7 	bl	8001878 <HAL_InitTick>
      if(status != HAL_OK)
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d100      	bne.n	80024b0 <HAL_RCC_OscConfig+0x19c>
 80024ae:	e746      	b.n	800233e <HAL_RCC_OscConfig+0x2a>
 80024b0:	e7a6      	b.n	8002400 <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d019      	beq.n	80024ea <HAL_RCC_OscConfig+0x1d6>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024b6:	2109      	movs	r1, #9
 80024b8:	6822      	ldr	r2, [r4, #0]
 80024ba:	438a      	bics	r2, r1
 80024bc:	4313      	orrs	r3, r2
 80024be:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80024c0:	f7ff fa1e 	bl	8001900 <HAL_GetTick>
 80024c4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024c6:	2204      	movs	r2, #4
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	4213      	tst	r3, r2
 80024cc:	d007      	beq.n	80024de <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ce:	6862      	ldr	r2, [r4, #4]
 80024d0:	692b      	ldr	r3, [r5, #16]
 80024d2:	4952      	ldr	r1, [pc, #328]	@ (800261c <HAL_RCC_OscConfig+0x308>)
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	400a      	ands	r2, r1
 80024d8:	4313      	orrs	r3, r2
 80024da:	6063      	str	r3, [r4, #4]
 80024dc:	e72f      	b.n	800233e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024de:	f7ff fa0f 	bl	8001900 <HAL_GetTick>
 80024e2:	1bc0      	subs	r0, r0, r7
 80024e4:	2802      	cmp	r0, #2
 80024e6:	d9ee      	bls.n	80024c6 <HAL_RCC_OscConfig+0x1b2>
 80024e8:	e789      	b.n	80023fe <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 80024ea:	2201      	movs	r2, #1
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	4393      	bics	r3, r2
 80024f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80024f2:	f7ff fa05 	bl	8001900 <HAL_GetTick>
 80024f6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024f8:	2204      	movs	r2, #4
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	4213      	tst	r3, r2
 80024fe:	d100      	bne.n	8002502 <HAL_RCC_OscConfig+0x1ee>
 8002500:	e71d      	b.n	800233e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002502:	f7ff f9fd 	bl	8001900 <HAL_GetTick>
 8002506:	1bc0      	subs	r0, r0, r7
 8002508:	2802      	cmp	r0, #2
 800250a:	d9f5      	bls.n	80024f8 <HAL_RCC_OscConfig+0x1e4>
 800250c:	e777      	b.n	80023fe <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800250e:	69ab      	ldr	r3, [r5, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_MSI_ENABLE();
 8002514:	2380      	movs	r3, #128	@ 0x80
 8002516:	6822      	ldr	r2, [r4, #0]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4313      	orrs	r3, r2
 800251c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800251e:	f7ff f9ef 	bl	8001900 <HAL_GetTick>
 8002522:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002524:	2280      	movs	r2, #128	@ 0x80
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	0092      	lsls	r2, r2, #2
 800252a:	4213      	tst	r3, r2
 800252c:	d00d      	beq.n	800254a <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800252e:	6863      	ldr	r3, [r4, #4]
 8002530:	4a34      	ldr	r2, [pc, #208]	@ (8002604 <HAL_RCC_OscConfig+0x2f0>)
 8002532:	4013      	ands	r3, r2
 8002534:	6a2a      	ldr	r2, [r5, #32]
 8002536:	4313      	orrs	r3, r2
 8002538:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800253a:	6862      	ldr	r2, [r4, #4]
 800253c:	69eb      	ldr	r3, [r5, #28]
 800253e:	0212      	lsls	r2, r2, #8
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	0a12      	lsrs	r2, r2, #8
 8002544:	4313      	orrs	r3, r2
 8002546:	6063      	str	r3, [r4, #4]
 8002548:	e726      	b.n	8002398 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800254a:	f7ff f9d9 	bl	8001900 <HAL_GetTick>
 800254e:	1bc0      	subs	r0, r0, r7
 8002550:	2802      	cmp	r0, #2
 8002552:	d9e7      	bls.n	8002524 <HAL_RCC_OscConfig+0x210>
 8002554:	e753      	b.n	80023fe <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	4a31      	ldr	r2, [pc, #196]	@ (8002620 <HAL_RCC_OscConfig+0x30c>)
 800255a:	4013      	ands	r3, r2
 800255c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800255e:	f7ff f9cf 	bl	8001900 <HAL_GetTick>
 8002562:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002564:	2280      	movs	r2, #128	@ 0x80
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	0092      	lsls	r2, r2, #2
 800256a:	4213      	tst	r3, r2
 800256c:	d100      	bne.n	8002570 <HAL_RCC_OscConfig+0x25c>
 800256e:	e713      	b.n	8002398 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002570:	f7ff f9c6 	bl	8001900 <HAL_GetTick>
 8002574:	1bc0      	subs	r0, r0, r7
 8002576:	2802      	cmp	r0, #2
 8002578:	d9f4      	bls.n	8002564 <HAL_RCC_OscConfig+0x250>
 800257a:	e740      	b.n	80023fe <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800257c:	696a      	ldr	r2, [r5, #20]
 800257e:	2301      	movs	r3, #1
 8002580:	2a00      	cmp	r2, #0
 8002582:	d010      	beq.n	80025a6 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_ENABLE();
 8002584:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002586:	4313      	orrs	r3, r2
 8002588:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 800258a:	f7ff f9b9 	bl	8001900 <HAL_GetTick>
 800258e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002590:	2202      	movs	r2, #2
 8002592:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002594:	4213      	tst	r3, r2
 8002596:	d000      	beq.n	800259a <HAL_RCC_OscConfig+0x286>
 8002598:	e702      	b.n	80023a0 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259a:	f7ff f9b1 	bl	8001900 <HAL_GetTick>
 800259e:	1bc0      	subs	r0, r0, r7
 80025a0:	2802      	cmp	r0, #2
 80025a2:	d9f5      	bls.n	8002590 <HAL_RCC_OscConfig+0x27c>
 80025a4:	e72b      	b.n	80023fe <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 80025a6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80025a8:	439a      	bics	r2, r3
 80025aa:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80025ac:	f7ff f9a8 	bl	8001900 <HAL_GetTick>
 80025b0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025b2:	2202      	movs	r2, #2
 80025b4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80025b6:	4213      	tst	r3, r2
 80025b8:	d100      	bne.n	80025bc <HAL_RCC_OscConfig+0x2a8>
 80025ba:	e6f1      	b.n	80023a0 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025bc:	f7ff f9a0 	bl	8001900 <HAL_GetTick>
 80025c0:	1bc0      	subs	r0, r0, r7
 80025c2:	2802      	cmp	r0, #2
 80025c4:	d9f5      	bls.n	80025b2 <HAL_RCC_OscConfig+0x29e>
 80025c6:	e71a      	b.n	80023fe <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c8:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80025ca:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025cc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80025ce:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80025d0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	421a      	tst	r2, r3
 80025d4:	d104      	bne.n	80025e0 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80025d8:	4313      	orrs	r3, r2
 80025da:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 80025dc:	2301      	movs	r3, #1
 80025de:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	2280      	movs	r2, #128	@ 0x80
 80025e2:	4f10      	ldr	r7, [pc, #64]	@ (8002624 <HAL_RCC_OscConfig+0x310>)
 80025e4:	0052      	lsls	r2, r2, #1
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	4213      	tst	r3, r2
 80025ea:	d01d      	beq.n	8002628 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ec:	2280      	movs	r2, #128	@ 0x80
 80025ee:	68ab      	ldr	r3, [r5, #8]
 80025f0:	0052      	lsls	r2, r2, #1
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d12c      	bne.n	8002650 <HAL_RCC_OscConfig+0x33c>
 80025f6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80025f8:	4313      	orrs	r3, r2
 80025fa:	6523      	str	r3, [r4, #80]	@ 0x50
 80025fc:	e03e      	b.n	800267c <HAL_RCC_OscConfig+0x368>
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	40021000 	.word	0x40021000
 8002604:	ffff1fff 	.word	0xffff1fff
 8002608:	20000004 	.word	0x20000004
 800260c:	080037fb 	.word	0x080037fb
 8002610:	2000000c 	.word	0x2000000c
 8002614:	fffeffff 	.word	0xfffeffff
 8002618:	fffbffff 	.word	0xfffbffff
 800261c:	ffffe0ff 	.word	0xffffe0ff
 8002620:	fffffeff 	.word	0xfffffeff
 8002624:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002628:	2280      	movs	r2, #128	@ 0x80
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	0052      	lsls	r2, r2, #1
 800262e:	4313      	orrs	r3, r2
 8002630:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002632:	f7ff f965 	bl	8001900 <HAL_GetTick>
 8002636:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	2280      	movs	r2, #128	@ 0x80
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	0052      	lsls	r2, r2, #1
 800263e:	4213      	tst	r3, r2
 8002640:	d1d4      	bne.n	80025ec <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002642:	f7ff f95d 	bl	8001900 <HAL_GetTick>
 8002646:	9b01      	ldr	r3, [sp, #4]
 8002648:	1ac0      	subs	r0, r0, r3
 800264a:	2864      	cmp	r0, #100	@ 0x64
 800264c:	d9f4      	bls.n	8002638 <HAL_RCC_OscConfig+0x324>
 800264e:	e6d6      	b.n	80023fe <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_RCC_OscConfig+0x350>
 8002654:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002656:	4a4f      	ldr	r2, [pc, #316]	@ (8002794 <HAL_RCC_OscConfig+0x480>)
 8002658:	4013      	ands	r3, r2
 800265a:	6523      	str	r3, [r4, #80]	@ 0x50
 800265c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800265e:	4a4e      	ldr	r2, [pc, #312]	@ (8002798 <HAL_RCC_OscConfig+0x484>)
 8002660:	4013      	ands	r3, r2
 8002662:	e7ca      	b.n	80025fa <HAL_RCC_OscConfig+0x2e6>
 8002664:	21a0      	movs	r1, #160	@ 0xa0
 8002666:	00c9      	lsls	r1, r1, #3
 8002668:	428b      	cmp	r3, r1
 800266a:	d1f3      	bne.n	8002654 <HAL_RCC_OscConfig+0x340>
 800266c:	2380      	movs	r3, #128	@ 0x80
 800266e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	430b      	orrs	r3, r1
 8002674:	6523      	str	r3, [r4, #80]	@ 0x50
 8002676:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002678:	431a      	orrs	r2, r3
 800267a:	6522      	str	r2, [r4, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267c:	68ab      	ldr	r3, [r5, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d017      	beq.n	80026b2 <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 8002682:	f7ff f93d 	bl	8001900 <HAL_GetTick>
 8002686:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002688:	2280      	movs	r2, #128	@ 0x80
 800268a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800268c:	0092      	lsls	r2, r2, #2
 800268e:	4213      	tst	r3, r2
 8002690:	d008      	beq.n	80026a4 <HAL_RCC_OscConfig+0x390>
    if(pwrclkchanged == SET)
 8002692:	9b00      	ldr	r3, [sp, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d000      	beq.n	800269a <HAL_RCC_OscConfig+0x386>
 8002698:	e686      	b.n	80023a8 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 800269a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800269c:	4a3f      	ldr	r2, [pc, #252]	@ (800279c <HAL_RCC_OscConfig+0x488>)
 800269e:	4013      	ands	r3, r2
 80026a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80026a2:	e681      	b.n	80023a8 <HAL_RCC_OscConfig+0x94>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a4:	f7ff f92c 	bl	8001900 <HAL_GetTick>
 80026a8:	4b3d      	ldr	r3, [pc, #244]	@ (80027a0 <HAL_RCC_OscConfig+0x48c>)
 80026aa:	1bc0      	subs	r0, r0, r7
 80026ac:	4298      	cmp	r0, r3
 80026ae:	d9eb      	bls.n	8002688 <HAL_RCC_OscConfig+0x374>
 80026b0:	e6a5      	b.n	80023fe <HAL_RCC_OscConfig+0xea>
      tickstart = HAL_GetTick();
 80026b2:	f7ff f925 	bl	8001900 <HAL_GetTick>
 80026b6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026b8:	2280      	movs	r2, #128	@ 0x80
 80026ba:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	4213      	tst	r3, r2
 80026c0:	d0e7      	beq.n	8002692 <HAL_RCC_OscConfig+0x37e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7ff f91d 	bl	8001900 <HAL_GetTick>
 80026c6:	4b36      	ldr	r3, [pc, #216]	@ (80027a0 <HAL_RCC_OscConfig+0x48c>)
 80026c8:	1bc0      	subs	r0, r0, r7
 80026ca:	4298      	cmp	r0, r3
 80026cc:	d9f4      	bls.n	80026b8 <HAL_RCC_OscConfig+0x3a4>
 80026ce:	e696      	b.n	80023fe <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d0:	2e0c      	cmp	r6, #12
 80026d2:	d043      	beq.n	800275c <HAL_RCC_OscConfig+0x448>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d4:	4a33      	ldr	r2, [pc, #204]	@ (80027a4 <HAL_RCC_OscConfig+0x490>)
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d12e      	bne.n	8002738 <HAL_RCC_OscConfig+0x424>
        __HAL_RCC_PLL_DISABLE();
 80026da:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026dc:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80026de:	4013      	ands	r3, r2
 80026e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80026e2:	f7ff f90d 	bl	8001900 <HAL_GetTick>
 80026e6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026e8:	04bf      	lsls	r7, r7, #18
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	423b      	tst	r3, r7
 80026ee:	d11d      	bne.n	800272c <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f0:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80026f2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80026f4:	68e2      	ldr	r2, [r4, #12]
 80026f6:	430b      	orrs	r3, r1
 80026f8:	492b      	ldr	r1, [pc, #172]	@ (80027a8 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80026fa:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fc:	400a      	ands	r2, r1
 80026fe:	4313      	orrs	r3, r2
 8002700:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002702:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002704:	4313      	orrs	r3, r2
 8002706:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	6822      	ldr	r2, [r4, #0]
 800270c:	045b      	lsls	r3, r3, #17
 800270e:	4313      	orrs	r3, r2
 8002710:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002712:	f7ff f8f5 	bl	8001900 <HAL_GetTick>
 8002716:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	4233      	tst	r3, r6
 800271c:	d000      	beq.n	8002720 <HAL_RCC_OscConfig+0x40c>
 800271e:	e647      	b.n	80023b0 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002720:	f7ff f8ee 	bl	8001900 <HAL_GetTick>
 8002724:	1b40      	subs	r0, r0, r5
 8002726:	2802      	cmp	r0, #2
 8002728:	d9f6      	bls.n	8002718 <HAL_RCC_OscConfig+0x404>
 800272a:	e668      	b.n	80023fe <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272c:	f7ff f8e8 	bl	8001900 <HAL_GetTick>
 8002730:	1b80      	subs	r0, r0, r6
 8002732:	2802      	cmp	r0, #2
 8002734:	d9d9      	bls.n	80026ea <HAL_RCC_OscConfig+0x3d6>
 8002736:	e662      	b.n	80023fe <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 8002738:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800273a:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800273c:	4013      	ands	r3, r2
 800273e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002740:	f7ff f8de 	bl	8001900 <HAL_GetTick>
 8002744:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002746:	04b6      	lsls	r6, r6, #18
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	4233      	tst	r3, r6
 800274c:	d100      	bne.n	8002750 <HAL_RCC_OscConfig+0x43c>
 800274e:	e62f      	b.n	80023b0 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002750:	f7ff f8d6 	bl	8001900 <HAL_GetTick>
 8002754:	1b40      	subs	r0, r0, r5
 8002756:	2802      	cmp	r0, #2
 8002758:	d9f6      	bls.n	8002748 <HAL_RCC_OscConfig+0x434>
 800275a:	e650      	b.n	80023fe <HAL_RCC_OscConfig+0xea>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800275c:	2b01      	cmp	r3, #1
 800275e:	d100      	bne.n	8002762 <HAL_RCC_OscConfig+0x44e>
 8002760:	e634      	b.n	80023cc <HAL_RCC_OscConfig+0xb8>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	2380      	movs	r3, #128	@ 0x80
        pll_config = RCC->CFGR;
 8002764:	68e0      	ldr	r0, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002766:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8002768:	025b      	lsls	r3, r3, #9
 800276a:	4003      	ands	r3, r0
 800276c:	4293      	cmp	r3, r2
 800276e:	d000      	beq.n	8002772 <HAL_RCC_OscConfig+0x45e>
 8002770:	e62c      	b.n	80023cc <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002772:	23f0      	movs	r3, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002774:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002776:	039b      	lsls	r3, r3, #14
 8002778:	4003      	ands	r3, r0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	4293      	cmp	r3, r2
 800277c:	d000      	beq.n	8002780 <HAL_RCC_OscConfig+0x46c>
 800277e:	e625      	b.n	80023cc <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002780:	23c0      	movs	r3, #192	@ 0xc0
 8002782:	041b      	lsls	r3, r3, #16
 8002784:	4018      	ands	r0, r3
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002786:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002788:	1ac0      	subs	r0, r0, r3
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	b2c0      	uxtb	r0, r0
 8002790:	e636      	b.n	8002400 <HAL_RCC_OscConfig+0xec>
 8002792:	46c0      	nop			@ (mov r8, r8)
 8002794:	fffffeff 	.word	0xfffffeff
 8002798:	fffffbff 	.word	0xfffffbff
 800279c:	efffffff 	.word	0xefffffff
 80027a0:	00001388 	.word	0x00001388
 80027a4:	feffffff 	.word	0xfeffffff
 80027a8:	ff02ffff 	.word	0xff02ffff

080027ac <HAL_RCC_ClockConfig>:
{
 80027ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027ae:	1e04      	subs	r4, r0, #0
 80027b0:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80027b4:	2001      	movs	r0, #1
}
 80027b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027b8:	2501      	movs	r5, #1
 80027ba:	4e5c      	ldr	r6, [pc, #368]	@ (800292c <HAL_RCC_ClockConfig+0x180>)
 80027bc:	9a01      	ldr	r2, [sp, #4]
 80027be:	6833      	ldr	r3, [r6, #0]
 80027c0:	402b      	ands	r3, r5
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d333      	bcc.n	800282e <HAL_RCC_ClockConfig+0x82>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	079b      	lsls	r3, r3, #30
 80027ca:	d445      	bmi.n	8002858 <HAL_RCC_ClockConfig+0xac>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	07db      	lsls	r3, r3, #31
 80027d0:	d44a      	bmi.n	8002868 <HAL_RCC_ClockConfig+0xbc>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027d2:	2501      	movs	r5, #1
 80027d4:	6833      	ldr	r3, [r6, #0]
 80027d6:	9a01      	ldr	r2, [sp, #4]
 80027d8:	402b      	ands	r3, r5
 80027da:	4293      	cmp	r3, r2
 80027dc:	d909      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x46>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	6833      	ldr	r3, [r6, #0]
 80027e0:	43ab      	bics	r3, r5
 80027e2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80027e4:	f7ff f88c 	bl	8001900 <HAL_GetTick>
 80027e8:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ea:	6833      	ldr	r3, [r6, #0]
 80027ec:	422b      	tst	r3, r5
 80027ee:	d000      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x46>
 80027f0:	e08d      	b.n	800290e <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	4d4e      	ldr	r5, [pc, #312]	@ (8002930 <HAL_RCC_ClockConfig+0x184>)
 80027f6:	075b      	lsls	r3, r3, #29
 80027f8:	d500      	bpl.n	80027fc <HAL_RCC_ClockConfig+0x50>
 80027fa:	e090      	b.n	800291e <HAL_RCC_ClockConfig+0x172>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	071b      	lsls	r3, r3, #28
 8002800:	d506      	bpl.n	8002810 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002802:	68ea      	ldr	r2, [r5, #12]
 8002804:	6923      	ldr	r3, [r4, #16]
 8002806:	494b      	ldr	r1, [pc, #300]	@ (8002934 <HAL_RCC_ClockConfig+0x188>)
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	400a      	ands	r2, r1
 800280c:	4313      	orrs	r3, r2
 800280e:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002810:	f7ff fd36 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 8002814:	68eb      	ldr	r3, [r5, #12]
 8002816:	4a48      	ldr	r2, [pc, #288]	@ (8002938 <HAL_RCC_ClockConfig+0x18c>)
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	0f1b      	lsrs	r3, r3, #28
 800281c:	5cd3      	ldrb	r3, [r2, r3]
 800281e:	4947      	ldr	r1, [pc, #284]	@ (800293c <HAL_RCC_ClockConfig+0x190>)
 8002820:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 8002822:	4b47      	ldr	r3, [pc, #284]	@ (8002940 <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002824:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	f7ff f826 	bl	8001878 <HAL_InitTick>
  if(status != HAL_OK)
 800282c:	e7c3      	b.n	80027b6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	6833      	ldr	r3, [r6, #0]
 8002830:	9a01      	ldr	r2, [sp, #4]
 8002832:	43ab      	bics	r3, r5
 8002834:	4313      	orrs	r3, r2
 8002836:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002838:	f7ff f862 	bl	8001900 <HAL_GetTick>
 800283c:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	6833      	ldr	r3, [r6, #0]
 8002840:	9a01      	ldr	r2, [sp, #4]
 8002842:	402b      	ands	r3, r5
 8002844:	4293      	cmp	r3, r2
 8002846:	d0be      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7ff f85a 	bl	8001900 <HAL_GetTick>
 800284c:	4b3d      	ldr	r3, [pc, #244]	@ (8002944 <HAL_RCC_ClockConfig+0x198>)
 800284e:	1bc0      	subs	r0, r0, r7
 8002850:	4298      	cmp	r0, r3
 8002852:	d9f4      	bls.n	800283e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002854:	2003      	movs	r0, #3
 8002856:	e7ae      	b.n	80027b6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002858:	21f0      	movs	r1, #240	@ 0xf0
 800285a:	4a35      	ldr	r2, [pc, #212]	@ (8002930 <HAL_RCC_ClockConfig+0x184>)
 800285c:	68d3      	ldr	r3, [r2, #12]
 800285e:	438b      	bics	r3, r1
 8002860:	68a1      	ldr	r1, [r4, #8]
 8002862:	430b      	orrs	r3, r1
 8002864:	60d3      	str	r3, [r2, #12]
 8002866:	e7b1      	b.n	80027cc <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002868:	4d31      	ldr	r5, [pc, #196]	@ (8002930 <HAL_RCC_ClockConfig+0x184>)
 800286a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800286c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286e:	2a02      	cmp	r2, #2
 8002870:	d118      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002872:	039b      	lsls	r3, r3, #14
 8002874:	d59e      	bpl.n	80027b4 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002876:	2103      	movs	r1, #3
 8002878:	68eb      	ldr	r3, [r5, #12]
 800287a:	438b      	bics	r3, r1
 800287c:	4313      	orrs	r3, r2
 800287e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8002880:	f7ff f83e 	bl	8001900 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002884:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002886:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002888:	2b02      	cmp	r3, #2
 800288a:	d118      	bne.n	80028be <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800288c:	220c      	movs	r2, #12
 800288e:	68eb      	ldr	r3, [r5, #12]
 8002890:	4013      	ands	r3, r2
 8002892:	2b08      	cmp	r3, #8
 8002894:	d09d      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002896:	f7ff f833 	bl	8001900 <HAL_GetTick>
 800289a:	4b2a      	ldr	r3, [pc, #168]	@ (8002944 <HAL_RCC_ClockConfig+0x198>)
 800289c:	1bc0      	subs	r0, r0, r7
 800289e:	4298      	cmp	r0, r3
 80028a0:	d9f4      	bls.n	800288c <HAL_RCC_ClockConfig+0xe0>
 80028a2:	e7d7      	b.n	8002854 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028a4:	2a03      	cmp	r2, #3
 80028a6:	d102      	bne.n	80028ae <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028a8:	019b      	lsls	r3, r3, #6
 80028aa:	d4e4      	bmi.n	8002876 <HAL_RCC_ClockConfig+0xca>
 80028ac:	e782      	b.n	80027b4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028ae:	2a01      	cmp	r2, #1
 80028b0:	d102      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x10c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028b2:	075b      	lsls	r3, r3, #29
 80028b4:	d4df      	bmi.n	8002876 <HAL_RCC_ClockConfig+0xca>
 80028b6:	e77d      	b.n	80027b4 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028b8:	059b      	lsls	r3, r3, #22
 80028ba:	d4dc      	bmi.n	8002876 <HAL_RCC_ClockConfig+0xca>
 80028bc:	e77a      	b.n	80027b4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d10b      	bne.n	80028da <HAL_RCC_ClockConfig+0x12e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c2:	220c      	movs	r2, #12
 80028c4:	68eb      	ldr	r3, [r5, #12]
 80028c6:	4013      	ands	r3, r2
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d082      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7ff f818 	bl	8001900 <HAL_GetTick>
 80028d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002944 <HAL_RCC_ClockConfig+0x198>)
 80028d2:	1bc0      	subs	r0, r0, r7
 80028d4:	4298      	cmp	r0, r3
 80028d6:	d9f4      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x116>
 80028d8:	e7bc      	b.n	8002854 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d011      	beq.n	8002902 <HAL_RCC_ClockConfig+0x156>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80028de:	220c      	movs	r2, #12
 80028e0:	68eb      	ldr	r3, [r5, #12]
 80028e2:	4213      	tst	r3, r2
 80028e4:	d100      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x13c>
 80028e6:	e774      	b.n	80027d2 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7ff f80a 	bl	8001900 <HAL_GetTick>
 80028ec:	4b15      	ldr	r3, [pc, #84]	@ (8002944 <HAL_RCC_ClockConfig+0x198>)
 80028ee:	1bc0      	subs	r0, r0, r7
 80028f0:	4298      	cmp	r0, r3
 80028f2:	d9f4      	bls.n	80028de <HAL_RCC_ClockConfig+0x132>
 80028f4:	e7ae      	b.n	8002854 <HAL_RCC_ClockConfig+0xa8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f6:	f7ff f803 	bl	8001900 <HAL_GetTick>
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <HAL_RCC_ClockConfig+0x198>)
 80028fc:	1bc0      	subs	r0, r0, r7
 80028fe:	4298      	cmp	r0, r3
 8002900:	d8a8      	bhi.n	8002854 <HAL_RCC_ClockConfig+0xa8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002902:	220c      	movs	r2, #12
 8002904:	68eb      	ldr	r3, [r5, #12]
 8002906:	4013      	ands	r3, r2
 8002908:	2b04      	cmp	r3, #4
 800290a:	d1f4      	bne.n	80028f6 <HAL_RCC_ClockConfig+0x14a>
 800290c:	e761      	b.n	80027d2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290e:	f7fe fff7 	bl	8001900 <HAL_GetTick>
 8002912:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <HAL_RCC_ClockConfig+0x198>)
 8002914:	1bc0      	subs	r0, r0, r7
 8002916:	4298      	cmp	r0, r3
 8002918:	d800      	bhi.n	800291c <HAL_RCC_ClockConfig+0x170>
 800291a:	e766      	b.n	80027ea <HAL_RCC_ClockConfig+0x3e>
 800291c:	e79a      	b.n	8002854 <HAL_RCC_ClockConfig+0xa8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291e:	68eb      	ldr	r3, [r5, #12]
 8002920:	4a09      	ldr	r2, [pc, #36]	@ (8002948 <HAL_RCC_ClockConfig+0x19c>)
 8002922:	4013      	ands	r3, r2
 8002924:	68e2      	ldr	r2, [r4, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60eb      	str	r3, [r5, #12]
 800292a:	e767      	b.n	80027fc <HAL_RCC_ClockConfig+0x50>
 800292c:	40022000 	.word	0x40022000
 8002930:	40021000 	.word	0x40021000
 8002934:	ffffc7ff 	.word	0xffffc7ff
 8002938:	080037fb 	.word	0x080037fb
 800293c:	20000004 	.word	0x20000004
 8002940:	2000000c 	.word	0x2000000c
 8002944:	00001388 	.word	0x00001388
 8002948:	fffff8ff 	.word	0xfffff8ff

0800294c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800294c:	4b01      	ldr	r3, [pc, #4]	@ (8002954 <HAL_RCC_GetHCLKFreq+0x8>)
 800294e:	6818      	ldr	r0, [r3, #0]
}
 8002950:	4770      	bx	lr
 8002952:	46c0      	nop			@ (mov r8, r8)
 8002954:	20000004 	.word	0x20000004

08002958 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800295a:	6803      	ldr	r3, [r0, #0]
{
 800295c:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800295e:	069b      	lsls	r3, r3, #26
 8002960:	d53f      	bpl.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002962:	2380      	movs	r3, #128	@ 0x80
  FlagStatus       pwrclkchanged = RESET;
 8002964:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002966:	4c53      	ldr	r4, [pc, #332]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002968:	055b      	lsls	r3, r3, #21
 800296a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
  FlagStatus       pwrclkchanged = RESET;
 800296c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296e:	421a      	tst	r2, r3
 8002970:	d104      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002972:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002974:	4313      	orrs	r3, r2
 8002976:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 8002978:	2301      	movs	r3, #1
 800297a:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	2780      	movs	r7, #128	@ 0x80
 800297e:	4e4e      	ldr	r6, [pc, #312]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002980:	007f      	lsls	r7, r7, #1
 8002982:	6833      	ldr	r3, [r6, #0]
 8002984:	423b      	tst	r3, r7
 8002986:	d04f      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002988:	6868      	ldr	r0, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800298a:	6822      	ldr	r2, [r4, #0]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800298c:	0001      	movs	r1, r0
 800298e:	23c0      	movs	r3, #192	@ 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002990:	4042      	eors	r2, r0
 8002992:	20c0      	movs	r0, #192	@ 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002994:	029b      	lsls	r3, r3, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002996:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002998:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800299a:	4202      	tst	r2, r0
 800299c:	d155      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xf2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800299e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80029a0:	0010      	movs	r0, r2
 80029a2:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80029a4:	421a      	tst	r2, r3
 80029a6:	d157      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x100>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a8:	686a      	ldr	r2, [r5, #4]
 80029aa:	23c0      	movs	r3, #192	@ 0xc0
 80029ac:	0011      	movs	r1, r2
 80029ae:	029b      	lsls	r3, r3, #10
 80029b0:	4019      	ands	r1, r3
 80029b2:	4299      	cmp	r1, r3
 80029b4:	d107      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	4940      	ldr	r1, [pc, #256]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ba:	400b      	ands	r3, r1
 80029bc:	21c0      	movs	r1, #192	@ 0xc0
 80029be:	0389      	lsls	r1, r1, #14
 80029c0:	400a      	ands	r2, r1
 80029c2:	4313      	orrs	r3, r2
 80029c4:	6023      	str	r3, [r4, #0]
 80029c6:	21c0      	movs	r1, #192	@ 0xc0
 80029c8:	686b      	ldr	r3, [r5, #4]
 80029ca:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80029cc:	0289      	lsls	r1, r1, #10
 80029ce:	400b      	ands	r3, r1
 80029d0:	4313      	orrs	r3, r2
 80029d2:	6523      	str	r3, [r4, #80]	@ 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029d4:	9b00      	ldr	r3, [sp, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d103      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029da:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80029dc:	4a38      	ldr	r2, [pc, #224]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029de:	4013      	ands	r3, r2
 80029e0:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e2:	682b      	ldr	r3, [r5, #0]
 80029e4:	079b      	lsls	r3, r3, #30
 80029e6:	d506      	bpl.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029e8:	210c      	movs	r1, #12
 80029ea:	4a32      	ldr	r2, [pc, #200]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80029ec:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80029ee:	438b      	bics	r3, r1
 80029f0:	68a9      	ldr	r1, [r5, #8]
 80029f2:	430b      	orrs	r3, r1
 80029f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029f6:	682b      	ldr	r3, [r5, #0]
 80029f8:	075b      	lsls	r3, r3, #29
 80029fa:	d506      	bpl.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029fc:	4a2d      	ldr	r2, [pc, #180]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80029fe:	4931      	ldr	r1, [pc, #196]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8002a00:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002a02:	400b      	ands	r3, r1
 8002a04:	68e9      	ldr	r1, [r5, #12]
 8002a06:	430b      	orrs	r3, r1
 8002a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a0a:	682b      	ldr	r3, [r5, #0]
 8002a0c:	071b      	lsls	r3, r3, #28
 8002a0e:	d506      	bpl.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a10:	4a28      	ldr	r2, [pc, #160]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a12:	492d      	ldr	r1, [pc, #180]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8002a14:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002a16:	400b      	ands	r3, r1
 8002a18:	6929      	ldr	r1, [r5, #16]
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a1e:	682b      	ldr	r3, [r5, #0]
 8002a20:	061b      	lsls	r3, r3, #24
 8002a22:	d43e      	bmi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8002a24:	2000      	movs	r0, #0
 8002a26:	e00f      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a28:	6833      	ldr	r3, [r6, #0]
 8002a2a:	433b      	orrs	r3, r7
 8002a2c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002a2e:	f7fe ff67 	bl	8001900 <HAL_GetTick>
 8002a32:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	6833      	ldr	r3, [r6, #0]
 8002a36:	423b      	tst	r3, r7
 8002a38:	d1a6      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3a:	f7fe ff61 	bl	8001900 <HAL_GetTick>
 8002a3e:	9b01      	ldr	r3, [sp, #4]
 8002a40:	1ac0      	subs	r0, r0, r3
 8002a42:	2864      	cmp	r0, #100	@ 0x64
 8002a44:	d9f6      	bls.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xdc>
          return HAL_TIMEOUT;
 8002a46:	2003      	movs	r0, #3
}
 8002a48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a4a:	4299      	cmp	r1, r3
 8002a4c:	d1a7      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x46>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a4e:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8002a50:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a52:	0392      	lsls	r2, r2, #14
 8002a54:	d5a3      	bpl.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x46>
 8002a56:	e7f7      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002a58:	4288      	cmp	r0, r1
 8002a5a:	d0a5      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	069b      	lsls	r3, r3, #26
 8002a60:	d5a2      	bpl.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a62:	2180      	movs	r1, #128	@ 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002a64:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a66:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002a68:	0309      	lsls	r1, r1, #12
 8002a6a:	4301      	orrs	r1, r0
 8002a6c:	6521      	str	r1, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a6e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002a70:	4a16      	ldr	r2, [pc, #88]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x174>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a72:	4817      	ldr	r0, [pc, #92]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002a74:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a76:	4001      	ands	r1, r0
 8002a78:	6521      	str	r1, [r4, #80]	@ 0x50
      RCC->CSR = temp_reg;
 8002a7a:	6522      	str	r2, [r4, #80]	@ 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002a7c:	05db      	lsls	r3, r3, #23
 8002a7e:	d400      	bmi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8002a80:	e792      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
        tickstart = HAL_GetTick();
 8002a82:	f7fe ff3d 	bl	8001900 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a86:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002a88:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a8a:	00bf      	lsls	r7, r7, #2
 8002a8c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002a8e:	423b      	tst	r3, r7
 8002a90:	d000      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a92:	e789      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7fe ff34 	bl	8001900 <HAL_GetTick>
 8002a98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8002a9a:	1b80      	subs	r0, r0, r6
 8002a9c:	4298      	cmp	r0, r3
 8002a9e:	d9f5      	bls.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x134>
 8002aa0:	e7d1      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0xee>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002aa2:	4a04      	ldr	r2, [pc, #16]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002aa4:	490c      	ldr	r1, [pc, #48]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002aa6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	6969      	ldr	r1, [r5, #20]
 8002aac:	430b      	orrs	r3, r1
 8002aae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ab0:	e7b8      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40007000 	.word	0x40007000
 8002abc:	ffcfffff 	.word	0xffcfffff
 8002ac0:	efffffff 	.word	0xefffffff
 8002ac4:	fffff3ff 	.word	0xfffff3ff
 8002ac8:	ffffcfff 	.word	0xffffcfff
 8002acc:	fffcffff 	.word	0xfffcffff
 8002ad0:	fff7ffff 	.word	0xfff7ffff
 8002ad4:	00001388 	.word	0x00001388
 8002ad8:	fff3ffff 	.word	0xfff3ffff

08002adc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002adc:	b530      	push	{r4, r5, lr}
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002ade:	6882      	ldr	r2, [r0, #8]
 8002ae0:	0003      	movs	r3, r0
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002ae2:	0014      	movs	r4, r2
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	4004      	ands	r4, r0
 8002ae8:	4202      	tst	r2, r0
 8002aea:	d110      	bne.n	8002b0e <LL_ADC_Init+0x32>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8002aec:	688d      	ldr	r5, [r1, #8]
 8002aee:	684a      	ldr	r2, [r1, #4]
 8002af0:	68d8      	ldr	r0, [r3, #12]
 8002af2:	432a      	orrs	r2, r5
 8002af4:	68cd      	ldr	r5, [r1, #12]
 8002af6:	432a      	orrs	r2, r5
 8002af8:	4d05      	ldr	r5, [pc, #20]	@ (8002b10 <LL_ADC_Init+0x34>)
 8002afa:	4028      	ands	r0, r5
 8002afc:	4302      	orrs	r2, r0
  ErrorStatus status = SUCCESS;
 8002afe:	0020      	movs	r0, r4
    MODIFY_REG(ADCx->CFGR1,
 8002b00:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	6809      	ldr	r1, [r1, #0]
 8002b06:	0092      	lsls	r2, r2, #2
 8002b08:	0892      	lsrs	r2, r2, #2
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	611a      	str	r2, [r3, #16]
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8002b0e:	bd30      	pop	{r4, r5, pc}
 8002b10:	ffff3fc7 	.word	0xffff3fc7

08002b14 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002b14:	b530      	push	{r4, r5, lr}
 8002b16:	6883      	ldr	r3, [r0, #8]
 8002b18:	0002      	movs	r2, r0
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002b1a:	001c      	movs	r4, r3
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	4004      	ands	r4, r0
 8002b20:	4203      	tst	r3, r0
 8002b22:	d10e      	bne.n	8002b42 <LL_ADC_REG_Init+0x2e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8002b24:	684d      	ldr	r5, [r1, #4]
 8002b26:	680b      	ldr	r3, [r1, #0]
 8002b28:	68d0      	ldr	r0, [r2, #12]
 8002b2a:	432b      	orrs	r3, r5
 8002b2c:	688d      	ldr	r5, [r1, #8]
 8002b2e:	432b      	orrs	r3, r5
 8002b30:	68cd      	ldr	r5, [r1, #12]
 8002b32:	6909      	ldr	r1, [r1, #16]
 8002b34:	432b      	orrs	r3, r5
 8002b36:	430b      	orrs	r3, r1
 8002b38:	4902      	ldr	r1, [pc, #8]	@ (8002b44 <LL_ADC_REG_Init+0x30>)
 8002b3a:	4001      	ands	r1, r0
  ErrorStatus status = SUCCESS;
 8002b3c:	0020      	movs	r0, r4
    MODIFY_REG(ADCx->CFGR1,
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	60d3      	str	r3, [r2, #12]
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8002b42:	bd30      	pop	{r4, r5, pc}
 8002b44:	fffec23c 	.word	0xfffec23c

08002b48 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b4a:	0002      	movs	r2, r0
  uint32_t pinpos     = 0x00000000U;
 8002b4c:	2600      	movs	r6, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002b4e:	680c      	ldr	r4, [r1, #0]
 8002b50:	0020      	movs	r0, r4
 8002b52:	40f0      	lsrs	r0, r6
 8002b54:	d100      	bne.n	8002b58 <LL_GPIO_Init+0x10>
    pinpos++;
  }


  return (SUCCESS);
}
 8002b56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002b58:	2001      	movs	r0, #1
 8002b5a:	0023      	movs	r3, r4
 8002b5c:	40b0      	lsls	r0, r6
 8002b5e:	4003      	ands	r3, r0
    if (currentpin)
 8002b60:	4204      	tst	r4, r0
 8002b62:	d033      	beq.n	8002bcc <LL_GPIO_Init+0x84>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8002b64:	001c      	movs	r4, r3
 8002b66:	2003      	movs	r0, #3
 8002b68:	435c      	muls	r4, r3
 8002b6a:	4360      	muls	r0, r4
 8002b6c:	43c0      	mvns	r0, r0
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b6e:	684d      	ldr	r5, [r1, #4]
 8002b70:	9001      	str	r0, [sp, #4]
 8002b72:	3d01      	subs	r5, #1
 8002b74:	2d01      	cmp	r5, #1
 8002b76:	d80c      	bhi.n	8002b92 <LL_GPIO_Init+0x4a>
 8002b78:	688d      	ldr	r5, [r1, #8]
 8002b7a:	6897      	ldr	r7, [r2, #8]
 8002b7c:	4365      	muls	r5, r4
 8002b7e:	4007      	ands	r7, r0
 8002b80:	433d      	orrs	r5, r7
 8002b82:	6095      	str	r5, [r2, #8]
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002b84:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002b86:	68cf      	ldr	r7, [r1, #12]
 8002b88:	6855      	ldr	r5, [r2, #4]
 8002b8a:	4347      	muls	r7, r0
 8002b8c:	4385      	bics	r5, r0
 8002b8e:	433d      	orrs	r5, r7
 8002b90:	6055      	str	r5, [r2, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002b92:	690d      	ldr	r5, [r1, #16]
 8002b94:	68d7      	ldr	r7, [r2, #12]
 8002b96:	4365      	muls	r5, r4
 8002b98:	9801      	ldr	r0, [sp, #4]
 8002b9a:	4007      	ands	r7, r0
 8002b9c:	433d      	orrs	r5, r7
 8002b9e:	60d5      	str	r5, [r2, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002ba0:	684d      	ldr	r5, [r1, #4]
 8002ba2:	2d02      	cmp	r5, #2
 8002ba4:	d10b      	bne.n	8002bbe <LL_GPIO_Init+0x76>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ba6:	694f      	ldr	r7, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 8002ba8:	2bff      	cmp	r3, #255	@ 0xff
 8002baa:	d811      	bhi.n	8002bd0 <LL_GPIO_Init+0x88>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002bac:	0025      	movs	r5, r4
 8002bae:	200f      	movs	r0, #15
 8002bb0:	4365      	muls	r5, r4
 8002bb2:	4368      	muls	r0, r5
 8002bb4:	437d      	muls	r5, r7
 8002bb6:	6a13      	ldr	r3, [r2, #32]
 8002bb8:	4383      	bics	r3, r0
 8002bba:	432b      	orrs	r3, r5
 8002bbc:	6213      	str	r3, [r2, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002bbe:	684b      	ldr	r3, [r1, #4]
 8002bc0:	6815      	ldr	r5, [r2, #0]
 8002bc2:	4363      	muls	r3, r4
 8002bc4:	9801      	ldr	r0, [sp, #4]
 8002bc6:	4028      	ands	r0, r5
 8002bc8:	4318      	orrs	r0, r3
 8002bca:	6010      	str	r0, [r2, #0]
    pinpos++;
 8002bcc:	3601      	adds	r6, #1
 8002bce:	e7be      	b.n	8002b4e <LL_GPIO_Init+0x6>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002bd0:	200f      	movs	r0, #15
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	435b      	muls	r3, r3
 8002bd6:	435b      	muls	r3, r3
 8002bd8:	4358      	muls	r0, r3
 8002bda:	437b      	muls	r3, r7
 8002bdc:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8002bde:	4385      	bics	r5, r0
 8002be0:	431d      	orrs	r5, r3
 8002be2:	6255      	str	r5, [r2, #36]	@ 0x24
}
 8002be4:	e7eb      	b.n	8002bbe <LL_GPIO_Init+0x76>
	...

08002be8 <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002be8:	4b02      	ldr	r3, [pc, #8]	@ (8002bf4 <LL_RCC_HSI_IsReady+0xc>)
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	0740      	lsls	r0, r0, #29
 8002bee:	0fc0      	lsrs	r0, r0, #31
}
 8002bf0:	4770      	bx	lr
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002bf8:	4b02      	ldr	r3, [pc, #8]	@ (8002c04 <LL_RCC_IsActiveFlag_HSIDIV+0xc>)
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	06c0      	lsls	r0, r0, #27
 8002bfe:	0fc0      	lsrs	r0, r0, #31
}
 8002c00:	4770      	bx	lr
 8002c02:	46c0      	nop			@ (mov r8, r8)
 8002c04:	40021000 	.word	0x40021000

08002c08 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c08:	4b03      	ldr	r3, [pc, #12]	@ (8002c18 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002c0a:	4a04      	ldr	r2, [pc, #16]	@ (8002c1c <RCC_GetHCLKClockFreq+0x14>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	061b      	lsls	r3, r3, #24
 8002c10:	0f1b      	lsrs	r3, r3, #28
 8002c12:	5cd3      	ldrb	r3, [r2, r3]
 8002c14:	40d8      	lsrs	r0, r3
}
 8002c16:	4770      	bx	lr
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	080037fb 	.word	0x080037fb

08002c20 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002c20:	4b03      	ldr	r3, [pc, #12]	@ (8002c30 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002c22:	4a04      	ldr	r2, [pc, #16]	@ (8002c34 <RCC_GetPCLK1ClockFreq+0x14>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	055b      	lsls	r3, r3, #21
 8002c28:	0f5b      	lsrs	r3, r3, #29
 8002c2a:	5cd3      	ldrb	r3, [r2, r3]
 8002c2c:	40d8      	lsrs	r0, r3
}
 8002c2e:	4770      	bx	lr
 8002c30:	40021000 	.word	0x40021000
 8002c34:	080037f3 	.word	0x080037f3

08002c38 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c38:	220c      	movs	r2, #12
{
 8002c3a:	b510      	push	{r4, lr}
 8002c3c:	4c1d      	ldr	r4, [pc, #116]	@ (8002cb4 <RCC_GetSystemClockFreq+0x7c>)
 8002c3e:	68e3      	ldr	r3, [r4, #12]
 8002c40:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d033      	beq.n	8002cae <RCC_GetSystemClockFreq+0x76>
 8002c46:	d80b      	bhi.n	8002c60 <RCC_GetSystemClockFreq+0x28>
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <RCC_GetSystemClockFreq+0x18>
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d022      	beq.n	8002c96 <RCC_GetSystemClockFreq+0x5e>
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c50:	2080      	movs	r0, #128	@ 0x80
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8002c52:	6863      	ldr	r3, [r4, #4]
 8002c54:	0200      	lsls	r0, r0, #8
 8002c56:	041b      	lsls	r3, r3, #16
 8002c58:	0f5b      	lsrs	r3, r3, #29
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	4098      	lsls	r0, r3
      break;
 8002c5e:	e023      	b.n	8002ca8 <RCC_GetSystemClockFreq+0x70>
  switch (LL_RCC_GetSysClkSource())
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d1f5      	bne.n	8002c50 <RCC_GetSystemClockFreq+0x18>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002c64:	68e3      	ldr	r3, [r4, #12]
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8002c66:	03db      	lsls	r3, r3, #15
 8002c68:	d41f      	bmi.n	8002caa <RCC_GetSystemClockFreq+0x72>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002c6a:	f7ff ffc5 	bl	8002bf8 <LL_RCC_IsActiveFlag_HSIDIV>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8002c6e:	4243      	negs	r3, r0
 8002c70:	4158      	adcs	r0, r3
 8002c72:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <RCC_GetSystemClockFreq+0x80>)
 8002c74:	4240      	negs	r0, r0
 8002c76:	4018      	ands	r0, r3
 8002c78:	4b10      	ldr	r3, [pc, #64]	@ (8002cbc <RCC_GetSystemClockFreq+0x84>)
 8002c7a:	18c0      	adds	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002c7c:	68e3      	ldr	r3, [r4, #12]

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8002c7e:	4a10      	ldr	r2, [pc, #64]	@ (8002cc0 <RCC_GetSystemClockFreq+0x88>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8002c80:	68e1      	ldr	r1, [r4, #12]
 8002c82:	029b      	lsls	r3, r3, #10
 8002c84:	0f1b      	lsrs	r3, r3, #28
 8002c86:	5cd3      	ldrb	r3, [r2, r3]
 8002c88:	0209      	lsls	r1, r1, #8
 8002c8a:	0f89      	lsrs	r1, r1, #30
 8002c8c:	4358      	muls	r0, r3
 8002c8e:	3101      	adds	r1, #1
 8002c90:	f7fd fa4e 	bl	8000130 <__udivsi3>
      break;
 8002c94:	e008      	b.n	8002ca8 <RCC_GetSystemClockFreq+0x70>
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002c96:	f7ff ffaf 	bl	8002bf8 <LL_RCC_IsActiveFlag_HSIDIV>
        frequency = (HSI_VALUE >> 2U);
 8002c9a:	4243      	negs	r3, r0
 8002c9c:	4158      	adcs	r0, r3
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <RCC_GetSystemClockFreq+0x80>)
 8002ca0:	4240      	negs	r0, r0
 8002ca2:	4018      	ands	r0, r3
 8002ca4:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <RCC_GetSystemClockFreq+0x84>)
 8002ca6:	18c0      	adds	r0, r0, r3
}
 8002ca8:	bd10      	pop	{r4, pc}
      pllinputfreq = HSE_VALUE;
 8002caa:	4806      	ldr	r0, [pc, #24]	@ (8002cc4 <RCC_GetSystemClockFreq+0x8c>)
 8002cac:	e7e6      	b.n	8002c7c <RCC_GetSystemClockFreq+0x44>
  switch (LL_RCC_GetSysClkSource())
 8002cae:	4805      	ldr	r0, [pc, #20]	@ (8002cc4 <RCC_GetSystemClockFreq+0x8c>)
 8002cb0:	e7fa      	b.n	8002ca8 <RCC_GetSystemClockFreq+0x70>
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	00b71b00 	.word	0x00b71b00
 8002cbc:	003d0900 	.word	0x003d0900
 8002cc0:	080037ea 	.word	0x080037ea
 8002cc4:	007a1200 	.word	0x007a1200

08002cc8 <LL_RCC_GetUSARTClockFreq>:
{
 8002cc8:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002cca:	280c      	cmp	r0, #12
 8002ccc:	d001      	beq.n	8002cd2 <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002cce:	2000      	movs	r0, #0
}
 8002cd0:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002cd2:	4a16      	ldr	r2, [pc, #88]	@ (8002d2c <LL_RCC_GetUSARTClockFreq+0x64>)
 8002cd4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002cd6:	4003      	ands	r3, r0
 8002cd8:	20c0      	movs	r0, #192	@ 0xc0
 8002cda:	0300      	lsls	r0, r0, #12
 8002cdc:	4318      	orrs	r0, r3
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002cde:	4b14      	ldr	r3, [pc, #80]	@ (8002d30 <LL_RCC_GetUSARTClockFreq+0x68>)
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d008      	beq.n	8002cf6 <LL_RCC_GetUSARTClockFreq+0x2e>
 8002ce4:	4b13      	ldr	r3, [pc, #76]	@ (8002d34 <LL_RCC_GetUSARTClockFreq+0x6c>)
 8002ce6:	4298      	cmp	r0, r3
 8002ce8:	d013      	beq.n	8002d12 <LL_RCC_GetUSARTClockFreq+0x4a>
 8002cea:	4b13      	ldr	r3, [pc, #76]	@ (8002d38 <LL_RCC_GetUSARTClockFreq+0x70>)
 8002cec:	4298      	cmp	r0, r3
 8002cee:	d115      	bne.n	8002d1c <LL_RCC_GetUSARTClockFreq+0x54>
        usart_frequency = RCC_GetSystemClockFreq();
 8002cf0:	f7ff ffa2 	bl	8002c38 <RCC_GetSystemClockFreq>
        break;
 8002cf4:	e7ec      	b.n	8002cd0 <LL_RCC_GetUSARTClockFreq+0x8>
        if (LL_RCC_HSI_IsReady() != 0U)
 8002cf6:	f7ff ff77 	bl	8002be8 <LL_RCC_HSI_IsReady>
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	d0e7      	beq.n	8002cce <LL_RCC_GetUSARTClockFreq+0x6>
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002cfe:	f7ff ff7b 	bl	8002bf8 <LL_RCC_IsActiveFlag_HSIDIV>
            usart_frequency = (HSI_VALUE >> 2U);
 8002d02:	4243      	negs	r3, r0
 8002d04:	4158      	adcs	r0, r3
 8002d06:	4b0d      	ldr	r3, [pc, #52]	@ (8002d3c <LL_RCC_GetUSARTClockFreq+0x74>)
 8002d08:	4240      	negs	r0, r0
 8002d0a:	4018      	ands	r0, r3
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d40 <LL_RCC_GetUSARTClockFreq+0x78>)
 8002d0e:	18c0      	adds	r0, r0, r3
 8002d10:	e7de      	b.n	8002cd0 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8002d12:	6d10      	ldr	r0, [r2, #80]	@ 0x50
 8002d14:	0580      	lsls	r0, r0, #22
 8002d16:	0fc0      	lsrs	r0, r0, #31
 8002d18:	03c0      	lsls	r0, r0, #15
 8002d1a:	e7d9      	b.n	8002cd0 <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002d1c:	f7ff ff8c 	bl	8002c38 <RCC_GetSystemClockFreq>
 8002d20:	f7ff ff72 	bl	8002c08 <RCC_GetHCLKClockFreq>
 8002d24:	f7ff ff7c 	bl	8002c20 <RCC_GetPCLK1ClockFreq>
        break;
 8002d28:	e7d2      	b.n	8002cd0 <LL_RCC_GetUSARTClockFreq+0x8>
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	000c0008 	.word	0x000c0008
 8002d34:	000c000c 	.word	0x000c000c
 8002d38:	000c0004 	.word	0x000c0004
 8002d3c:	00b71b00 	.word	0x00b71b00
 8002d40:	003d0900 	.word	0x003d0900

08002d44 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d44:	2280      	movs	r2, #128	@ 0x80
{
 8002d46:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d48:	05d2      	lsls	r2, r2, #23
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002d4a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d4c:	4290      	cmp	r0, r2
 8002d4e:	d002      	beq.n	8002d56 <LL_TIM_Init+0x12>
 8002d50:	4c0d      	ldr	r4, [pc, #52]	@ (8002d88 <LL_TIM_Init+0x44>)
 8002d52:	42a0      	cmp	r0, r4
 8002d54:	d10c      	bne.n	8002d70 <LL_TIM_Init+0x2c>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002d56:	2470      	movs	r4, #112	@ 0x70
 8002d58:	43a3      	bics	r3, r4
 8002d5a:	684c      	ldr	r4, [r1, #4]
 8002d5c:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d5e:	4290      	cmp	r0, r2
 8002d60:	d002      	beq.n	8002d68 <LL_TIM_Init+0x24>
 8002d62:	4a09      	ldr	r2, [pc, #36]	@ (8002d88 <LL_TIM_Init+0x44>)
 8002d64:	4290      	cmp	r0, r2
 8002d66:	d103      	bne.n	8002d70 <LL_TIM_Init+0x2c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002d68:	4a08      	ldr	r2, [pc, #32]	@ (8002d8c <LL_TIM_Init+0x48>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	68ca      	ldr	r2, [r1, #12]
 8002d6e:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002d70:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002d72:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002d74:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002d76:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002d78:	6283      	str	r3, [r0, #40]	@ 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	6942      	ldr	r2, [r0, #20]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8002d82:	2000      	movs	r0, #0
 8002d84:	bd10      	pop	{r4, pc}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	40010800 	.word	0x40010800
 8002d8c:	fffffcff 	.word	0xfffffcff

08002d90 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002d90:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002d92:	6803      	ldr	r3, [r0, #0]
 8002d94:	0004      	movs	r4, r0
 8002d96:	000d      	movs	r5, r1
 8002d98:	07db      	lsls	r3, r3, #31
 8002d9a:	d501      	bpl.n	8002da0 <LL_USART_Init+0x10>
  ErrorStatus status = ERROR;
 8002d9c:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8002d9e:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(USARTx->CR1,
 8002da0:	684b      	ldr	r3, [r1, #4]
 8002da2:	68c9      	ldr	r1, [r1, #12]
 8002da4:	6802      	ldr	r2, [r0, #0]
 8002da6:	430b      	orrs	r3, r1
 8002da8:	6929      	ldr	r1, [r5, #16]
 8002daa:	430b      	orrs	r3, r1
 8002dac:	69a9      	ldr	r1, [r5, #24]
 8002dae:	430b      	orrs	r3, r1
 8002db0:	4918      	ldr	r1, [pc, #96]	@ (8002e14 <LL_USART_Init+0x84>)
 8002db2:	400a      	ands	r2, r1
 8002db4:	4313      	orrs	r3, r2
 8002db6:	6003      	str	r3, [r0, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002db8:	6843      	ldr	r3, [r0, #4]
 8002dba:	4a17      	ldr	r2, [pc, #92]	@ (8002e18 <LL_USART_Init+0x88>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	68aa      	ldr	r2, [r5, #8]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002dc4:	6883      	ldr	r3, [r0, #8]
 8002dc6:	4a15      	ldr	r2, [pc, #84]	@ (8002e1c <LL_USART_Init+0x8c>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	696a      	ldr	r2, [r5, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	6083      	str	r3, [r0, #8]
    if (USARTx == USART2)
 8002dd0:	4b13      	ldr	r3, [pc, #76]	@ (8002e20 <LL_USART_Init+0x90>)
 8002dd2:	4298      	cmp	r0, r3
 8002dd4:	d1e2      	bne.n	8002d9c <LL_USART_Init+0xc>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002dd6:	200c      	movs	r0, #12
 8002dd8:	f7ff ff76 	bl	8002cc8 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	d0dd      	beq.n	8002d9c <LL_USART_Init+0xc>
        && (USART_InitStruct->BaudRate != 0U))
 8002de0:	6829      	ldr	r1, [r5, #0]
 8002de2:	2900      	cmp	r1, #0
 8002de4:	d0da      	beq.n	8002d9c <LL_USART_Init+0xc>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002de6:	2280      	movs	r2, #128	@ 0x80
 8002de8:	69ad      	ldr	r5, [r5, #24]
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002dea:	084b      	lsrs	r3, r1, #1
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002dec:	0212      	lsls	r2, r2, #8
 8002dee:	4295      	cmp	r5, r2
 8002df0:	d10b      	bne.n	8002e0a <LL_USART_Init+0x7a>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002df2:	0040      	lsls	r0, r0, #1
 8002df4:	18c0      	adds	r0, r0, r3
 8002df6:	f7fd f99b 	bl	8000130 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <LL_USART_Init+0x94>)
 8002dfc:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dfe:	0700      	lsls	r0, r0, #28
 8002e00:	0f40      	lsrs	r0, r0, #29
 8002e02:	4318      	orrs	r0, r3
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002e04:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 8002e06:	2000      	movs	r0, #0
 8002e08:	e7c9      	b.n	8002d9e <LL_USART_Init+0xe>
 8002e0a:	18c0      	adds	r0, r0, r3
 8002e0c:	f7fd f990 	bl	8000130 <__udivsi3>
 8002e10:	b280      	uxth	r0, r0
 8002e12:	e7f7      	b.n	8002e04 <LL_USART_Init+0x74>
 8002e14:	efff69f3 	.word	0xefff69f3
 8002e18:	ffffcfff 	.word	0xffffcfff
 8002e1c:	fffffcff 	.word	0xfffffcff
 8002e20:	40004400 	.word	0x40004400
 8002e24:	0000fff0 	.word	0x0000fff0

08002e28 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002e28:	4a09      	ldr	r2, [pc, #36]	@ (8002e50 <LL_mDelay+0x28>)
{
 8002e2a:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002e2c:	6813      	ldr	r3, [r2, #0]
 8002e2e:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002e30:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
  {
    Delay++;
 8002e32:	1c43      	adds	r3, r0, #1
 8002e34:	1e59      	subs	r1, r3, #1
 8002e36:	418b      	sbcs	r3, r1
 8002e38:	18c0      	adds	r0, r0, r3
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002e3a:	2380      	movs	r3, #128	@ 0x80
 8002e3c:	025b      	lsls	r3, r3, #9
  while (Delay)
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	d101      	bne.n	8002e46 <LL_mDelay+0x1e>
    {
      Delay--;
    }
  }
}
 8002e42:	b002      	add	sp, #8
 8002e44:	4770      	bx	lr
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002e46:	6811      	ldr	r1, [r2, #0]
 8002e48:	4219      	tst	r1, r3
 8002e4a:	d0fc      	beq.n	8002e46 <LL_mDelay+0x1e>
      Delay--;
 8002e4c:	3801      	subs	r0, #1
 8002e4e:	e7f6      	b.n	8002e3e <LL_mDelay+0x16>
 8002e50:	e000e010 	.word	0xe000e010

08002e54 <siprintf>:
 8002e54:	b40e      	push	{r1, r2, r3}
 8002e56:	b500      	push	{lr}
 8002e58:	490b      	ldr	r1, [pc, #44]	@ (8002e88 <siprintf+0x34>)
 8002e5a:	b09c      	sub	sp, #112	@ 0x70
 8002e5c:	ab1d      	add	r3, sp, #116	@ 0x74
 8002e5e:	9002      	str	r0, [sp, #8]
 8002e60:	9006      	str	r0, [sp, #24]
 8002e62:	9107      	str	r1, [sp, #28]
 8002e64:	9104      	str	r1, [sp, #16]
 8002e66:	4809      	ldr	r0, [pc, #36]	@ (8002e8c <siprintf+0x38>)
 8002e68:	4909      	ldr	r1, [pc, #36]	@ (8002e90 <siprintf+0x3c>)
 8002e6a:	cb04      	ldmia	r3!, {r2}
 8002e6c:	9105      	str	r1, [sp, #20]
 8002e6e:	6800      	ldr	r0, [r0, #0]
 8002e70:	a902      	add	r1, sp, #8
 8002e72:	9301      	str	r3, [sp, #4]
 8002e74:	f000 f99e 	bl	80031b4 <_svfiprintf_r>
 8002e78:	2200      	movs	r2, #0
 8002e7a:	9b02      	ldr	r3, [sp, #8]
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	b01c      	add	sp, #112	@ 0x70
 8002e80:	bc08      	pop	{r3}
 8002e82:	b003      	add	sp, #12
 8002e84:	4718      	bx	r3
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	7fffffff 	.word	0x7fffffff
 8002e8c:	20000010 	.word	0x20000010
 8002e90:	ffff0208 	.word	0xffff0208

08002e94 <memset>:
 8002e94:	0003      	movs	r3, r0
 8002e96:	1882      	adds	r2, r0, r2
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d100      	bne.n	8002e9e <memset+0xa>
 8002e9c:	4770      	bx	lr
 8002e9e:	7019      	strb	r1, [r3, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	e7f9      	b.n	8002e98 <memset+0x4>

08002ea4 <__errno>:
 8002ea4:	4b01      	ldr	r3, [pc, #4]	@ (8002eac <__errno+0x8>)
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	4770      	bx	lr
 8002eaa:	46c0      	nop			@ (mov r8, r8)
 8002eac:	20000010 	.word	0x20000010

08002eb0 <__libc_init_array>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	2600      	movs	r6, #0
 8002eb4:	4c0c      	ldr	r4, [pc, #48]	@ (8002ee8 <__libc_init_array+0x38>)
 8002eb6:	4d0d      	ldr	r5, [pc, #52]	@ (8002eec <__libc_init_array+0x3c>)
 8002eb8:	1b64      	subs	r4, r4, r5
 8002eba:	10a4      	asrs	r4, r4, #2
 8002ebc:	42a6      	cmp	r6, r4
 8002ebe:	d109      	bne.n	8002ed4 <__libc_init_array+0x24>
 8002ec0:	2600      	movs	r6, #0
 8002ec2:	f000 fc65 	bl	8003790 <_init>
 8002ec6:	4c0a      	ldr	r4, [pc, #40]	@ (8002ef0 <__libc_init_array+0x40>)
 8002ec8:	4d0a      	ldr	r5, [pc, #40]	@ (8002ef4 <__libc_init_array+0x44>)
 8002eca:	1b64      	subs	r4, r4, r5
 8002ecc:	10a4      	asrs	r4, r4, #2
 8002ece:	42a6      	cmp	r6, r4
 8002ed0:	d105      	bne.n	8002ede <__libc_init_array+0x2e>
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}
 8002ed4:	00b3      	lsls	r3, r6, #2
 8002ed6:	58eb      	ldr	r3, [r5, r3]
 8002ed8:	4798      	blx	r3
 8002eda:	3601      	adds	r6, #1
 8002edc:	e7ee      	b.n	8002ebc <__libc_init_array+0xc>
 8002ede:	00b3      	lsls	r3, r6, #2
 8002ee0:	58eb      	ldr	r3, [r5, r3]
 8002ee2:	4798      	blx	r3
 8002ee4:	3601      	adds	r6, #1
 8002ee6:	e7f2      	b.n	8002ece <__libc_init_array+0x1e>
 8002ee8:	08003848 	.word	0x08003848
 8002eec:	08003848 	.word	0x08003848
 8002ef0:	0800384c 	.word	0x0800384c
 8002ef4:	08003848 	.word	0x08003848

08002ef8 <__retarget_lock_acquire_recursive>:
 8002ef8:	4770      	bx	lr

08002efa <__retarget_lock_release_recursive>:
 8002efa:	4770      	bx	lr

08002efc <_free_r>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	0005      	movs	r5, r0
 8002f00:	1e0c      	subs	r4, r1, #0
 8002f02:	d010      	beq.n	8002f26 <_free_r+0x2a>
 8002f04:	3c04      	subs	r4, #4
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	da00      	bge.n	8002f0e <_free_r+0x12>
 8002f0c:	18e4      	adds	r4, r4, r3
 8002f0e:	0028      	movs	r0, r5
 8002f10:	f000 f8e0 	bl	80030d4 <__malloc_lock>
 8002f14:	4a1d      	ldr	r2, [pc, #116]	@ (8002f8c <_free_r+0x90>)
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <_free_r+0x2c>
 8002f1c:	6063      	str	r3, [r4, #4]
 8002f1e:	6014      	str	r4, [r2, #0]
 8002f20:	0028      	movs	r0, r5
 8002f22:	f000 f8df 	bl	80030e4 <__malloc_unlock>
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
 8002f28:	42a3      	cmp	r3, r4
 8002f2a:	d908      	bls.n	8002f3e <_free_r+0x42>
 8002f2c:	6820      	ldr	r0, [r4, #0]
 8002f2e:	1821      	adds	r1, r4, r0
 8002f30:	428b      	cmp	r3, r1
 8002f32:	d1f3      	bne.n	8002f1c <_free_r+0x20>
 8002f34:	6819      	ldr	r1, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	1809      	adds	r1, r1, r0
 8002f3a:	6021      	str	r1, [r4, #0]
 8002f3c:	e7ee      	b.n	8002f1c <_free_r+0x20>
 8002f3e:	001a      	movs	r2, r3
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <_free_r+0x4e>
 8002f46:	42a3      	cmp	r3, r4
 8002f48:	d9f9      	bls.n	8002f3e <_free_r+0x42>
 8002f4a:	6811      	ldr	r1, [r2, #0]
 8002f4c:	1850      	adds	r0, r2, r1
 8002f4e:	42a0      	cmp	r0, r4
 8002f50:	d10b      	bne.n	8002f6a <_free_r+0x6e>
 8002f52:	6820      	ldr	r0, [r4, #0]
 8002f54:	1809      	adds	r1, r1, r0
 8002f56:	1850      	adds	r0, r2, r1
 8002f58:	6011      	str	r1, [r2, #0]
 8002f5a:	4283      	cmp	r3, r0
 8002f5c:	d1e0      	bne.n	8002f20 <_free_r+0x24>
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	1841      	adds	r1, r0, r1
 8002f64:	6011      	str	r1, [r2, #0]
 8002f66:	6053      	str	r3, [r2, #4]
 8002f68:	e7da      	b.n	8002f20 <_free_r+0x24>
 8002f6a:	42a0      	cmp	r0, r4
 8002f6c:	d902      	bls.n	8002f74 <_free_r+0x78>
 8002f6e:	230c      	movs	r3, #12
 8002f70:	602b      	str	r3, [r5, #0]
 8002f72:	e7d5      	b.n	8002f20 <_free_r+0x24>
 8002f74:	6820      	ldr	r0, [r4, #0]
 8002f76:	1821      	adds	r1, r4, r0
 8002f78:	428b      	cmp	r3, r1
 8002f7a:	d103      	bne.n	8002f84 <_free_r+0x88>
 8002f7c:	6819      	ldr	r1, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	1809      	adds	r1, r1, r0
 8002f82:	6021      	str	r1, [r4, #0]
 8002f84:	6063      	str	r3, [r4, #4]
 8002f86:	6054      	str	r4, [r2, #4]
 8002f88:	e7ca      	b.n	8002f20 <_free_r+0x24>
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	2000027c 	.word	0x2000027c

08002f90 <sbrk_aligned>:
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	4e0f      	ldr	r6, [pc, #60]	@ (8002fd0 <sbrk_aligned+0x40>)
 8002f94:	000d      	movs	r5, r1
 8002f96:	6831      	ldr	r1, [r6, #0]
 8002f98:	0004      	movs	r4, r0
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	d102      	bne.n	8002fa4 <sbrk_aligned+0x14>
 8002f9e:	f000 fb99 	bl	80036d4 <_sbrk_r>
 8002fa2:	6030      	str	r0, [r6, #0]
 8002fa4:	0029      	movs	r1, r5
 8002fa6:	0020      	movs	r0, r4
 8002fa8:	f000 fb94 	bl	80036d4 <_sbrk_r>
 8002fac:	1c43      	adds	r3, r0, #1
 8002fae:	d103      	bne.n	8002fb8 <sbrk_aligned+0x28>
 8002fb0:	2501      	movs	r5, #1
 8002fb2:	426d      	negs	r5, r5
 8002fb4:	0028      	movs	r0, r5
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	2303      	movs	r3, #3
 8002fba:	1cc5      	adds	r5, r0, #3
 8002fbc:	439d      	bics	r5, r3
 8002fbe:	42a8      	cmp	r0, r5
 8002fc0:	d0f8      	beq.n	8002fb4 <sbrk_aligned+0x24>
 8002fc2:	1a29      	subs	r1, r5, r0
 8002fc4:	0020      	movs	r0, r4
 8002fc6:	f000 fb85 	bl	80036d4 <_sbrk_r>
 8002fca:	3001      	adds	r0, #1
 8002fcc:	d1f2      	bne.n	8002fb4 <sbrk_aligned+0x24>
 8002fce:	e7ef      	b.n	8002fb0 <sbrk_aligned+0x20>
 8002fd0:	20000278 	.word	0x20000278

08002fd4 <_malloc_r>:
 8002fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	1ccb      	adds	r3, r1, #3
 8002fda:	4393      	bics	r3, r2
 8002fdc:	3308      	adds	r3, #8
 8002fde:	0005      	movs	r5, r0
 8002fe0:	001f      	movs	r7, r3
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d234      	bcs.n	8003050 <_malloc_r+0x7c>
 8002fe6:	270c      	movs	r7, #12
 8002fe8:	42b9      	cmp	r1, r7
 8002fea:	d833      	bhi.n	8003054 <_malloc_r+0x80>
 8002fec:	0028      	movs	r0, r5
 8002fee:	f000 f871 	bl	80030d4 <__malloc_lock>
 8002ff2:	4e37      	ldr	r6, [pc, #220]	@ (80030d0 <_malloc_r+0xfc>)
 8002ff4:	6833      	ldr	r3, [r6, #0]
 8002ff6:	001c      	movs	r4, r3
 8002ff8:	2c00      	cmp	r4, #0
 8002ffa:	d12f      	bne.n	800305c <_malloc_r+0x88>
 8002ffc:	0039      	movs	r1, r7
 8002ffe:	0028      	movs	r0, r5
 8003000:	f7ff ffc6 	bl	8002f90 <sbrk_aligned>
 8003004:	0004      	movs	r4, r0
 8003006:	1c43      	adds	r3, r0, #1
 8003008:	d15f      	bne.n	80030ca <_malloc_r+0xf6>
 800300a:	6834      	ldr	r4, [r6, #0]
 800300c:	9400      	str	r4, [sp, #0]
 800300e:	9b00      	ldr	r3, [sp, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d14a      	bne.n	80030aa <_malloc_r+0xd6>
 8003014:	2c00      	cmp	r4, #0
 8003016:	d052      	beq.n	80030be <_malloc_r+0xea>
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	0028      	movs	r0, r5
 800301c:	18e3      	adds	r3, r4, r3
 800301e:	9900      	ldr	r1, [sp, #0]
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	f000 fb57 	bl	80036d4 <_sbrk_r>
 8003026:	9b01      	ldr	r3, [sp, #4]
 8003028:	4283      	cmp	r3, r0
 800302a:	d148      	bne.n	80030be <_malloc_r+0xea>
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	0028      	movs	r0, r5
 8003030:	1aff      	subs	r7, r7, r3
 8003032:	0039      	movs	r1, r7
 8003034:	f7ff ffac 	bl	8002f90 <sbrk_aligned>
 8003038:	3001      	adds	r0, #1
 800303a:	d040      	beq.n	80030be <_malloc_r+0xea>
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	19db      	adds	r3, r3, r7
 8003040:	6023      	str	r3, [r4, #0]
 8003042:	6833      	ldr	r3, [r6, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	2a00      	cmp	r2, #0
 8003048:	d133      	bne.n	80030b2 <_malloc_r+0xde>
 800304a:	9b00      	ldr	r3, [sp, #0]
 800304c:	6033      	str	r3, [r6, #0]
 800304e:	e019      	b.n	8003084 <_malloc_r+0xb0>
 8003050:	2b00      	cmp	r3, #0
 8003052:	dac9      	bge.n	8002fe8 <_malloc_r+0x14>
 8003054:	230c      	movs	r3, #12
 8003056:	602b      	str	r3, [r5, #0]
 8003058:	2000      	movs	r0, #0
 800305a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800305c:	6821      	ldr	r1, [r4, #0]
 800305e:	1bc9      	subs	r1, r1, r7
 8003060:	d420      	bmi.n	80030a4 <_malloc_r+0xd0>
 8003062:	290b      	cmp	r1, #11
 8003064:	d90a      	bls.n	800307c <_malloc_r+0xa8>
 8003066:	19e2      	adds	r2, r4, r7
 8003068:	6027      	str	r7, [r4, #0]
 800306a:	42a3      	cmp	r3, r4
 800306c:	d104      	bne.n	8003078 <_malloc_r+0xa4>
 800306e:	6032      	str	r2, [r6, #0]
 8003070:	6863      	ldr	r3, [r4, #4]
 8003072:	6011      	str	r1, [r2, #0]
 8003074:	6053      	str	r3, [r2, #4]
 8003076:	e005      	b.n	8003084 <_malloc_r+0xb0>
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	e7f9      	b.n	8003070 <_malloc_r+0x9c>
 800307c:	6862      	ldr	r2, [r4, #4]
 800307e:	42a3      	cmp	r3, r4
 8003080:	d10e      	bne.n	80030a0 <_malloc_r+0xcc>
 8003082:	6032      	str	r2, [r6, #0]
 8003084:	0028      	movs	r0, r5
 8003086:	f000 f82d 	bl	80030e4 <__malloc_unlock>
 800308a:	0020      	movs	r0, r4
 800308c:	2207      	movs	r2, #7
 800308e:	300b      	adds	r0, #11
 8003090:	1d23      	adds	r3, r4, #4
 8003092:	4390      	bics	r0, r2
 8003094:	1ac2      	subs	r2, r0, r3
 8003096:	4298      	cmp	r0, r3
 8003098:	d0df      	beq.n	800305a <_malloc_r+0x86>
 800309a:	1a1b      	subs	r3, r3, r0
 800309c:	50a3      	str	r3, [r4, r2]
 800309e:	e7dc      	b.n	800305a <_malloc_r+0x86>
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	e7ef      	b.n	8003084 <_malloc_r+0xb0>
 80030a4:	0023      	movs	r3, r4
 80030a6:	6864      	ldr	r4, [r4, #4]
 80030a8:	e7a6      	b.n	8002ff8 <_malloc_r+0x24>
 80030aa:	9c00      	ldr	r4, [sp, #0]
 80030ac:	6863      	ldr	r3, [r4, #4]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	e7ad      	b.n	800300e <_malloc_r+0x3a>
 80030b2:	001a      	movs	r2, r3
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	42a3      	cmp	r3, r4
 80030b8:	d1fb      	bne.n	80030b2 <_malloc_r+0xde>
 80030ba:	2300      	movs	r3, #0
 80030bc:	e7da      	b.n	8003074 <_malloc_r+0xa0>
 80030be:	230c      	movs	r3, #12
 80030c0:	0028      	movs	r0, r5
 80030c2:	602b      	str	r3, [r5, #0]
 80030c4:	f000 f80e 	bl	80030e4 <__malloc_unlock>
 80030c8:	e7c6      	b.n	8003058 <_malloc_r+0x84>
 80030ca:	6007      	str	r7, [r0, #0]
 80030cc:	e7da      	b.n	8003084 <_malloc_r+0xb0>
 80030ce:	46c0      	nop			@ (mov r8, r8)
 80030d0:	2000027c 	.word	0x2000027c

080030d4 <__malloc_lock>:
 80030d4:	b510      	push	{r4, lr}
 80030d6:	4802      	ldr	r0, [pc, #8]	@ (80030e0 <__malloc_lock+0xc>)
 80030d8:	f7ff ff0e 	bl	8002ef8 <__retarget_lock_acquire_recursive>
 80030dc:	bd10      	pop	{r4, pc}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	20000274 	.word	0x20000274

080030e4 <__malloc_unlock>:
 80030e4:	b510      	push	{r4, lr}
 80030e6:	4802      	ldr	r0, [pc, #8]	@ (80030f0 <__malloc_unlock+0xc>)
 80030e8:	f7ff ff07 	bl	8002efa <__retarget_lock_release_recursive>
 80030ec:	bd10      	pop	{r4, pc}
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	20000274 	.word	0x20000274

080030f4 <__ssputs_r>:
 80030f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f6:	688e      	ldr	r6, [r1, #8]
 80030f8:	b085      	sub	sp, #20
 80030fa:	001f      	movs	r7, r3
 80030fc:	000c      	movs	r4, r1
 80030fe:	680b      	ldr	r3, [r1, #0]
 8003100:	9002      	str	r0, [sp, #8]
 8003102:	9203      	str	r2, [sp, #12]
 8003104:	42be      	cmp	r6, r7
 8003106:	d830      	bhi.n	800316a <__ssputs_r+0x76>
 8003108:	210c      	movs	r1, #12
 800310a:	5e62      	ldrsh	r2, [r4, r1]
 800310c:	2190      	movs	r1, #144	@ 0x90
 800310e:	00c9      	lsls	r1, r1, #3
 8003110:	420a      	tst	r2, r1
 8003112:	d028      	beq.n	8003166 <__ssputs_r+0x72>
 8003114:	2003      	movs	r0, #3
 8003116:	6921      	ldr	r1, [r4, #16]
 8003118:	1a5b      	subs	r3, r3, r1
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	6963      	ldr	r3, [r4, #20]
 800311e:	4343      	muls	r3, r0
 8003120:	9801      	ldr	r0, [sp, #4]
 8003122:	0fdd      	lsrs	r5, r3, #31
 8003124:	18ed      	adds	r5, r5, r3
 8003126:	1c7b      	adds	r3, r7, #1
 8003128:	181b      	adds	r3, r3, r0
 800312a:	106d      	asrs	r5, r5, #1
 800312c:	42ab      	cmp	r3, r5
 800312e:	d900      	bls.n	8003132 <__ssputs_r+0x3e>
 8003130:	001d      	movs	r5, r3
 8003132:	0552      	lsls	r2, r2, #21
 8003134:	d528      	bpl.n	8003188 <__ssputs_r+0x94>
 8003136:	0029      	movs	r1, r5
 8003138:	9802      	ldr	r0, [sp, #8]
 800313a:	f7ff ff4b 	bl	8002fd4 <_malloc_r>
 800313e:	1e06      	subs	r6, r0, #0
 8003140:	d02c      	beq.n	800319c <__ssputs_r+0xa8>
 8003142:	9a01      	ldr	r2, [sp, #4]
 8003144:	6921      	ldr	r1, [r4, #16]
 8003146:	f000 fae2 	bl	800370e <memcpy>
 800314a:	89a2      	ldrh	r2, [r4, #12]
 800314c:	4b18      	ldr	r3, [pc, #96]	@ (80031b0 <__ssputs_r+0xbc>)
 800314e:	401a      	ands	r2, r3
 8003150:	2380      	movs	r3, #128	@ 0x80
 8003152:	4313      	orrs	r3, r2
 8003154:	81a3      	strh	r3, [r4, #12]
 8003156:	9b01      	ldr	r3, [sp, #4]
 8003158:	6126      	str	r6, [r4, #16]
 800315a:	18f6      	adds	r6, r6, r3
 800315c:	6026      	str	r6, [r4, #0]
 800315e:	003e      	movs	r6, r7
 8003160:	6165      	str	r5, [r4, #20]
 8003162:	1aed      	subs	r5, r5, r3
 8003164:	60a5      	str	r5, [r4, #8]
 8003166:	42be      	cmp	r6, r7
 8003168:	d900      	bls.n	800316c <__ssputs_r+0x78>
 800316a:	003e      	movs	r6, r7
 800316c:	0032      	movs	r2, r6
 800316e:	9903      	ldr	r1, [sp, #12]
 8003170:	6820      	ldr	r0, [r4, #0]
 8003172:	f000 fa9b 	bl	80036ac <memmove>
 8003176:	2000      	movs	r0, #0
 8003178:	68a3      	ldr	r3, [r4, #8]
 800317a:	1b9b      	subs	r3, r3, r6
 800317c:	60a3      	str	r3, [r4, #8]
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	199b      	adds	r3, r3, r6
 8003182:	6023      	str	r3, [r4, #0]
 8003184:	b005      	add	sp, #20
 8003186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003188:	002a      	movs	r2, r5
 800318a:	9802      	ldr	r0, [sp, #8]
 800318c:	f000 fac8 	bl	8003720 <_realloc_r>
 8003190:	1e06      	subs	r6, r0, #0
 8003192:	d1e0      	bne.n	8003156 <__ssputs_r+0x62>
 8003194:	6921      	ldr	r1, [r4, #16]
 8003196:	9802      	ldr	r0, [sp, #8]
 8003198:	f7ff feb0 	bl	8002efc <_free_r>
 800319c:	230c      	movs	r3, #12
 800319e:	2001      	movs	r0, #1
 80031a0:	9a02      	ldr	r2, [sp, #8]
 80031a2:	4240      	negs	r0, r0
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	89a2      	ldrh	r2, [r4, #12]
 80031a8:	3334      	adds	r3, #52	@ 0x34
 80031aa:	4313      	orrs	r3, r2
 80031ac:	81a3      	strh	r3, [r4, #12]
 80031ae:	e7e9      	b.n	8003184 <__ssputs_r+0x90>
 80031b0:	fffffb7f 	.word	0xfffffb7f

080031b4 <_svfiprintf_r>:
 80031b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031b6:	b0a1      	sub	sp, #132	@ 0x84
 80031b8:	9003      	str	r0, [sp, #12]
 80031ba:	001d      	movs	r5, r3
 80031bc:	898b      	ldrh	r3, [r1, #12]
 80031be:	000f      	movs	r7, r1
 80031c0:	0016      	movs	r6, r2
 80031c2:	061b      	lsls	r3, r3, #24
 80031c4:	d511      	bpl.n	80031ea <_svfiprintf_r+0x36>
 80031c6:	690b      	ldr	r3, [r1, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10e      	bne.n	80031ea <_svfiprintf_r+0x36>
 80031cc:	2140      	movs	r1, #64	@ 0x40
 80031ce:	f7ff ff01 	bl	8002fd4 <_malloc_r>
 80031d2:	6038      	str	r0, [r7, #0]
 80031d4:	6138      	str	r0, [r7, #16]
 80031d6:	2800      	cmp	r0, #0
 80031d8:	d105      	bne.n	80031e6 <_svfiprintf_r+0x32>
 80031da:	230c      	movs	r3, #12
 80031dc:	9a03      	ldr	r2, [sp, #12]
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	2001      	movs	r0, #1
 80031e2:	4240      	negs	r0, r0
 80031e4:	e0cf      	b.n	8003386 <_svfiprintf_r+0x1d2>
 80031e6:	2340      	movs	r3, #64	@ 0x40
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	2300      	movs	r3, #0
 80031ec:	ac08      	add	r4, sp, #32
 80031ee:	6163      	str	r3, [r4, #20]
 80031f0:	3320      	adds	r3, #32
 80031f2:	7663      	strb	r3, [r4, #25]
 80031f4:	3310      	adds	r3, #16
 80031f6:	76a3      	strb	r3, [r4, #26]
 80031f8:	9507      	str	r5, [sp, #28]
 80031fa:	0035      	movs	r5, r6
 80031fc:	782b      	ldrb	r3, [r5, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <_svfiprintf_r+0x52>
 8003202:	2b25      	cmp	r3, #37	@ 0x25
 8003204:	d148      	bne.n	8003298 <_svfiprintf_r+0xe4>
 8003206:	1bab      	subs	r3, r5, r6
 8003208:	9305      	str	r3, [sp, #20]
 800320a:	42b5      	cmp	r5, r6
 800320c:	d00b      	beq.n	8003226 <_svfiprintf_r+0x72>
 800320e:	0032      	movs	r2, r6
 8003210:	0039      	movs	r1, r7
 8003212:	9803      	ldr	r0, [sp, #12]
 8003214:	f7ff ff6e 	bl	80030f4 <__ssputs_r>
 8003218:	3001      	adds	r0, #1
 800321a:	d100      	bne.n	800321e <_svfiprintf_r+0x6a>
 800321c:	e0ae      	b.n	800337c <_svfiprintf_r+0x1c8>
 800321e:	6963      	ldr	r3, [r4, #20]
 8003220:	9a05      	ldr	r2, [sp, #20]
 8003222:	189b      	adds	r3, r3, r2
 8003224:	6163      	str	r3, [r4, #20]
 8003226:	782b      	ldrb	r3, [r5, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d100      	bne.n	800322e <_svfiprintf_r+0x7a>
 800322c:	e0a6      	b.n	800337c <_svfiprintf_r+0x1c8>
 800322e:	2201      	movs	r2, #1
 8003230:	2300      	movs	r3, #0
 8003232:	4252      	negs	r2, r2
 8003234:	6062      	str	r2, [r4, #4]
 8003236:	a904      	add	r1, sp, #16
 8003238:	3254      	adds	r2, #84	@ 0x54
 800323a:	1852      	adds	r2, r2, r1
 800323c:	1c6e      	adds	r6, r5, #1
 800323e:	6023      	str	r3, [r4, #0]
 8003240:	60e3      	str	r3, [r4, #12]
 8003242:	60a3      	str	r3, [r4, #8]
 8003244:	7013      	strb	r3, [r2, #0]
 8003246:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003248:	4b54      	ldr	r3, [pc, #336]	@ (800339c <_svfiprintf_r+0x1e8>)
 800324a:	2205      	movs	r2, #5
 800324c:	0018      	movs	r0, r3
 800324e:	7831      	ldrb	r1, [r6, #0]
 8003250:	9305      	str	r3, [sp, #20]
 8003252:	f000 fa51 	bl	80036f8 <memchr>
 8003256:	1c75      	adds	r5, r6, #1
 8003258:	2800      	cmp	r0, #0
 800325a:	d11f      	bne.n	800329c <_svfiprintf_r+0xe8>
 800325c:	6822      	ldr	r2, [r4, #0]
 800325e:	06d3      	lsls	r3, r2, #27
 8003260:	d504      	bpl.n	800326c <_svfiprintf_r+0xb8>
 8003262:	2353      	movs	r3, #83	@ 0x53
 8003264:	a904      	add	r1, sp, #16
 8003266:	185b      	adds	r3, r3, r1
 8003268:	2120      	movs	r1, #32
 800326a:	7019      	strb	r1, [r3, #0]
 800326c:	0713      	lsls	r3, r2, #28
 800326e:	d504      	bpl.n	800327a <_svfiprintf_r+0xc6>
 8003270:	2353      	movs	r3, #83	@ 0x53
 8003272:	a904      	add	r1, sp, #16
 8003274:	185b      	adds	r3, r3, r1
 8003276:	212b      	movs	r1, #43	@ 0x2b
 8003278:	7019      	strb	r1, [r3, #0]
 800327a:	7833      	ldrb	r3, [r6, #0]
 800327c:	2b2a      	cmp	r3, #42	@ 0x2a
 800327e:	d016      	beq.n	80032ae <_svfiprintf_r+0xfa>
 8003280:	0035      	movs	r5, r6
 8003282:	2100      	movs	r1, #0
 8003284:	200a      	movs	r0, #10
 8003286:	68e3      	ldr	r3, [r4, #12]
 8003288:	782a      	ldrb	r2, [r5, #0]
 800328a:	1c6e      	adds	r6, r5, #1
 800328c:	3a30      	subs	r2, #48	@ 0x30
 800328e:	2a09      	cmp	r2, #9
 8003290:	d950      	bls.n	8003334 <_svfiprintf_r+0x180>
 8003292:	2900      	cmp	r1, #0
 8003294:	d111      	bne.n	80032ba <_svfiprintf_r+0x106>
 8003296:	e017      	b.n	80032c8 <_svfiprintf_r+0x114>
 8003298:	3501      	adds	r5, #1
 800329a:	e7af      	b.n	80031fc <_svfiprintf_r+0x48>
 800329c:	9b05      	ldr	r3, [sp, #20]
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	1ac0      	subs	r0, r0, r3
 80032a2:	2301      	movs	r3, #1
 80032a4:	4083      	lsls	r3, r0
 80032a6:	4313      	orrs	r3, r2
 80032a8:	002e      	movs	r6, r5
 80032aa:	6023      	str	r3, [r4, #0]
 80032ac:	e7cc      	b.n	8003248 <_svfiprintf_r+0x94>
 80032ae:	9b07      	ldr	r3, [sp, #28]
 80032b0:	1d19      	adds	r1, r3, #4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	9107      	str	r1, [sp, #28]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	db01      	blt.n	80032be <_svfiprintf_r+0x10a>
 80032ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032bc:	e004      	b.n	80032c8 <_svfiprintf_r+0x114>
 80032be:	425b      	negs	r3, r3
 80032c0:	60e3      	str	r3, [r4, #12]
 80032c2:	2302      	movs	r3, #2
 80032c4:	4313      	orrs	r3, r2
 80032c6:	6023      	str	r3, [r4, #0]
 80032c8:	782b      	ldrb	r3, [r5, #0]
 80032ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80032cc:	d10c      	bne.n	80032e8 <_svfiprintf_r+0x134>
 80032ce:	786b      	ldrb	r3, [r5, #1]
 80032d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80032d2:	d134      	bne.n	800333e <_svfiprintf_r+0x18a>
 80032d4:	9b07      	ldr	r3, [sp, #28]
 80032d6:	3502      	adds	r5, #2
 80032d8:	1d1a      	adds	r2, r3, #4
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	9207      	str	r2, [sp, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	da01      	bge.n	80032e6 <_svfiprintf_r+0x132>
 80032e2:	2301      	movs	r3, #1
 80032e4:	425b      	negs	r3, r3
 80032e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80032e8:	4e2d      	ldr	r6, [pc, #180]	@ (80033a0 <_svfiprintf_r+0x1ec>)
 80032ea:	2203      	movs	r2, #3
 80032ec:	0030      	movs	r0, r6
 80032ee:	7829      	ldrb	r1, [r5, #0]
 80032f0:	f000 fa02 	bl	80036f8 <memchr>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	d006      	beq.n	8003306 <_svfiprintf_r+0x152>
 80032f8:	2340      	movs	r3, #64	@ 0x40
 80032fa:	1b80      	subs	r0, r0, r6
 80032fc:	4083      	lsls	r3, r0
 80032fe:	6822      	ldr	r2, [r4, #0]
 8003300:	3501      	adds	r5, #1
 8003302:	4313      	orrs	r3, r2
 8003304:	6023      	str	r3, [r4, #0]
 8003306:	7829      	ldrb	r1, [r5, #0]
 8003308:	2206      	movs	r2, #6
 800330a:	4826      	ldr	r0, [pc, #152]	@ (80033a4 <_svfiprintf_r+0x1f0>)
 800330c:	1c6e      	adds	r6, r5, #1
 800330e:	7621      	strb	r1, [r4, #24]
 8003310:	f000 f9f2 	bl	80036f8 <memchr>
 8003314:	2800      	cmp	r0, #0
 8003316:	d038      	beq.n	800338a <_svfiprintf_r+0x1d6>
 8003318:	4b23      	ldr	r3, [pc, #140]	@ (80033a8 <_svfiprintf_r+0x1f4>)
 800331a:	2b00      	cmp	r3, #0
 800331c:	d122      	bne.n	8003364 <_svfiprintf_r+0x1b0>
 800331e:	2207      	movs	r2, #7
 8003320:	9b07      	ldr	r3, [sp, #28]
 8003322:	3307      	adds	r3, #7
 8003324:	4393      	bics	r3, r2
 8003326:	3308      	adds	r3, #8
 8003328:	9307      	str	r3, [sp, #28]
 800332a:	6963      	ldr	r3, [r4, #20]
 800332c:	9a04      	ldr	r2, [sp, #16]
 800332e:	189b      	adds	r3, r3, r2
 8003330:	6163      	str	r3, [r4, #20]
 8003332:	e762      	b.n	80031fa <_svfiprintf_r+0x46>
 8003334:	4343      	muls	r3, r0
 8003336:	0035      	movs	r5, r6
 8003338:	2101      	movs	r1, #1
 800333a:	189b      	adds	r3, r3, r2
 800333c:	e7a4      	b.n	8003288 <_svfiprintf_r+0xd4>
 800333e:	2300      	movs	r3, #0
 8003340:	200a      	movs	r0, #10
 8003342:	0019      	movs	r1, r3
 8003344:	3501      	adds	r5, #1
 8003346:	6063      	str	r3, [r4, #4]
 8003348:	782a      	ldrb	r2, [r5, #0]
 800334a:	1c6e      	adds	r6, r5, #1
 800334c:	3a30      	subs	r2, #48	@ 0x30
 800334e:	2a09      	cmp	r2, #9
 8003350:	d903      	bls.n	800335a <_svfiprintf_r+0x1a6>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0c8      	beq.n	80032e8 <_svfiprintf_r+0x134>
 8003356:	9109      	str	r1, [sp, #36]	@ 0x24
 8003358:	e7c6      	b.n	80032e8 <_svfiprintf_r+0x134>
 800335a:	4341      	muls	r1, r0
 800335c:	0035      	movs	r5, r6
 800335e:	2301      	movs	r3, #1
 8003360:	1889      	adds	r1, r1, r2
 8003362:	e7f1      	b.n	8003348 <_svfiprintf_r+0x194>
 8003364:	aa07      	add	r2, sp, #28
 8003366:	9200      	str	r2, [sp, #0]
 8003368:	0021      	movs	r1, r4
 800336a:	003a      	movs	r2, r7
 800336c:	4b0f      	ldr	r3, [pc, #60]	@ (80033ac <_svfiprintf_r+0x1f8>)
 800336e:	9803      	ldr	r0, [sp, #12]
 8003370:	e000      	b.n	8003374 <_svfiprintf_r+0x1c0>
 8003372:	bf00      	nop
 8003374:	9004      	str	r0, [sp, #16]
 8003376:	9b04      	ldr	r3, [sp, #16]
 8003378:	3301      	adds	r3, #1
 800337a:	d1d6      	bne.n	800332a <_svfiprintf_r+0x176>
 800337c:	89bb      	ldrh	r3, [r7, #12]
 800337e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003380:	065b      	lsls	r3, r3, #25
 8003382:	d500      	bpl.n	8003386 <_svfiprintf_r+0x1d2>
 8003384:	e72c      	b.n	80031e0 <_svfiprintf_r+0x2c>
 8003386:	b021      	add	sp, #132	@ 0x84
 8003388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800338a:	aa07      	add	r2, sp, #28
 800338c:	9200      	str	r2, [sp, #0]
 800338e:	0021      	movs	r1, r4
 8003390:	003a      	movs	r2, r7
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <_svfiprintf_r+0x1f8>)
 8003394:	9803      	ldr	r0, [sp, #12]
 8003396:	f000 f87b 	bl	8003490 <_printf_i>
 800339a:	e7eb      	b.n	8003374 <_svfiprintf_r+0x1c0>
 800339c:	0800380b 	.word	0x0800380b
 80033a0:	08003811 	.word	0x08003811
 80033a4:	08003815 	.word	0x08003815
 80033a8:	00000000 	.word	0x00000000
 80033ac:	080030f5 	.word	0x080030f5

080033b0 <_printf_common>:
 80033b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033b2:	0016      	movs	r6, r2
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	688a      	ldr	r2, [r1, #8]
 80033b8:	690b      	ldr	r3, [r1, #16]
 80033ba:	000c      	movs	r4, r1
 80033bc:	9000      	str	r0, [sp, #0]
 80033be:	4293      	cmp	r3, r2
 80033c0:	da00      	bge.n	80033c4 <_printf_common+0x14>
 80033c2:	0013      	movs	r3, r2
 80033c4:	0022      	movs	r2, r4
 80033c6:	6033      	str	r3, [r6, #0]
 80033c8:	3243      	adds	r2, #67	@ 0x43
 80033ca:	7812      	ldrb	r2, [r2, #0]
 80033cc:	2a00      	cmp	r2, #0
 80033ce:	d001      	beq.n	80033d4 <_printf_common+0x24>
 80033d0:	3301      	adds	r3, #1
 80033d2:	6033      	str	r3, [r6, #0]
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	069b      	lsls	r3, r3, #26
 80033d8:	d502      	bpl.n	80033e0 <_printf_common+0x30>
 80033da:	6833      	ldr	r3, [r6, #0]
 80033dc:	3302      	adds	r3, #2
 80033de:	6033      	str	r3, [r6, #0]
 80033e0:	6822      	ldr	r2, [r4, #0]
 80033e2:	2306      	movs	r3, #6
 80033e4:	0015      	movs	r5, r2
 80033e6:	401d      	ands	r5, r3
 80033e8:	421a      	tst	r2, r3
 80033ea:	d027      	beq.n	800343c <_printf_common+0x8c>
 80033ec:	0023      	movs	r3, r4
 80033ee:	3343      	adds	r3, #67	@ 0x43
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	1e5a      	subs	r2, r3, #1
 80033f4:	4193      	sbcs	r3, r2
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	0692      	lsls	r2, r2, #26
 80033fa:	d430      	bmi.n	800345e <_printf_common+0xae>
 80033fc:	0022      	movs	r2, r4
 80033fe:	9901      	ldr	r1, [sp, #4]
 8003400:	9800      	ldr	r0, [sp, #0]
 8003402:	9d08      	ldr	r5, [sp, #32]
 8003404:	3243      	adds	r2, #67	@ 0x43
 8003406:	47a8      	blx	r5
 8003408:	3001      	adds	r0, #1
 800340a:	d025      	beq.n	8003458 <_printf_common+0xa8>
 800340c:	2206      	movs	r2, #6
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	2500      	movs	r5, #0
 8003412:	4013      	ands	r3, r2
 8003414:	2b04      	cmp	r3, #4
 8003416:	d105      	bne.n	8003424 <_printf_common+0x74>
 8003418:	6833      	ldr	r3, [r6, #0]
 800341a:	68e5      	ldr	r5, [r4, #12]
 800341c:	1aed      	subs	r5, r5, r3
 800341e:	43eb      	mvns	r3, r5
 8003420:	17db      	asrs	r3, r3, #31
 8003422:	401d      	ands	r5, r3
 8003424:	68a3      	ldr	r3, [r4, #8]
 8003426:	6922      	ldr	r2, [r4, #16]
 8003428:	4293      	cmp	r3, r2
 800342a:	dd01      	ble.n	8003430 <_printf_common+0x80>
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	18ed      	adds	r5, r5, r3
 8003430:	2600      	movs	r6, #0
 8003432:	42b5      	cmp	r5, r6
 8003434:	d120      	bne.n	8003478 <_printf_common+0xc8>
 8003436:	2000      	movs	r0, #0
 8003438:	e010      	b.n	800345c <_printf_common+0xac>
 800343a:	3501      	adds	r5, #1
 800343c:	68e3      	ldr	r3, [r4, #12]
 800343e:	6832      	ldr	r2, [r6, #0]
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	42ab      	cmp	r3, r5
 8003444:	ddd2      	ble.n	80033ec <_printf_common+0x3c>
 8003446:	0022      	movs	r2, r4
 8003448:	2301      	movs	r3, #1
 800344a:	9901      	ldr	r1, [sp, #4]
 800344c:	9800      	ldr	r0, [sp, #0]
 800344e:	9f08      	ldr	r7, [sp, #32]
 8003450:	3219      	adds	r2, #25
 8003452:	47b8      	blx	r7
 8003454:	3001      	adds	r0, #1
 8003456:	d1f0      	bne.n	800343a <_printf_common+0x8a>
 8003458:	2001      	movs	r0, #1
 800345a:	4240      	negs	r0, r0
 800345c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800345e:	2030      	movs	r0, #48	@ 0x30
 8003460:	18e1      	adds	r1, r4, r3
 8003462:	3143      	adds	r1, #67	@ 0x43
 8003464:	7008      	strb	r0, [r1, #0]
 8003466:	0021      	movs	r1, r4
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	3145      	adds	r1, #69	@ 0x45
 800346c:	7809      	ldrb	r1, [r1, #0]
 800346e:	18a2      	adds	r2, r4, r2
 8003470:	3243      	adds	r2, #67	@ 0x43
 8003472:	3302      	adds	r3, #2
 8003474:	7011      	strb	r1, [r2, #0]
 8003476:	e7c1      	b.n	80033fc <_printf_common+0x4c>
 8003478:	0022      	movs	r2, r4
 800347a:	2301      	movs	r3, #1
 800347c:	9901      	ldr	r1, [sp, #4]
 800347e:	9800      	ldr	r0, [sp, #0]
 8003480:	9f08      	ldr	r7, [sp, #32]
 8003482:	321a      	adds	r2, #26
 8003484:	47b8      	blx	r7
 8003486:	3001      	adds	r0, #1
 8003488:	d0e6      	beq.n	8003458 <_printf_common+0xa8>
 800348a:	3601      	adds	r6, #1
 800348c:	e7d1      	b.n	8003432 <_printf_common+0x82>
	...

08003490 <_printf_i>:
 8003490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003492:	b08b      	sub	sp, #44	@ 0x2c
 8003494:	9206      	str	r2, [sp, #24]
 8003496:	000a      	movs	r2, r1
 8003498:	3243      	adds	r2, #67	@ 0x43
 800349a:	9307      	str	r3, [sp, #28]
 800349c:	9005      	str	r0, [sp, #20]
 800349e:	9203      	str	r2, [sp, #12]
 80034a0:	7e0a      	ldrb	r2, [r1, #24]
 80034a2:	000c      	movs	r4, r1
 80034a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80034a6:	2a78      	cmp	r2, #120	@ 0x78
 80034a8:	d809      	bhi.n	80034be <_printf_i+0x2e>
 80034aa:	2a62      	cmp	r2, #98	@ 0x62
 80034ac:	d80b      	bhi.n	80034c6 <_printf_i+0x36>
 80034ae:	2a00      	cmp	r2, #0
 80034b0:	d100      	bne.n	80034b4 <_printf_i+0x24>
 80034b2:	e0bc      	b.n	800362e <_printf_i+0x19e>
 80034b4:	497b      	ldr	r1, [pc, #492]	@ (80036a4 <_printf_i+0x214>)
 80034b6:	9104      	str	r1, [sp, #16]
 80034b8:	2a58      	cmp	r2, #88	@ 0x58
 80034ba:	d100      	bne.n	80034be <_printf_i+0x2e>
 80034bc:	e090      	b.n	80035e0 <_printf_i+0x150>
 80034be:	0025      	movs	r5, r4
 80034c0:	3542      	adds	r5, #66	@ 0x42
 80034c2:	702a      	strb	r2, [r5, #0]
 80034c4:	e022      	b.n	800350c <_printf_i+0x7c>
 80034c6:	0010      	movs	r0, r2
 80034c8:	3863      	subs	r0, #99	@ 0x63
 80034ca:	2815      	cmp	r0, #21
 80034cc:	d8f7      	bhi.n	80034be <_printf_i+0x2e>
 80034ce:	f7fc fe25 	bl	800011c <__gnu_thumb1_case_shi>
 80034d2:	0016      	.short	0x0016
 80034d4:	fff6001f 	.word	0xfff6001f
 80034d8:	fff6fff6 	.word	0xfff6fff6
 80034dc:	001ffff6 	.word	0x001ffff6
 80034e0:	fff6fff6 	.word	0xfff6fff6
 80034e4:	fff6fff6 	.word	0xfff6fff6
 80034e8:	003600a1 	.word	0x003600a1
 80034ec:	fff60080 	.word	0xfff60080
 80034f0:	00b2fff6 	.word	0x00b2fff6
 80034f4:	0036fff6 	.word	0x0036fff6
 80034f8:	fff6fff6 	.word	0xfff6fff6
 80034fc:	0084      	.short	0x0084
 80034fe:	0025      	movs	r5, r4
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	3542      	adds	r5, #66	@ 0x42
 8003504:	1d11      	adds	r1, r2, #4
 8003506:	6019      	str	r1, [r3, #0]
 8003508:	6813      	ldr	r3, [r2, #0]
 800350a:	702b      	strb	r3, [r5, #0]
 800350c:	2301      	movs	r3, #1
 800350e:	e0a0      	b.n	8003652 <_printf_i+0x1c2>
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	6809      	ldr	r1, [r1, #0]
 8003514:	1d02      	adds	r2, r0, #4
 8003516:	060d      	lsls	r5, r1, #24
 8003518:	d50b      	bpl.n	8003532 <_printf_i+0xa2>
 800351a:	6806      	ldr	r6, [r0, #0]
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	2e00      	cmp	r6, #0
 8003520:	da03      	bge.n	800352a <_printf_i+0x9a>
 8003522:	232d      	movs	r3, #45	@ 0x2d
 8003524:	9a03      	ldr	r2, [sp, #12]
 8003526:	4276      	negs	r6, r6
 8003528:	7013      	strb	r3, [r2, #0]
 800352a:	4b5e      	ldr	r3, [pc, #376]	@ (80036a4 <_printf_i+0x214>)
 800352c:	270a      	movs	r7, #10
 800352e:	9304      	str	r3, [sp, #16]
 8003530:	e018      	b.n	8003564 <_printf_i+0xd4>
 8003532:	6806      	ldr	r6, [r0, #0]
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	0649      	lsls	r1, r1, #25
 8003538:	d5f1      	bpl.n	800351e <_printf_i+0x8e>
 800353a:	b236      	sxth	r6, r6
 800353c:	e7ef      	b.n	800351e <_printf_i+0x8e>
 800353e:	6808      	ldr	r0, [r1, #0]
 8003540:	6819      	ldr	r1, [r3, #0]
 8003542:	c940      	ldmia	r1!, {r6}
 8003544:	0605      	lsls	r5, r0, #24
 8003546:	d402      	bmi.n	800354e <_printf_i+0xbe>
 8003548:	0640      	lsls	r0, r0, #25
 800354a:	d500      	bpl.n	800354e <_printf_i+0xbe>
 800354c:	b2b6      	uxth	r6, r6
 800354e:	6019      	str	r1, [r3, #0]
 8003550:	4b54      	ldr	r3, [pc, #336]	@ (80036a4 <_printf_i+0x214>)
 8003552:	270a      	movs	r7, #10
 8003554:	9304      	str	r3, [sp, #16]
 8003556:	2a6f      	cmp	r2, #111	@ 0x6f
 8003558:	d100      	bne.n	800355c <_printf_i+0xcc>
 800355a:	3f02      	subs	r7, #2
 800355c:	0023      	movs	r3, r4
 800355e:	2200      	movs	r2, #0
 8003560:	3343      	adds	r3, #67	@ 0x43
 8003562:	701a      	strb	r2, [r3, #0]
 8003564:	6863      	ldr	r3, [r4, #4]
 8003566:	60a3      	str	r3, [r4, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	db03      	blt.n	8003574 <_printf_i+0xe4>
 800356c:	2104      	movs	r1, #4
 800356e:	6822      	ldr	r2, [r4, #0]
 8003570:	438a      	bics	r2, r1
 8003572:	6022      	str	r2, [r4, #0]
 8003574:	2e00      	cmp	r6, #0
 8003576:	d102      	bne.n	800357e <_printf_i+0xee>
 8003578:	9d03      	ldr	r5, [sp, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00c      	beq.n	8003598 <_printf_i+0x108>
 800357e:	9d03      	ldr	r5, [sp, #12]
 8003580:	0030      	movs	r0, r6
 8003582:	0039      	movs	r1, r7
 8003584:	f7fc fe5a 	bl	800023c <__aeabi_uidivmod>
 8003588:	9b04      	ldr	r3, [sp, #16]
 800358a:	3d01      	subs	r5, #1
 800358c:	5c5b      	ldrb	r3, [r3, r1]
 800358e:	702b      	strb	r3, [r5, #0]
 8003590:	0033      	movs	r3, r6
 8003592:	0006      	movs	r6, r0
 8003594:	429f      	cmp	r7, r3
 8003596:	d9f3      	bls.n	8003580 <_printf_i+0xf0>
 8003598:	2f08      	cmp	r7, #8
 800359a:	d109      	bne.n	80035b0 <_printf_i+0x120>
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	07db      	lsls	r3, r3, #31
 80035a0:	d506      	bpl.n	80035b0 <_printf_i+0x120>
 80035a2:	6862      	ldr	r2, [r4, #4]
 80035a4:	6923      	ldr	r3, [r4, #16]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	dc02      	bgt.n	80035b0 <_printf_i+0x120>
 80035aa:	2330      	movs	r3, #48	@ 0x30
 80035ac:	3d01      	subs	r5, #1
 80035ae:	702b      	strb	r3, [r5, #0]
 80035b0:	9b03      	ldr	r3, [sp, #12]
 80035b2:	1b5b      	subs	r3, r3, r5
 80035b4:	6123      	str	r3, [r4, #16]
 80035b6:	9b07      	ldr	r3, [sp, #28]
 80035b8:	0021      	movs	r1, r4
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	9805      	ldr	r0, [sp, #20]
 80035be:	9b06      	ldr	r3, [sp, #24]
 80035c0:	aa09      	add	r2, sp, #36	@ 0x24
 80035c2:	f7ff fef5 	bl	80033b0 <_printf_common>
 80035c6:	3001      	adds	r0, #1
 80035c8:	d148      	bne.n	800365c <_printf_i+0x1cc>
 80035ca:	2001      	movs	r0, #1
 80035cc:	4240      	negs	r0, r0
 80035ce:	b00b      	add	sp, #44	@ 0x2c
 80035d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d2:	2220      	movs	r2, #32
 80035d4:	6809      	ldr	r1, [r1, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	6022      	str	r2, [r4, #0]
 80035da:	2278      	movs	r2, #120	@ 0x78
 80035dc:	4932      	ldr	r1, [pc, #200]	@ (80036a8 <_printf_i+0x218>)
 80035de:	9104      	str	r1, [sp, #16]
 80035e0:	0021      	movs	r1, r4
 80035e2:	3145      	adds	r1, #69	@ 0x45
 80035e4:	700a      	strb	r2, [r1, #0]
 80035e6:	6819      	ldr	r1, [r3, #0]
 80035e8:	6822      	ldr	r2, [r4, #0]
 80035ea:	c940      	ldmia	r1!, {r6}
 80035ec:	0610      	lsls	r0, r2, #24
 80035ee:	d402      	bmi.n	80035f6 <_printf_i+0x166>
 80035f0:	0650      	lsls	r0, r2, #25
 80035f2:	d500      	bpl.n	80035f6 <_printf_i+0x166>
 80035f4:	b2b6      	uxth	r6, r6
 80035f6:	6019      	str	r1, [r3, #0]
 80035f8:	07d3      	lsls	r3, r2, #31
 80035fa:	d502      	bpl.n	8003602 <_printf_i+0x172>
 80035fc:	2320      	movs	r3, #32
 80035fe:	4313      	orrs	r3, r2
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	2e00      	cmp	r6, #0
 8003604:	d001      	beq.n	800360a <_printf_i+0x17a>
 8003606:	2710      	movs	r7, #16
 8003608:	e7a8      	b.n	800355c <_printf_i+0xcc>
 800360a:	2220      	movs	r2, #32
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	4393      	bics	r3, r2
 8003610:	6023      	str	r3, [r4, #0]
 8003612:	e7f8      	b.n	8003606 <_printf_i+0x176>
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	680d      	ldr	r5, [r1, #0]
 8003618:	1d10      	adds	r0, r2, #4
 800361a:	6949      	ldr	r1, [r1, #20]
 800361c:	6018      	str	r0, [r3, #0]
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	062e      	lsls	r6, r5, #24
 8003622:	d501      	bpl.n	8003628 <_printf_i+0x198>
 8003624:	6019      	str	r1, [r3, #0]
 8003626:	e002      	b.n	800362e <_printf_i+0x19e>
 8003628:	066d      	lsls	r5, r5, #25
 800362a:	d5fb      	bpl.n	8003624 <_printf_i+0x194>
 800362c:	8019      	strh	r1, [r3, #0]
 800362e:	2300      	movs	r3, #0
 8003630:	9d03      	ldr	r5, [sp, #12]
 8003632:	6123      	str	r3, [r4, #16]
 8003634:	e7bf      	b.n	80035b6 <_printf_i+0x126>
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	1d11      	adds	r1, r2, #4
 800363a:	6019      	str	r1, [r3, #0]
 800363c:	6815      	ldr	r5, [r2, #0]
 800363e:	2100      	movs	r1, #0
 8003640:	0028      	movs	r0, r5
 8003642:	6862      	ldr	r2, [r4, #4]
 8003644:	f000 f858 	bl	80036f8 <memchr>
 8003648:	2800      	cmp	r0, #0
 800364a:	d001      	beq.n	8003650 <_printf_i+0x1c0>
 800364c:	1b40      	subs	r0, r0, r5
 800364e:	6060      	str	r0, [r4, #4]
 8003650:	6863      	ldr	r3, [r4, #4]
 8003652:	6123      	str	r3, [r4, #16]
 8003654:	2300      	movs	r3, #0
 8003656:	9a03      	ldr	r2, [sp, #12]
 8003658:	7013      	strb	r3, [r2, #0]
 800365a:	e7ac      	b.n	80035b6 <_printf_i+0x126>
 800365c:	002a      	movs	r2, r5
 800365e:	6923      	ldr	r3, [r4, #16]
 8003660:	9906      	ldr	r1, [sp, #24]
 8003662:	9805      	ldr	r0, [sp, #20]
 8003664:	9d07      	ldr	r5, [sp, #28]
 8003666:	47a8      	blx	r5
 8003668:	3001      	adds	r0, #1
 800366a:	d0ae      	beq.n	80035ca <_printf_i+0x13a>
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	079b      	lsls	r3, r3, #30
 8003670:	d415      	bmi.n	800369e <_printf_i+0x20e>
 8003672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003674:	68e0      	ldr	r0, [r4, #12]
 8003676:	4298      	cmp	r0, r3
 8003678:	daa9      	bge.n	80035ce <_printf_i+0x13e>
 800367a:	0018      	movs	r0, r3
 800367c:	e7a7      	b.n	80035ce <_printf_i+0x13e>
 800367e:	0022      	movs	r2, r4
 8003680:	2301      	movs	r3, #1
 8003682:	9906      	ldr	r1, [sp, #24]
 8003684:	9805      	ldr	r0, [sp, #20]
 8003686:	9e07      	ldr	r6, [sp, #28]
 8003688:	3219      	adds	r2, #25
 800368a:	47b0      	blx	r6
 800368c:	3001      	adds	r0, #1
 800368e:	d09c      	beq.n	80035ca <_printf_i+0x13a>
 8003690:	3501      	adds	r5, #1
 8003692:	68e3      	ldr	r3, [r4, #12]
 8003694:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	42ab      	cmp	r3, r5
 800369a:	dcf0      	bgt.n	800367e <_printf_i+0x1ee>
 800369c:	e7e9      	b.n	8003672 <_printf_i+0x1e2>
 800369e:	2500      	movs	r5, #0
 80036a0:	e7f7      	b.n	8003692 <_printf_i+0x202>
 80036a2:	46c0      	nop			@ (mov r8, r8)
 80036a4:	0800381c 	.word	0x0800381c
 80036a8:	0800382d 	.word	0x0800382d

080036ac <memmove>:
 80036ac:	b510      	push	{r4, lr}
 80036ae:	4288      	cmp	r0, r1
 80036b0:	d806      	bhi.n	80036c0 <memmove+0x14>
 80036b2:	2300      	movs	r3, #0
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d008      	beq.n	80036ca <memmove+0x1e>
 80036b8:	5ccc      	ldrb	r4, [r1, r3]
 80036ba:	54c4      	strb	r4, [r0, r3]
 80036bc:	3301      	adds	r3, #1
 80036be:	e7f9      	b.n	80036b4 <memmove+0x8>
 80036c0:	188b      	adds	r3, r1, r2
 80036c2:	4298      	cmp	r0, r3
 80036c4:	d2f5      	bcs.n	80036b2 <memmove+0x6>
 80036c6:	3a01      	subs	r2, #1
 80036c8:	d200      	bcs.n	80036cc <memmove+0x20>
 80036ca:	bd10      	pop	{r4, pc}
 80036cc:	5c8b      	ldrb	r3, [r1, r2]
 80036ce:	5483      	strb	r3, [r0, r2]
 80036d0:	e7f9      	b.n	80036c6 <memmove+0x1a>
	...

080036d4 <_sbrk_r>:
 80036d4:	2300      	movs	r3, #0
 80036d6:	b570      	push	{r4, r5, r6, lr}
 80036d8:	4d06      	ldr	r5, [pc, #24]	@ (80036f4 <_sbrk_r+0x20>)
 80036da:	0004      	movs	r4, r0
 80036dc:	0008      	movs	r0, r1
 80036de:	602b      	str	r3, [r5, #0]
 80036e0:	f7fe f866 	bl	80017b0 <_sbrk>
 80036e4:	1c43      	adds	r3, r0, #1
 80036e6:	d103      	bne.n	80036f0 <_sbrk_r+0x1c>
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d000      	beq.n	80036f0 <_sbrk_r+0x1c>
 80036ee:	6023      	str	r3, [r4, #0]
 80036f0:	bd70      	pop	{r4, r5, r6, pc}
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	20000270 	.word	0x20000270

080036f8 <memchr>:
 80036f8:	b2c9      	uxtb	r1, r1
 80036fa:	1882      	adds	r2, r0, r2
 80036fc:	4290      	cmp	r0, r2
 80036fe:	d101      	bne.n	8003704 <memchr+0xc>
 8003700:	2000      	movs	r0, #0
 8003702:	4770      	bx	lr
 8003704:	7803      	ldrb	r3, [r0, #0]
 8003706:	428b      	cmp	r3, r1
 8003708:	d0fb      	beq.n	8003702 <memchr+0xa>
 800370a:	3001      	adds	r0, #1
 800370c:	e7f6      	b.n	80036fc <memchr+0x4>

0800370e <memcpy>:
 800370e:	2300      	movs	r3, #0
 8003710:	b510      	push	{r4, lr}
 8003712:	429a      	cmp	r2, r3
 8003714:	d100      	bne.n	8003718 <memcpy+0xa>
 8003716:	bd10      	pop	{r4, pc}
 8003718:	5ccc      	ldrb	r4, [r1, r3]
 800371a:	54c4      	strb	r4, [r0, r3]
 800371c:	3301      	adds	r3, #1
 800371e:	e7f8      	b.n	8003712 <memcpy+0x4>

08003720 <_realloc_r>:
 8003720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003722:	0006      	movs	r6, r0
 8003724:	000c      	movs	r4, r1
 8003726:	0015      	movs	r5, r2
 8003728:	2900      	cmp	r1, #0
 800372a:	d105      	bne.n	8003738 <_realloc_r+0x18>
 800372c:	0011      	movs	r1, r2
 800372e:	f7ff fc51 	bl	8002fd4 <_malloc_r>
 8003732:	0004      	movs	r4, r0
 8003734:	0020      	movs	r0, r4
 8003736:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003738:	2a00      	cmp	r2, #0
 800373a:	d103      	bne.n	8003744 <_realloc_r+0x24>
 800373c:	f7ff fbde 	bl	8002efc <_free_r>
 8003740:	2400      	movs	r4, #0
 8003742:	e7f7      	b.n	8003734 <_realloc_r+0x14>
 8003744:	f000 f81b 	bl	800377e <_malloc_usable_size_r>
 8003748:	0007      	movs	r7, r0
 800374a:	4285      	cmp	r5, r0
 800374c:	d802      	bhi.n	8003754 <_realloc_r+0x34>
 800374e:	0843      	lsrs	r3, r0, #1
 8003750:	42ab      	cmp	r3, r5
 8003752:	d3ef      	bcc.n	8003734 <_realloc_r+0x14>
 8003754:	0029      	movs	r1, r5
 8003756:	0030      	movs	r0, r6
 8003758:	f7ff fc3c 	bl	8002fd4 <_malloc_r>
 800375c:	9001      	str	r0, [sp, #4]
 800375e:	2800      	cmp	r0, #0
 8003760:	d0ee      	beq.n	8003740 <_realloc_r+0x20>
 8003762:	002a      	movs	r2, r5
 8003764:	42bd      	cmp	r5, r7
 8003766:	d900      	bls.n	800376a <_realloc_r+0x4a>
 8003768:	003a      	movs	r2, r7
 800376a:	0021      	movs	r1, r4
 800376c:	9801      	ldr	r0, [sp, #4]
 800376e:	f7ff ffce 	bl	800370e <memcpy>
 8003772:	0021      	movs	r1, r4
 8003774:	0030      	movs	r0, r6
 8003776:	f7ff fbc1 	bl	8002efc <_free_r>
 800377a:	9c01      	ldr	r4, [sp, #4]
 800377c:	e7da      	b.n	8003734 <_realloc_r+0x14>

0800377e <_malloc_usable_size_r>:
 800377e:	1f0b      	subs	r3, r1, #4
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	1f18      	subs	r0, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	da01      	bge.n	800378c <_malloc_usable_size_r+0xe>
 8003788:	580b      	ldr	r3, [r1, r0]
 800378a:	18c0      	adds	r0, r0, r3
 800378c:	4770      	bx	lr
	...

08003790 <_init>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr

0800379c <_fini>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	46c0      	nop			@ (mov r8, r8)
 80037a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a2:	bc08      	pop	{r3}
 80037a4:	469e      	mov	lr, r3
 80037a6:	4770      	bx	lr
